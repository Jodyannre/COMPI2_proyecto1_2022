// Code generated from c:\Users\Joddie\Documents\GitHub\COMPI2_proyecto1_2022\Back\parser\Nparser.g4 by ANTLR 4.8. DO NOT EDIT.

package parser // Nparser

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

import "github.com/colegno/arraylist"
import "Back/analizador/Ast"
import "Back/analizador/expresiones"
import "Back/analizador/instrucciones"
import "Back/analizador/exp_ins"
import "Back/analizador/transferencia"
import "Back/analizador/bucles"
import "Back/analizador/Ast/simbolos"
import "Back/analizador/fn_primitivas"

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 91, 833,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 3, 2, 3, 2,
	3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 7, 4, 96, 10, 4, 12, 4, 14, 4,
	99, 11, 4, 3, 4, 3, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5,
	3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5,
	3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5,
	3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5,
	3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 153, 10, 5, 3, 6, 3, 6, 3, 6,
	3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6,
	3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6,
	3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6,
	3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6,
	3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6,
	3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6,
	3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6,
	3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6,
	3, 6, 3, 6, 3, 6, 3, 6, 5, 6, 258, 10, 6, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7,
	3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7,
	3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7,
	3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7,
	3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7,
	3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7,
	3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 5, 7, 332, 10, 7, 3, 8, 3, 8,
	3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 5, 8, 344, 10, 8, 3, 9,
	3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9,
	3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9,
	3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9,
	5, 9, 383, 10, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9,
	3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9,
	3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9,
	3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9,
	3, 9, 3, 9, 3, 9, 7, 9, 433, 10, 9, 12, 9, 14, 9, 436, 11, 9, 3, 10, 3,
	10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10,
	3, 10, 3, 10, 5, 10, 452, 10, 10, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3,
	11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11,
	3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 5,
	11, 480, 10, 11, 3, 12, 6, 12, 483, 10, 12, 13, 12, 14, 12, 484, 3, 12,
	3, 12, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 14, 3, 14, 3, 14, 3,
	14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14,
	3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3,
	14, 3, 14, 5, 14, 521, 10, 14, 3, 15, 6, 15, 524, 10, 15, 13, 15, 14, 15,
	525, 3, 15, 3, 15, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 17, 3,
	17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 5, 17, 545, 10, 17,
	3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 19, 6, 19, 555, 10,
	19, 13, 19, 14, 19, 556, 3, 19, 3, 19, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20,
	3, 20, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 5, 21, 573, 10, 21, 3,
	21, 3, 21, 3, 21, 3, 21, 3, 21, 7, 21, 580, 10, 21, 12, 21, 14, 21, 583,
	11, 21, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 23, 6, 23,
	593, 10, 23, 13, 23, 14, 23, 594, 3, 23, 3, 23, 3, 24, 3, 24, 3, 24, 3,
	24, 3, 24, 3, 24, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 5, 25, 611,
	10, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 7, 25, 618, 10, 25, 12, 25,
	14, 25, 621, 11, 25, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 5, 26, 629,
	10, 26, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 5, 27, 637, 10, 27, 3,
	28, 3, 28, 3, 28, 3, 29, 3, 29, 3, 29, 3, 29, 3, 30, 3, 30, 3, 30, 3, 30,
	3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 32, 3, 32, 3, 32, 3, 32, 3,
	32, 3, 32, 3, 32, 3, 32, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33,
	3, 33, 3, 33, 7, 33, 673, 10, 33, 12, 33, 14, 33, 676, 11, 33, 3, 34, 3,
	34, 3, 34, 3, 34, 3, 34, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35,
	3, 35, 3, 35, 7, 35, 692, 10, 35, 12, 35, 14, 35, 695, 11, 35, 3, 36, 3,
	36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 5, 36,
	708, 10, 36, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3,
	37, 3, 37, 5, 37, 720, 10, 37, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38,
	3, 38, 3, 38, 3, 38, 7, 38, 731, 10, 38, 12, 38, 14, 38, 734, 11, 38, 3,
	39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 5, 39,
	746, 10, 39, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3,
	40, 7, 40, 757, 10, 40, 12, 40, 14, 40, 760, 11, 40, 3, 41, 3, 41, 3, 41,
	3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3,
	41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 5, 41, 783, 10, 41,
	3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3,
	42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 5, 42, 801, 10, 42, 3, 43, 3, 43,
	3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3,
	43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43,
	3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 5, 43, 831, 10, 43, 3, 43, 2, 9, 16,
	40, 48, 64, 68, 74, 78, 44, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24,
	26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60,
	62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 2, 7, 4, 2, 76, 76, 78,
	78, 3, 2, 72, 74, 3, 2, 76, 77, 4, 2, 64, 68, 70, 70, 4, 2, 68, 68, 70,
	70, 2, 882, 2, 86, 3, 2, 2, 2, 4, 89, 3, 2, 2, 2, 6, 97, 3, 2, 2, 2, 8,
	152, 3, 2, 2, 2, 10, 257, 3, 2, 2, 2, 12, 331, 3, 2, 2, 2, 14, 343, 3,
	2, 2, 2, 16, 382, 3, 2, 2, 2, 18, 451, 3, 2, 2, 2, 20, 479, 3, 2, 2, 2,
	22, 482, 3, 2, 2, 2, 24, 488, 3, 2, 2, 2, 26, 520, 3, 2, 2, 2, 28, 523,
	3, 2, 2, 2, 30, 529, 3, 2, 2, 2, 32, 544, 3, 2, 2, 2, 34, 546, 3, 2, 2,
	2, 36, 554, 3, 2, 2, 2, 38, 560, 3, 2, 2, 2, 40, 572, 3, 2, 2, 2, 42, 584,
	3, 2, 2, 2, 44, 592, 3, 2, 2, 2, 46, 598, 3, 2, 2, 2, 48, 610, 3, 2, 2,
	2, 50, 628, 3, 2, 2, 2, 52, 636, 3, 2, 2, 2, 54, 638, 3, 2, 2, 2, 56, 641,
	3, 2, 2, 2, 58, 645, 3, 2, 2, 2, 60, 649, 3, 2, 2, 2, 62, 655, 3, 2, 2,
	2, 64, 663, 3, 2, 2, 2, 66, 677, 3, 2, 2, 2, 68, 682, 3, 2, 2, 2, 70, 707,
	3, 2, 2, 2, 72, 719, 3, 2, 2, 2, 74, 721, 3, 2, 2, 2, 76, 745, 3, 2, 2,
	2, 78, 747, 3, 2, 2, 2, 80, 782, 3, 2, 2, 2, 82, 800, 3, 2, 2, 2, 84, 830,
	3, 2, 2, 2, 86, 87, 5, 6, 4, 2, 87, 88, 8, 2, 1, 2, 88, 3, 3, 2, 2, 2,
	89, 90, 7, 82, 2, 2, 90, 91, 5, 6, 4, 2, 91, 92, 7, 83, 2, 2, 92, 93, 8,
	3, 1, 2, 93, 5, 3, 2, 2, 2, 94, 96, 5, 8, 5, 2, 95, 94, 3, 2, 2, 2, 96,
	99, 3, 2, 2, 2, 97, 95, 3, 2, 2, 2, 97, 98, 3, 2, 2, 2, 98, 100, 3, 2,
	2, 2, 99, 97, 3, 2, 2, 2, 100, 101, 8, 4, 1, 2, 101, 7, 3, 2, 2, 2, 102,
	103, 5, 72, 37, 2, 103, 104, 7, 63, 2, 2, 104, 105, 8, 5, 1, 2, 105, 153,
	3, 2, 2, 2, 106, 107, 5, 16, 9, 2, 107, 108, 8, 5, 1, 2, 108, 153, 3, 2,
	2, 2, 109, 110, 5, 10, 6, 2, 110, 111, 7, 63, 2, 2, 111, 112, 8, 5, 1,
	2, 112, 153, 3, 2, 2, 2, 113, 114, 5, 12, 7, 2, 114, 115, 8, 5, 1, 2, 115,
	153, 3, 2, 2, 2, 116, 117, 5, 14, 8, 2, 117, 118, 7, 63, 2, 2, 118, 119,
	8, 5, 1, 2, 119, 153, 3, 2, 2, 2, 120, 121, 5, 20, 11, 2, 121, 122, 8,
	5, 1, 2, 122, 153, 3, 2, 2, 2, 123, 124, 5, 34, 18, 2, 124, 125, 8, 5,
	1, 2, 125, 153, 3, 2, 2, 2, 126, 127, 5, 56, 29, 2, 127, 128, 8, 5, 1,
	2, 128, 153, 3, 2, 2, 2, 129, 130, 5, 66, 34, 2, 130, 131, 8, 5, 1, 2,
	131, 153, 3, 2, 2, 2, 132, 133, 5, 52, 27, 2, 133, 134, 7, 63, 2, 2, 134,
	135, 8, 5, 1, 2, 135, 153, 3, 2, 2, 2, 136, 137, 5, 54, 28, 2, 137, 138,
	7, 63, 2, 2, 138, 139, 8, 5, 1, 2, 139, 153, 3, 2, 2, 2, 140, 141, 5, 50,
	26, 2, 141, 142, 7, 63, 2, 2, 142, 143, 8, 5, 1, 2, 143, 153, 3, 2, 2,
	2, 144, 145, 5, 60, 31, 2, 145, 146, 7, 63, 2, 2, 146, 147, 8, 5, 1, 2,
	147, 153, 3, 2, 2, 2, 148, 149, 5, 62, 32, 2, 149, 150, 7, 63, 2, 2, 150,
	151, 8, 5, 1, 2, 151, 153, 3, 2, 2, 2, 152, 102, 3, 2, 2, 2, 152, 106,
	3, 2, 2, 2, 152, 109, 3, 2, 2, 2, 152, 113, 3, 2, 2, 2, 152, 116, 3, 2,
	2, 2, 152, 120, 3, 2, 2, 2, 152, 123, 3, 2, 2, 2, 152, 126, 3, 2, 2, 2,
	152, 129, 3, 2, 2, 2, 152, 132, 3, 2, 2, 2, 152, 136, 3, 2, 2, 2, 152,
	140, 3, 2, 2, 2, 152, 144, 3, 2, 2, 2, 152, 148, 3, 2, 2, 2, 153, 9, 3,
	2, 2, 2, 154, 155, 7, 17, 2, 2, 155, 156, 7, 51, 2, 2, 156, 157, 7, 71,
	2, 2, 157, 158, 5, 16, 9, 2, 158, 159, 8, 6, 1, 2, 159, 258, 3, 2, 2, 2,
	160, 161, 7, 17, 2, 2, 161, 162, 7, 51, 2, 2, 162, 163, 7, 71, 2, 2, 163,
	164, 5, 32, 17, 2, 164, 165, 8, 6, 1, 2, 165, 258, 3, 2, 2, 2, 166, 167,
	7, 17, 2, 2, 167, 168, 7, 51, 2, 2, 168, 169, 7, 59, 2, 2, 169, 170, 5,
	18, 10, 2, 170, 171, 7, 71, 2, 2, 171, 172, 5, 16, 9, 2, 172, 173, 8, 6,
	1, 2, 173, 258, 3, 2, 2, 2, 174, 175, 7, 17, 2, 2, 175, 176, 7, 51, 2,
	2, 176, 177, 7, 59, 2, 2, 177, 178, 5, 18, 10, 2, 178, 179, 7, 71, 2, 2,
	179, 180, 5, 32, 17, 2, 180, 181, 8, 6, 1, 2, 181, 258, 3, 2, 2, 2, 182,
	183, 7, 17, 2, 2, 183, 184, 7, 16, 2, 2, 184, 185, 7, 51, 2, 2, 185, 186,
	7, 71, 2, 2, 186, 187, 5, 16, 9, 2, 187, 188, 8, 6, 1, 2, 188, 258, 3,
	2, 2, 2, 189, 190, 7, 17, 2, 2, 190, 191, 7, 16, 2, 2, 191, 192, 7, 51,
	2, 2, 192, 193, 7, 71, 2, 2, 193, 194, 5, 32, 17, 2, 194, 195, 8, 6, 1,
	2, 195, 258, 3, 2, 2, 2, 196, 197, 7, 17, 2, 2, 197, 198, 7, 16, 2, 2,
	198, 199, 7, 51, 2, 2, 199, 200, 7, 59, 2, 2, 200, 201, 5, 18, 10, 2, 201,
	202, 8, 6, 1, 2, 202, 258, 3, 2, 2, 2, 203, 204, 7, 17, 2, 2, 204, 205,
	7, 16, 2, 2, 205, 206, 7, 51, 2, 2, 206, 207, 7, 59, 2, 2, 207, 208, 5,
	18, 10, 2, 208, 209, 7, 71, 2, 2, 209, 210, 5, 16, 9, 2, 210, 211, 8, 6,
	1, 2, 211, 258, 3, 2, 2, 2, 212, 213, 7, 17, 2, 2, 213, 214, 7, 16, 2,
	2, 214, 215, 7, 51, 2, 2, 215, 216, 7, 59, 2, 2, 216, 217, 5, 18, 10, 2,
	217, 218, 7, 71, 2, 2, 218, 219, 5, 32, 17, 2, 219, 220, 8, 6, 1, 2, 220,
	258, 3, 2, 2, 2, 221, 222, 7, 17, 2, 2, 222, 223, 7, 51, 2, 2, 223, 224,
	7, 71, 2, 2, 224, 225, 5, 16, 9, 2, 225, 226, 8, 6, 1, 2, 226, 258, 3,
	2, 2, 2, 227, 228, 7, 17, 2, 2, 228, 229, 7, 16, 2, 2, 229, 230, 7, 51,
	2, 2, 230, 231, 7, 71, 2, 2, 231, 232, 5, 16, 9, 2, 232, 233, 8, 6, 1,
	2, 233, 258, 3, 2, 2, 2, 234, 235, 7, 17, 2, 2, 235, 236, 7, 51, 2, 2,
	236, 237, 7, 59, 2, 2, 237, 238, 7, 14, 2, 2, 238, 239, 7, 67, 2, 2, 239,
	240, 5, 18, 10, 2, 240, 241, 7, 65, 2, 2, 241, 242, 7, 71, 2, 2, 242, 243,
	5, 16, 9, 2, 243, 244, 8, 6, 1, 2, 244, 258, 3, 2, 2, 2, 245, 246, 7, 17,
	2, 2, 246, 247, 7, 16, 2, 2, 247, 248, 7, 51, 2, 2, 248, 249, 7, 59, 2,
	2, 249, 250, 7, 14, 2, 2, 250, 251, 7, 67, 2, 2, 251, 252, 5, 18, 10, 2,
	252, 253, 7, 65, 2, 2, 253, 254, 7, 71, 2, 2, 254, 255, 5, 16, 9, 2, 255,
	256, 8, 6, 1, 2, 256, 258, 3, 2, 2, 2, 257, 154, 3, 2, 2, 2, 257, 160,
	3, 2, 2, 2, 257, 166, 3, 2, 2, 2, 257, 174, 3, 2, 2, 2, 257, 182, 3, 2,
	2, 2, 257, 189, 3, 2, 2, 2, 257, 196, 3, 2, 2, 2, 257, 203, 3, 2, 2, 2,
	257, 212, 3, 2, 2, 2, 257, 221, 3, 2, 2, 2, 257, 227, 3, 2, 2, 2, 257,
	234, 3, 2, 2, 2, 257, 245, 3, 2, 2, 2, 258, 11, 3, 2, 2, 2, 259, 260, 7,
	47, 2, 2, 260, 261, 7, 24, 2, 2, 261, 262, 7, 51, 2, 2, 262, 263, 7, 80,
	2, 2, 263, 264, 7, 81, 2, 2, 264, 265, 7, 75, 2, 2, 265, 266, 5, 18, 10,
	2, 266, 267, 5, 4, 3, 2, 267, 268, 8, 7, 1, 2, 268, 332, 3, 2, 2, 2, 269,
	270, 7, 47, 2, 2, 270, 271, 7, 24, 2, 2, 271, 272, 7, 51, 2, 2, 272, 273,
	7, 80, 2, 2, 273, 274, 7, 81, 2, 2, 274, 275, 5, 4, 3, 2, 275, 276, 8,
	7, 1, 2, 276, 332, 3, 2, 2, 2, 277, 278, 7, 24, 2, 2, 278, 279, 7, 51,
	2, 2, 279, 280, 7, 80, 2, 2, 280, 281, 7, 81, 2, 2, 281, 282, 7, 75, 2,
	2, 282, 283, 5, 18, 10, 2, 283, 284, 5, 4, 3, 2, 284, 285, 8, 7, 1, 2,
	285, 332, 3, 2, 2, 2, 286, 287, 7, 24, 2, 2, 287, 288, 7, 51, 2, 2, 288,
	289, 7, 80, 2, 2, 289, 290, 7, 81, 2, 2, 290, 291, 5, 4, 3, 2, 291, 292,
	8, 7, 1, 2, 292, 332, 3, 2, 2, 2, 293, 294, 7, 47, 2, 2, 294, 295, 7, 24,
	2, 2, 295, 296, 7, 51, 2, 2, 296, 297, 7, 80, 2, 2, 297, 298, 5, 68, 35,
	2, 298, 299, 7, 81, 2, 2, 299, 300, 7, 75, 2, 2, 300, 301, 5, 18, 10, 2,
	301, 302, 5, 4, 3, 2, 302, 303, 8, 7, 1, 2, 303, 332, 3, 2, 2, 2, 304,
	305, 7, 47, 2, 2, 305, 306, 7, 24, 2, 2, 306, 307, 7, 51, 2, 2, 307, 308,
	7, 80, 2, 2, 308, 309, 5, 68, 35, 2, 309, 310, 7, 81, 2, 2, 310, 311, 5,
	4, 3, 2, 311, 312, 8, 7, 1, 2, 312, 332, 3, 2, 2, 2, 313, 314, 7, 24, 2,
	2, 314, 315, 7, 51, 2, 2, 315, 316, 7, 80, 2, 2, 316, 317, 5, 68, 35, 2,
	317, 318, 7, 81, 2, 2, 318, 319, 7, 75, 2, 2, 319, 320, 5, 18, 10, 2, 320,
	321, 5, 4, 3, 2, 321, 322, 8, 7, 1, 2, 322, 332, 3, 2, 2, 2, 323, 324,
	7, 24, 2, 2, 324, 325, 7, 51, 2, 2, 325, 326, 7, 80, 2, 2, 326, 327, 5,
	68, 35, 2, 327, 328, 7, 81, 2, 2, 328, 329, 5, 4, 3, 2, 329, 330, 8, 7,
	1, 2, 330, 332, 3, 2, 2, 2, 331, 259, 3, 2, 2, 2, 331, 269, 3, 2, 2, 2,
	331, 277, 3, 2, 2, 2, 331, 286, 3, 2, 2, 2, 331, 293, 3, 2, 2, 2, 331,
	304, 3, 2, 2, 2, 331, 313, 3, 2, 2, 2, 331, 323, 3, 2, 2, 2, 332, 13, 3,
	2, 2, 2, 333, 334, 7, 51, 2, 2, 334, 335, 7, 71, 2, 2, 335, 336, 5, 16,
	9, 2, 336, 337, 8, 8, 1, 2, 337, 344, 3, 2, 2, 2, 338, 339, 7, 51, 2, 2,
	339, 340, 7, 71, 2, 2, 340, 341, 5, 32, 17, 2, 341, 342, 8, 8, 1, 2, 342,
	344, 3, 2, 2, 2, 343, 333, 3, 2, 2, 2, 343, 338, 3, 2, 2, 2, 344, 15, 3,
	2, 2, 2, 345, 346, 8, 9, 1, 2, 346, 347, 9, 2, 2, 2, 347, 348, 5, 16, 9,
	23, 348, 349, 8, 9, 1, 2, 349, 383, 3, 2, 2, 2, 350, 351, 7, 80, 2, 2,
	351, 352, 5, 16, 9, 2, 352, 353, 7, 81, 2, 2, 353, 354, 8, 9, 1, 2, 354,
	383, 3, 2, 2, 2, 355, 356, 7, 80, 2, 2, 356, 357, 5, 16, 9, 2, 357, 358,
	7, 13, 2, 2, 358, 359, 5, 18, 10, 2, 359, 360, 7, 81, 2, 2, 360, 361, 8,
	9, 1, 2, 361, 383, 3, 2, 2, 2, 362, 363, 5, 72, 37, 2, 363, 364, 8, 9,
	1, 2, 364, 383, 3, 2, 2, 2, 365, 366, 5, 80, 41, 2, 366, 367, 8, 9, 1,
	2, 367, 383, 3, 2, 2, 2, 368, 369, 7, 51, 2, 2, 369, 383, 8, 9, 1, 2, 370,
	371, 7, 21, 2, 2, 371, 383, 8, 9, 1, 2, 372, 373, 7, 22, 2, 2, 373, 383,
	8, 9, 1, 2, 374, 375, 7, 88, 2, 2, 375, 383, 8, 9, 1, 2, 376, 377, 7, 49,
	2, 2, 377, 383, 8, 9, 1, 2, 378, 379, 7, 48, 2, 2, 379, 383, 8, 9, 1, 2,
	380, 381, 7, 86, 2, 2, 381, 383, 8, 9, 1, 2, 382, 345, 3, 2, 2, 2, 382,
	350, 3, 2, 2, 2, 382, 355, 3, 2, 2, 2, 382, 362, 3, 2, 2, 2, 382, 365,
	3, 2, 2, 2, 382, 368, 3, 2, 2, 2, 382, 370, 3, 2, 2, 2, 382, 372, 3, 2,
	2, 2, 382, 374, 3, 2, 2, 2, 382, 376, 3, 2, 2, 2, 382, 378, 3, 2, 2, 2,
	382, 380, 3, 2, 2, 2, 383, 434, 3, 2, 2, 2, 384, 385, 12, 19, 2, 2, 385,
	386, 9, 3, 2, 2, 386, 387, 5, 16, 9, 20, 387, 388, 8, 9, 1, 2, 388, 433,
	3, 2, 2, 2, 389, 390, 12, 18, 2, 2, 390, 391, 9, 4, 2, 2, 391, 392, 5,
	16, 9, 19, 392, 393, 8, 9, 1, 2, 393, 433, 3, 2, 2, 2, 394, 395, 12, 17,
	2, 2, 395, 396, 9, 5, 2, 2, 396, 397, 5, 16, 9, 18, 397, 398, 8, 9, 1,
	2, 398, 433, 3, 2, 2, 2, 399, 400, 12, 16, 2, 2, 400, 401, 9, 6, 2, 2,
	401, 402, 5, 16, 9, 17, 402, 403, 8, 9, 1, 2, 403, 433, 3, 2, 2, 2, 404,
	405, 12, 15, 2, 2, 405, 406, 7, 56, 2, 2, 406, 407, 5, 16, 9, 16, 407,
	408, 8, 9, 1, 2, 408, 433, 3, 2, 2, 2, 409, 410, 12, 14, 2, 2, 410, 411,
	7, 54, 2, 2, 411, 412, 5, 16, 9, 15, 412, 413, 8, 9, 1, 2, 413, 433, 3,
	2, 2, 2, 414, 415, 12, 22, 2, 2, 415, 416, 7, 61, 2, 2, 416, 417, 7, 19,
	2, 2, 417, 418, 7, 80, 2, 2, 418, 419, 7, 81, 2, 2, 419, 433, 8, 9, 1,
	2, 420, 421, 12, 21, 2, 2, 421, 422, 7, 61, 2, 2, 422, 423, 7, 26, 2, 2,
	423, 424, 7, 80, 2, 2, 424, 425, 7, 81, 2, 2, 425, 433, 8, 9, 1, 2, 426,
	427, 12, 20, 2, 2, 427, 428, 7, 61, 2, 2, 428, 429, 7, 25, 2, 2, 429, 430,
	7, 80, 2, 2, 430, 431, 7, 81, 2, 2, 431, 433, 8, 9, 1, 2, 432, 384, 3,
	2, 2, 2, 432, 389, 3, 2, 2, 2, 432, 394, 3, 2, 2, 2, 432, 399, 3, 2, 2,
	2, 432, 404, 3, 2, 2, 2, 432, 409, 3, 2, 2, 2, 432, 414, 3, 2, 2, 2, 432,
	420, 3, 2, 2, 2, 432, 426, 3, 2, 2, 2, 433, 436, 3, 2, 2, 2, 434, 432,
	3, 2, 2, 2, 434, 435, 3, 2, 2, 2, 435, 17, 3, 2, 2, 2, 436, 434, 3, 2,
	2, 2, 437, 438, 7, 3, 2, 2, 438, 452, 8, 10, 1, 2, 439, 440, 7, 4, 2, 2,
	440, 452, 8, 10, 1, 2, 441, 442, 7, 6, 2, 2, 442, 452, 8, 10, 1, 2, 443,
	444, 7, 5, 2, 2, 444, 452, 8, 10, 1, 2, 445, 446, 7, 7, 2, 2, 446, 452,
	8, 10, 1, 2, 447, 448, 7, 8, 2, 2, 448, 452, 8, 10, 1, 2, 449, 450, 7,
	9, 2, 2, 450, 452, 8, 10, 1, 2, 451, 437, 3, 2, 2, 2, 451, 439, 3, 2, 2,
	2, 451, 441, 3, 2, 2, 2, 451, 443, 3, 2, 2, 2, 451, 445, 3, 2, 2, 2, 451,
	447, 3, 2, 2, 2, 451, 449, 3, 2, 2, 2, 452, 19, 3, 2, 2, 2, 453, 454, 7,
	36, 2, 2, 454, 455, 5, 16, 9, 2, 455, 456, 5, 4, 3, 2, 456, 457, 8, 11,
	1, 2, 457, 480, 3, 2, 2, 2, 458, 459, 7, 36, 2, 2, 459, 460, 5, 16, 9,
	2, 460, 461, 5, 4, 3, 2, 461, 462, 7, 37, 2, 2, 462, 463, 5, 4, 3, 2, 463,
	464, 8, 11, 1, 2, 464, 480, 3, 2, 2, 2, 465, 466, 7, 36, 2, 2, 466, 467,
	5, 16, 9, 2, 467, 468, 5, 4, 3, 2, 468, 469, 5, 22, 12, 2, 469, 470, 8,
	11, 1, 2, 470, 480, 3, 2, 2, 2, 471, 472, 7, 36, 2, 2, 472, 473, 5, 16,
	9, 2, 473, 474, 5, 4, 3, 2, 474, 475, 5, 22, 12, 2, 475, 476, 7, 37, 2,
	2, 476, 477, 5, 4, 3, 2, 477, 478, 8, 11, 1, 2, 478, 480, 3, 2, 2, 2, 479,
	453, 3, 2, 2, 2, 479, 458, 3, 2, 2, 2, 479, 465, 3, 2, 2, 2, 479, 471,
	3, 2, 2, 2, 480, 21, 3, 2, 2, 2, 481, 483, 5, 24, 13, 2, 482, 481, 3, 2,
	2, 2, 483, 484, 3, 2, 2, 2, 484, 482, 3, 2, 2, 2, 484, 485, 3, 2, 2, 2,
	485, 486, 3, 2, 2, 2, 486, 487, 8, 12, 1, 2, 487, 23, 3, 2, 2, 2, 488,
	489, 7, 37, 2, 2, 489, 490, 7, 36, 2, 2, 490, 491, 5, 16, 9, 2, 491, 492,
	5, 4, 3, 2, 492, 493, 8, 13, 1, 2, 493, 25, 3, 2, 2, 2, 494, 495, 7, 36,
	2, 2, 495, 496, 5, 16, 9, 2, 496, 497, 5, 4, 3, 2, 497, 498, 8, 14, 1,
	2, 498, 521, 3, 2, 2, 2, 499, 500, 7, 36, 2, 2, 500, 501, 5, 16, 9, 2,
	501, 502, 5, 4, 3, 2, 502, 503, 7, 37, 2, 2, 503, 504, 5, 4, 3, 2, 504,
	505, 8, 14, 1, 2, 505, 521, 3, 2, 2, 2, 506, 507, 7, 36, 2, 2, 507, 508,
	5, 16, 9, 2, 508, 509, 5, 4, 3, 2, 509, 510, 5, 28, 15, 2, 510, 511, 8,
	14, 1, 2, 511, 521, 3, 2, 2, 2, 512, 513, 7, 36, 2, 2, 513, 514, 5, 16,
	9, 2, 514, 515, 5, 4, 3, 2, 515, 516, 5, 28, 15, 2, 516, 517, 7, 37, 2,
	2, 517, 518, 5, 4, 3, 2, 518, 519, 8, 14, 1, 2, 519, 521, 3, 2, 2, 2, 520,
	494, 3, 2, 2, 2, 520, 499, 3, 2, 2, 2, 520, 506, 3, 2, 2, 2, 520, 512,
	3, 2, 2, 2, 521, 27, 3, 2, 2, 2, 522, 524, 5, 30, 16, 2, 523, 522, 3, 2,
	2, 2, 524, 525, 3, 2, 2, 2, 525, 523, 3, 2, 2, 2, 525, 526, 3, 2, 2, 2,
	526, 527, 3, 2, 2, 2, 527, 528, 8, 15, 1, 2, 528, 29, 3, 2, 2, 2, 529,
	530, 7, 37, 2, 2, 530, 531, 7, 36, 2, 2, 531, 532, 5, 16, 9, 2, 532, 533,
	5, 4, 3, 2, 533, 534, 8, 16, 1, 2, 534, 31, 3, 2, 2, 2, 535, 536, 5, 26,
	14, 2, 536, 537, 8, 17, 1, 2, 537, 545, 3, 2, 2, 2, 538, 539, 5, 42, 22,
	2, 539, 540, 8, 17, 1, 2, 540, 545, 3, 2, 2, 2, 541, 542, 5, 58, 30, 2,
	542, 543, 8, 17, 1, 2, 543, 545, 3, 2, 2, 2, 544, 535, 3, 2, 2, 2, 544,
	538, 3, 2, 2, 2, 544, 541, 3, 2, 2, 2, 545, 33, 3, 2, 2, 2, 546, 547, 7,
	38, 2, 2, 547, 548, 5, 16, 9, 2, 548, 549, 7, 82, 2, 2, 549, 550, 5, 36,
	19, 2, 550, 551, 7, 83, 2, 2, 551, 552, 8, 18, 1, 2, 552, 35, 3, 2, 2,
	2, 553, 555, 5, 38, 20, 2, 554, 553, 3, 2, 2, 2, 555, 556, 3, 2, 2, 2,
	556, 554, 3, 2, 2, 2, 556, 557, 3, 2, 2, 2, 557, 558, 3, 2, 2, 2, 558,
	559, 8, 19, 1, 2, 559, 37, 3, 2, 2, 2, 560, 561, 5, 40, 21, 2, 561, 562,
	7, 69, 2, 2, 562, 563, 5, 4, 3, 2, 563, 564, 7, 62, 2, 2, 564, 565, 8,
	20, 1, 2, 565, 39, 3, 2, 2, 2, 566, 567, 8, 21, 1, 2, 567, 568, 5, 16,
	9, 2, 568, 569, 8, 21, 1, 2, 569, 573, 3, 2, 2, 2, 570, 571, 7, 52, 2,
	2, 571, 573, 8, 21, 1, 2, 572, 566, 3, 2, 2, 2, 572, 570, 3, 2, 2, 2, 573,
	581, 3, 2, 2, 2, 574, 575, 12, 5, 2, 2, 575, 576, 7, 53, 2, 2, 576, 577,
	5, 16, 9, 2, 577, 578, 8, 21, 1, 2, 578, 580, 3, 2, 2, 2, 579, 574, 3,
	2, 2, 2, 580, 583, 3, 2, 2, 2, 581, 579, 3, 2, 2, 2, 581, 582, 3, 2, 2,
	2, 582, 41, 3, 2, 2, 2, 583, 581, 3, 2, 2, 2, 584, 585, 7, 38, 2, 2, 585,
	586, 5, 16, 9, 2, 586, 587, 7, 82, 2, 2, 587, 588, 5, 44, 23, 2, 588, 589,
	7, 83, 2, 2, 589, 590, 8, 22, 1, 2, 590, 43, 3, 2, 2, 2, 591, 593, 5, 46,
	24, 2, 592, 591, 3, 2, 2, 2, 593, 594, 3, 2, 2, 2, 594, 592, 3, 2, 2, 2,
	594, 595, 3, 2, 2, 2, 595, 596, 3, 2, 2, 2, 596, 597, 8, 23, 1, 2, 597,
	45, 3, 2, 2, 2, 598, 599, 5, 48, 25, 2, 599, 600, 7, 69, 2, 2, 600, 601,
	5, 4, 3, 2, 601, 602, 7, 62, 2, 2, 602, 603, 8, 24, 1, 2, 603, 47, 3, 2,
	2, 2, 604, 605, 8, 25, 1, 2, 605, 606, 5, 16, 9, 2, 606, 607, 8, 25, 1,
	2, 607, 611, 3, 2, 2, 2, 608, 609, 7, 52, 2, 2, 609, 611, 8, 25, 1, 2,
	610, 604, 3, 2, 2, 2, 610, 608, 3, 2, 2, 2, 611, 619, 3, 2, 2, 2, 612,
	613, 12, 5, 2, 2, 613, 614, 7, 53, 2, 2, 614, 615, 5, 16, 9, 2, 615, 616,
	8, 25, 1, 2, 616, 618, 3, 2, 2, 2, 617, 612, 3, 2, 2, 2, 618, 621, 3, 2,
	2, 2, 619, 617, 3, 2, 2, 2, 619, 620, 3, 2, 2, 2, 620, 49, 3, 2, 2, 2,
	621, 619, 3, 2, 2, 2, 622, 623, 7, 43, 2, 2, 623, 629, 8, 26, 1, 2, 624,
	625, 7, 43, 2, 2, 625, 626, 5, 16, 9, 2, 626, 627, 8, 26, 1, 2, 627, 629,
	3, 2, 2, 2, 628, 622, 3, 2, 2, 2, 628, 624, 3, 2, 2, 2, 629, 51, 3, 2,
	2, 2, 630, 631, 7, 44, 2, 2, 631, 637, 8, 27, 1, 2, 632, 633, 7, 44, 2,
	2, 633, 634, 5, 16, 9, 2, 634, 635, 8, 27, 1, 2, 635, 637, 3, 2, 2, 2,
	636, 630, 3, 2, 2, 2, 636, 632, 3, 2, 2, 2, 637, 53, 3, 2, 2, 2, 638, 639,
	7, 45, 2, 2, 639, 640, 8, 28, 1, 2, 640, 55, 3, 2, 2, 2, 641, 642, 7, 39,
	2, 2, 642, 643, 5, 4, 3, 2, 643, 644, 8, 29, 1, 2, 644, 57, 3, 2, 2, 2,
	645, 646, 7, 39, 2, 2, 646, 647, 5, 4, 3, 2, 647, 648, 8, 30, 1, 2, 648,
	59, 3, 2, 2, 2, 649, 650, 7, 23, 2, 2, 650, 651, 7, 80, 2, 2, 651, 652,
	5, 16, 9, 2, 652, 653, 7, 81, 2, 2, 653, 654, 8, 31, 1, 2, 654, 61, 3,
	2, 2, 2, 655, 656, 7, 23, 2, 2, 656, 657, 7, 80, 2, 2, 657, 658, 7, 86,
	2, 2, 658, 659, 7, 62, 2, 2, 659, 660, 5, 64, 33, 2, 660, 661, 7, 81, 2,
	2, 661, 662, 8, 32, 1, 2, 662, 63, 3, 2, 2, 2, 663, 664, 8, 33, 1, 2, 664,
	665, 5, 16, 9, 2, 665, 666, 8, 33, 1, 2, 666, 674, 3, 2, 2, 2, 667, 668,
	12, 4, 2, 2, 668, 669, 7, 62, 2, 2, 669, 670, 5, 16, 9, 2, 670, 671, 8,
	33, 1, 2, 671, 673, 3, 2, 2, 2, 672, 667, 3, 2, 2, 2, 673, 676, 3, 2, 2,
	2, 674, 672, 3, 2, 2, 2, 674, 675, 3, 2, 2, 2, 675, 65, 3, 2, 2, 2, 676,
	674, 3, 2, 2, 2, 677, 678, 7, 40, 2, 2, 678, 679, 5, 16, 9, 2, 679, 680,
	5, 4, 3, 2, 680, 681, 8, 34, 1, 2, 681, 67, 3, 2, 2, 2, 682, 683, 8, 35,
	1, 2, 683, 684, 5, 70, 36, 2, 684, 685, 8, 35, 1, 2, 685, 693, 3, 2, 2,
	2, 686, 687, 12, 4, 2, 2, 687, 688, 7, 62, 2, 2, 688, 689, 5, 70, 36, 2,
	689, 690, 8, 35, 1, 2, 690, 692, 3, 2, 2, 2, 691, 686, 3, 2, 2, 2, 692,
	695, 3, 2, 2, 2, 693, 691, 3, 2, 2, 2, 693, 694, 3, 2, 2, 2, 694, 69, 3,
	2, 2, 2, 695, 693, 3, 2, 2, 2, 696, 697, 7, 16, 2, 2, 697, 698, 7, 51,
	2, 2, 698, 699, 7, 59, 2, 2, 699, 700, 5, 18, 10, 2, 700, 701, 8, 36, 1,
	2, 701, 708, 3, 2, 2, 2, 702, 703, 7, 51, 2, 2, 703, 704, 7, 59, 2, 2,
	704, 705, 5, 18, 10, 2, 705, 706, 8, 36, 1, 2, 706, 708, 3, 2, 2, 2, 707,
	696, 3, 2, 2, 2, 707, 702, 3, 2, 2, 2, 708, 71, 3, 2, 2, 2, 709, 710, 7,
	51, 2, 2, 710, 711, 7, 80, 2, 2, 711, 712, 5, 74, 38, 2, 712, 713, 7, 81,
	2, 2, 713, 714, 8, 37, 1, 2, 714, 720, 3, 2, 2, 2, 715, 716, 7, 51, 2,
	2, 716, 717, 7, 80, 2, 2, 717, 718, 7, 81, 2, 2, 718, 720, 8, 37, 1, 2,
	719, 709, 3, 2, 2, 2, 719, 715, 3, 2, 2, 2, 720, 73, 3, 2, 2, 2, 721, 722,
	8, 38, 1, 2, 722, 723, 5, 76, 39, 2, 723, 724, 8, 38, 1, 2, 724, 732, 3,
	2, 2, 2, 725, 726, 12, 4, 2, 2, 726, 727, 7, 62, 2, 2, 727, 728, 5, 76,
	39, 2, 728, 729, 8, 38, 1, 2, 729, 731, 3, 2, 2, 2, 730, 725, 3, 2, 2,
	2, 731, 734, 3, 2, 2, 2, 732, 730, 3, 2, 2, 2, 732, 733, 3, 2, 2, 2, 733,
	75, 3, 2, 2, 2, 734, 732, 3, 2, 2, 2, 735, 736, 5, 16, 9, 2, 736, 737,
	8, 39, 1, 2, 737, 746, 3, 2, 2, 2, 738, 739, 7, 55, 2, 2, 739, 740, 7,
	16, 2, 2, 740, 741, 7, 51, 2, 2, 741, 746, 8, 39, 1, 2, 742, 743, 7, 55,
	2, 2, 743, 744, 7, 51, 2, 2, 744, 746, 8, 39, 1, 2, 745, 735, 3, 2, 2,
	2, 745, 738, 3, 2, 2, 2, 745, 742, 3, 2, 2, 2, 746, 77, 3, 2, 2, 2, 747,
	748, 8, 40, 1, 2, 748, 749, 5, 16, 9, 2, 749, 750, 8, 40, 1, 2, 750, 758,
	3, 2, 2, 2, 751, 752, 12, 4, 2, 2, 752, 753, 7, 62, 2, 2, 753, 754, 5,
	16, 9, 2, 754, 755, 8, 40, 1, 2, 755, 757, 3, 2, 2, 2, 756, 751, 3, 2,
	2, 2, 757, 760, 3, 2, 2, 2, 758, 756, 3, 2, 2, 2, 758, 759, 3, 2, 2, 2,
	759, 79, 3, 2, 2, 2, 760, 758, 3, 2, 2, 2, 761, 762, 7, 14, 2, 2, 762,
	763, 7, 58, 2, 2, 763, 764, 7, 28, 2, 2, 764, 765, 7, 80, 2, 2, 765, 766,
	7, 81, 2, 2, 766, 783, 8, 41, 1, 2, 767, 768, 7, 15, 2, 2, 768, 769, 7,
	78, 2, 2, 769, 770, 7, 84, 2, 2, 770, 771, 5, 78, 40, 2, 771, 772, 7, 85,
	2, 2, 772, 773, 8, 41, 1, 2, 773, 783, 3, 2, 2, 2, 774, 775, 7, 14, 2,
	2, 775, 776, 7, 58, 2, 2, 776, 777, 7, 35, 2, 2, 777, 778, 7, 80, 2, 2,
	778, 779, 5, 16, 9, 2, 779, 780, 7, 81, 2, 2, 780, 781, 8, 41, 1, 2, 781,
	783, 3, 2, 2, 2, 782, 761, 3, 2, 2, 2, 782, 767, 3, 2, 2, 2, 782, 774,
	3, 2, 2, 2, 783, 81, 3, 2, 2, 2, 784, 785, 5, 16, 9, 2, 785, 786, 7, 61,
	2, 2, 786, 787, 7, 30, 2, 2, 787, 788, 7, 80, 2, 2, 788, 789, 5, 16, 9,
	2, 789, 790, 7, 81, 2, 2, 790, 801, 3, 2, 2, 2, 791, 792, 5, 16, 9, 2,
	792, 793, 7, 61, 2, 2, 793, 794, 7, 33, 2, 2, 794, 795, 7, 80, 2, 2, 795,
	796, 5, 16, 9, 2, 796, 797, 7, 62, 2, 2, 797, 798, 5, 16, 9, 2, 798, 799,
	7, 81, 2, 2, 799, 801, 3, 2, 2, 2, 800, 784, 3, 2, 2, 2, 800, 791, 3, 2,
	2, 2, 801, 83, 3, 2, 2, 2, 802, 803, 5, 16, 9, 2, 803, 804, 7, 61, 2, 2,
	804, 805, 7, 31, 2, 2, 805, 806, 7, 80, 2, 2, 806, 807, 5, 16, 9, 2, 807,
	808, 7, 81, 2, 2, 808, 831, 3, 2, 2, 2, 809, 810, 5, 16, 9, 2, 810, 811,
	7, 61, 2, 2, 811, 812, 7, 32, 2, 2, 812, 813, 7, 80, 2, 2, 813, 814, 7,
	55, 2, 2, 814, 815, 5, 16, 9, 2, 815, 816, 7, 81, 2, 2, 816, 831, 3, 2,
	2, 2, 817, 818, 5, 16, 9, 2, 818, 819, 7, 61, 2, 2, 819, 820, 7, 29, 2,
	2, 820, 821, 7, 80, 2, 2, 821, 822, 5, 16, 9, 2, 822, 823, 7, 81, 2, 2,
	823, 831, 3, 2, 2, 2, 824, 825, 5, 16, 9, 2, 825, 826, 7, 61, 2, 2, 826,
	827, 7, 34, 2, 2, 827, 828, 7, 80, 2, 2, 828, 829, 7, 81, 2, 2, 829, 831,
	3, 2, 2, 2, 830, 802, 3, 2, 2, 2, 830, 809, 3, 2, 2, 2, 830, 817, 3, 2,
	2, 2, 830, 824, 3, 2, 2, 2, 831, 85, 3, 2, 2, 2, 34, 97, 152, 257, 331,
	343, 382, 432, 434, 451, 479, 484, 520, 525, 544, 556, 572, 581, 594, 610,
	619, 628, 636, 674, 693, 707, 719, 732, 745, 758, 782, 800, 830,
}
var deserializer = antlr.NewATNDeserializer(nil)
var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)

var literalNames = []string{
	"", "'bool'", "'char'", "'f64'", "'i64'", "'&str'", "'String'", "'usize'",
	"'main'", "'powf'", "'pow'", "'as'", "'Vec'", "'vec'", "'mut'", "'let'",
	"'struct'", "'to_string'", "'to_owned'", "'true'", "'false'", "'println!'",
	"'fn'", "'abs'", "'sqrt'", "'clone'", "'new'", "'len'", "'push'", "'remove'",
	"'contains'", "'insert'", "'capacity'", "'with_capacity'", "'if'", "'else'",
	"'match'", "'loop'", "'while'", "'for'", "'in'", "'return'", "'break'",
	"'continue'", "'mod'", "'pub'", "", "", "", "", "'_'", "'|'", "'||'", "'&'",
	"'&&'", "':?'", "'::'", "':'", "'..'", "'.'", "','", "';'", "'>='", "'>'",
	"'<='", "'<'", "'=='", "'=>'", "'!='", "'='", "'%'", "'*'", "'/'", "'->'",
	"'-'", "'+'", "'!'", "'?'", "'('", "')'", "'{'", "'}'", "'['", "']'",
}
var symbolicNames = []string{
	"", "BOOL", "CHAR", "F64", "I64", "STR", "STRING", "USIZE", "MAIN", "POWF",
	"POW", "AS", "VEC", "VEC_M", "MUT", "LET", "STRUCT", "TO_STRING", "TO_OWNED",
	"TRUE", "FALSE", "PRINT", "FN", "ABS", "SQRT", "CLONE", "NEW", "LEN", "PUSH",
	"REMOVE", "CONTAINS", "INSERT", "CAPACITY", "WITH_CAPACITY", "IF", "ELSE",
	"MATCH", "LOOP", "WHILE", "FOR", "IN", "RETURN", "BREAK", "CONTINUE", "MOD",
	"PUB", "NUMERO", "DECIMAL", "ID_CAMEL", "ID", "DEFAULT", "O", "OR", "AMPERSAND",
	"AND", "PRINT_OP_DEBUG", "DOBLE_DOSPUNTOS", "DOSPUNTOS", "RANGO", "PUNTO",
	"COMA", "PUNTOCOMA", "MAYOR_I", "MAYOR", "MENOR_I", "MENOR", "IGUALDAD",
	"CASE", "DISTINTO", "IGUAL", "MODULO", "MULTIPLICACION", "DIVISION", "FN_TIPO_RETORNO",
	"RESTA", "SUMA", "NOT", "PREGUNTA", "PAR_IZQ", "PAR_DER", "LLAVE_IZQ",
	"LLAVE_DER", "CORCHETE_IZQ", "CORCHETE_DER", "CADENA", "ASCII", "CARACTER",
	"WHITESPACE", "COMMENT", "LINE_COMMENT",
}

var ruleNames = []string{
	"inicio", "bloque", "instrucciones", "instruccion", "declaracion", "declaracion_funcion",
	"asignacion", "expresion", "tipo_dato", "control_if", "bloque_else_if",
	"else_if", "control_if_exp", "bloque_else_if_exp", "else_if_exp", "control_expresion",
	"control_match", "control_case", "cases", "case_match", "control_match_exp",
	"control_case_exp", "cases_exp", "case_match_exp", "ireturn", "ibreak",
	"icontinue", "control_loop", "control_loop_exp", "printNormal", "printFormato",
	"elementosPrint", "control_while", "parametros_funcion", "parametro", "llamada_funcion",
	"parametros_llamada", "parametro_llamada_referencia", "elementos_vector",
	"metodos_iniciar_vector", "metodos_vector", "metodos_vector_expresion",
}
var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))

func init() {
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

type Nparser struct {
	*antlr.BaseParser
}

func NewNparser(input antlr.TokenStream) *Nparser {
	this := new(Nparser)

	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "Nparser.g4"

	return this
}

// Nparser tokens.
const (
	NparserEOF             = antlr.TokenEOF
	NparserBOOL            = 1
	NparserCHAR            = 2
	NparserF64             = 3
	NparserI64             = 4
	NparserSTR             = 5
	NparserSTRING          = 6
	NparserUSIZE           = 7
	NparserMAIN            = 8
	NparserPOWF            = 9
	NparserPOW             = 10
	NparserAS              = 11
	NparserVEC             = 12
	NparserVEC_M           = 13
	NparserMUT             = 14
	NparserLET             = 15
	NparserSTRUCT          = 16
	NparserTO_STRING       = 17
	NparserTO_OWNED        = 18
	NparserTRUE            = 19
	NparserFALSE           = 20
	NparserPRINT           = 21
	NparserFN              = 22
	NparserABS             = 23
	NparserSQRT            = 24
	NparserCLONE           = 25
	NparserNEW             = 26
	NparserLEN             = 27
	NparserPUSH            = 28
	NparserREMOVE          = 29
	NparserCONTAINS        = 30
	NparserINSERT          = 31
	NparserCAPACITY        = 32
	NparserWITH_CAPACITY   = 33
	NparserIF              = 34
	NparserELSE            = 35
	NparserMATCH           = 36
	NparserLOOP            = 37
	NparserWHILE           = 38
	NparserFOR             = 39
	NparserIN              = 40
	NparserRETURN          = 41
	NparserBREAK           = 42
	NparserCONTINUE        = 43
	NparserMOD             = 44
	NparserPUB             = 45
	NparserNUMERO          = 46
	NparserDECIMAL         = 47
	NparserID_CAMEL        = 48
	NparserID              = 49
	NparserDEFAULT         = 50
	NparserO               = 51
	NparserOR              = 52
	NparserAMPERSAND       = 53
	NparserAND             = 54
	NparserPRINT_OP_DEBUG  = 55
	NparserDOBLE_DOSPUNTOS = 56
	NparserDOSPUNTOS       = 57
	NparserRANGO           = 58
	NparserPUNTO           = 59
	NparserCOMA            = 60
	NparserPUNTOCOMA       = 61
	NparserMAYOR_I         = 62
	NparserMAYOR           = 63
	NparserMENOR_I         = 64
	NparserMENOR           = 65
	NparserIGUALDAD        = 66
	NparserCASE            = 67
	NparserDISTINTO        = 68
	NparserIGUAL           = 69
	NparserMODULO          = 70
	NparserMULTIPLICACION  = 71
	NparserDIVISION        = 72
	NparserFN_TIPO_RETORNO = 73
	NparserRESTA           = 74
	NparserSUMA            = 75
	NparserNOT             = 76
	NparserPREGUNTA        = 77
	NparserPAR_IZQ         = 78
	NparserPAR_DER         = 79
	NparserLLAVE_IZQ       = 80
	NparserLLAVE_DER       = 81
	NparserCORCHETE_IZQ    = 82
	NparserCORCHETE_DER    = 83
	NparserCADENA          = 84
	NparserASCII           = 85
	NparserCARACTER        = 86
	NparserWHITESPACE      = 87
	NparserCOMMENT         = 88
	NparserLINE_COMMENT    = 89
)

// Nparser rules.
const (
	NparserRULE_inicio                       = 0
	NparserRULE_bloque                       = 1
	NparserRULE_instrucciones                = 2
	NparserRULE_instruccion                  = 3
	NparserRULE_declaracion                  = 4
	NparserRULE_declaracion_funcion          = 5
	NparserRULE_asignacion                   = 6
	NparserRULE_expresion                    = 7
	NparserRULE_tipo_dato                    = 8
	NparserRULE_control_if                   = 9
	NparserRULE_bloque_else_if               = 10
	NparserRULE_else_if                      = 11
	NparserRULE_control_if_exp               = 12
	NparserRULE_bloque_else_if_exp           = 13
	NparserRULE_else_if_exp                  = 14
	NparserRULE_control_expresion            = 15
	NparserRULE_control_match                = 16
	NparserRULE_control_case                 = 17
	NparserRULE_cases                        = 18
	NparserRULE_case_match                   = 19
	NparserRULE_control_match_exp            = 20
	NparserRULE_control_case_exp             = 21
	NparserRULE_cases_exp                    = 22
	NparserRULE_case_match_exp               = 23
	NparserRULE_ireturn                      = 24
	NparserRULE_ibreak                       = 25
	NparserRULE_icontinue                    = 26
	NparserRULE_control_loop                 = 27
	NparserRULE_control_loop_exp             = 28
	NparserRULE_printNormal                  = 29
	NparserRULE_printFormato                 = 30
	NparserRULE_elementosPrint               = 31
	NparserRULE_control_while                = 32
	NparserRULE_parametros_funcion           = 33
	NparserRULE_parametro                    = 34
	NparserRULE_llamada_funcion              = 35
	NparserRULE_parametros_llamada           = 36
	NparserRULE_parametro_llamada_referencia = 37
	NparserRULE_elementos_vector             = 38
	NparserRULE_metodos_iniciar_vector       = 39
	NparserRULE_metodos_vector               = 40
	NparserRULE_metodos_vector_expresion     = 41
)

// IInicioContext is an interface to support dynamic dispatch.
type IInicioContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_instrucciones returns the _instrucciones rule contexts.
	Get_instrucciones() IInstruccionesContext

	// Set_instrucciones sets the _instrucciones rule contexts.
	Set_instrucciones(IInstruccionesContext)

	// GetLista returns the lista attribute.
	GetLista() *arraylist.List

	// SetLista sets the lista attribute.
	SetLista(*arraylist.List)

	// IsInicioContext differentiates from other interfaces.
	IsInicioContext()
}

type InicioContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	lista          *arraylist.List
	_instrucciones IInstruccionesContext
}

func NewEmptyInicioContext() *InicioContext {
	var p = new(InicioContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_inicio
	return p
}

func (*InicioContext) IsInicioContext() {}

func NewInicioContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InicioContext {
	var p = new(InicioContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_inicio

	return p
}

func (s *InicioContext) GetParser() antlr.Parser { return s.parser }

func (s *InicioContext) Get_instrucciones() IInstruccionesContext { return s._instrucciones }

func (s *InicioContext) Set_instrucciones(v IInstruccionesContext) { s._instrucciones = v }

func (s *InicioContext) GetLista() *arraylist.List { return s.lista }

func (s *InicioContext) SetLista(v *arraylist.List) { s.lista = v }

func (s *InicioContext) Instrucciones() IInstruccionesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstruccionesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInstruccionesContext)
}

func (s *InicioContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InicioContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Inicio() (localctx IInicioContext) {
	localctx = NewInicioContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, NparserRULE_inicio)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(84)

		var _x = p.Instrucciones()

		localctx.(*InicioContext)._instrucciones = _x
	}

	localctx.(*InicioContext).lista = localctx.(*InicioContext).Get_instrucciones().GetList()

	return localctx
}

// IBloqueContext is an interface to support dynamic dispatch.
type IBloqueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_instrucciones returns the _instrucciones rule contexts.
	Get_instrucciones() IInstruccionesContext

	// Set_instrucciones sets the _instrucciones rule contexts.
	Set_instrucciones(IInstruccionesContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsBloqueContext differentiates from other interfaces.
	IsBloqueContext()
}

type BloqueContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	list           *arraylist.List
	_instrucciones IInstruccionesContext
}

func NewEmptyBloqueContext() *BloqueContext {
	var p = new(BloqueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_bloque
	return p
}

func (*BloqueContext) IsBloqueContext() {}

func NewBloqueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BloqueContext {
	var p = new(BloqueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_bloque

	return p
}

func (s *BloqueContext) GetParser() antlr.Parser { return s.parser }

func (s *BloqueContext) Get_instrucciones() IInstruccionesContext { return s._instrucciones }

func (s *BloqueContext) Set_instrucciones(v IInstruccionesContext) { s._instrucciones = v }

func (s *BloqueContext) GetList() *arraylist.List { return s.list }

func (s *BloqueContext) SetList(v *arraylist.List) { s.list = v }

func (s *BloqueContext) LLAVE_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserLLAVE_IZQ, 0)
}

func (s *BloqueContext) Instrucciones() IInstruccionesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstruccionesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInstruccionesContext)
}

func (s *BloqueContext) LLAVE_DER() antlr.TerminalNode {
	return s.GetToken(NparserLLAVE_DER, 0)
}

func (s *BloqueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BloqueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Bloque() (localctx IBloqueContext) {
	localctx = NewBloqueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, NparserRULE_bloque)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(87)
		p.Match(NparserLLAVE_IZQ)
	}
	{
		p.SetState(88)

		var _x = p.Instrucciones()

		localctx.(*BloqueContext)._instrucciones = _x
	}
	{
		p.SetState(89)
		p.Match(NparserLLAVE_DER)
	}

	localctx.(*BloqueContext).list = localctx.(*BloqueContext).Get_instrucciones().GetList()

	return localctx
}

// IInstruccionesContext is an interface to support dynamic dispatch.
type IInstruccionesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_instruccion returns the _instruccion rule contexts.
	Get_instruccion() IInstruccionContext

	// Set_instruccion sets the _instruccion rule contexts.
	Set_instruccion(IInstruccionContext)

	// GetE returns the e rule context list.
	GetE() []IInstruccionContext

	// SetE sets the e rule context list.
	SetE([]IInstruccionContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsInstruccionesContext differentiates from other interfaces.
	IsInstruccionesContext()
}

type InstruccionesContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	list         *arraylist.List
	_instruccion IInstruccionContext
	e            []IInstruccionContext
}

func NewEmptyInstruccionesContext() *InstruccionesContext {
	var p = new(InstruccionesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_instrucciones
	return p
}

func (*InstruccionesContext) IsInstruccionesContext() {}

func NewInstruccionesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstruccionesContext {
	var p = new(InstruccionesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_instrucciones

	return p
}

func (s *InstruccionesContext) GetParser() antlr.Parser { return s.parser }

func (s *InstruccionesContext) Get_instruccion() IInstruccionContext { return s._instruccion }

func (s *InstruccionesContext) Set_instruccion(v IInstruccionContext) { s._instruccion = v }

func (s *InstruccionesContext) GetE() []IInstruccionContext { return s.e }

func (s *InstruccionesContext) SetE(v []IInstruccionContext) { s.e = v }

func (s *InstruccionesContext) GetList() *arraylist.List { return s.list }

func (s *InstruccionesContext) SetList(v *arraylist.List) { s.list = v }

func (s *InstruccionesContext) AllInstruccion() []IInstruccionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInstruccionContext)(nil)).Elem())
	var tst = make([]IInstruccionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInstruccionContext)
		}
	}

	return tst
}

func (s *InstruccionesContext) Instruccion(i int) IInstruccionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstruccionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInstruccionContext)
}

func (s *InstruccionesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstruccionesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Instrucciones() (localctx IInstruccionesContext) {
	localctx = NewInstruccionesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, NparserRULE_instrucciones)

	localctx.(*InstruccionesContext).list = arraylist.New()

	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(95)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<NparserVEC)|(1<<NparserVEC_M)|(1<<NparserLET)|(1<<NparserTRUE)|(1<<NparserFALSE)|(1<<NparserPRINT)|(1<<NparserFN))) != 0) || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(NparserIF-34))|(1<<(NparserMATCH-34))|(1<<(NparserLOOP-34))|(1<<(NparserWHILE-34))|(1<<(NparserRETURN-34))|(1<<(NparserBREAK-34))|(1<<(NparserCONTINUE-34))|(1<<(NparserPUB-34))|(1<<(NparserNUMERO-34))|(1<<(NparserDECIMAL-34))|(1<<(NparserID-34)))) != 0) || (((_la-74)&-(0x1f+1)) == 0 && ((1<<uint((_la-74)))&((1<<(NparserRESTA-74))|(1<<(NparserNOT-74))|(1<<(NparserPAR_IZQ-74))|(1<<(NparserCADENA-74))|(1<<(NparserCARACTER-74)))) != 0) {
		{
			p.SetState(92)

			var _x = p.Instruccion()

			localctx.(*InstruccionesContext)._instruccion = _x
		}
		localctx.(*InstruccionesContext).e = append(localctx.(*InstruccionesContext).e, localctx.(*InstruccionesContext)._instruccion)

		p.SetState(97)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	listInt := localctx.(*InstruccionesContext).GetE()
	for _, e := range listInt {
		localctx.(*InstruccionesContext).list.Add(e.GetEx())
	}

	return localctx
}

// IInstruccionContext is an interface to support dynamic dispatch.
type IInstruccionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_llamada_funcion returns the _llamada_funcion rule contexts.
	Get_llamada_funcion() ILlamada_funcionContext

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// Get_declaracion returns the _declaracion rule contexts.
	Get_declaracion() IDeclaracionContext

	// Get_declaracion_funcion returns the _declaracion_funcion rule contexts.
	Get_declaracion_funcion() IDeclaracion_funcionContext

	// Get_asignacion returns the _asignacion rule contexts.
	Get_asignacion() IAsignacionContext

	// Get_control_if returns the _control_if rule contexts.
	Get_control_if() IControl_ifContext

	// Get_control_match returns the _control_match rule contexts.
	Get_control_match() IControl_matchContext

	// Get_control_loop returns the _control_loop rule contexts.
	Get_control_loop() IControl_loopContext

	// Get_control_while returns the _control_while rule contexts.
	Get_control_while() IControl_whileContext

	// Get_ibreak returns the _ibreak rule contexts.
	Get_ibreak() IIbreakContext

	// Get_icontinue returns the _icontinue rule contexts.
	Get_icontinue() IIcontinueContext

	// Get_ireturn returns the _ireturn rule contexts.
	Get_ireturn() IIreturnContext

	// Get_printNormal returns the _printNormal rule contexts.
	Get_printNormal() IPrintNormalContext

	// Get_printFormato returns the _printFormato rule contexts.
	Get_printFormato() IPrintFormatoContext

	// Set_llamada_funcion sets the _llamada_funcion rule contexts.
	Set_llamada_funcion(ILlamada_funcionContext)

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// Set_declaracion sets the _declaracion rule contexts.
	Set_declaracion(IDeclaracionContext)

	// Set_declaracion_funcion sets the _declaracion_funcion rule contexts.
	Set_declaracion_funcion(IDeclaracion_funcionContext)

	// Set_asignacion sets the _asignacion rule contexts.
	Set_asignacion(IAsignacionContext)

	// Set_control_if sets the _control_if rule contexts.
	Set_control_if(IControl_ifContext)

	// Set_control_match sets the _control_match rule contexts.
	Set_control_match(IControl_matchContext)

	// Set_control_loop sets the _control_loop rule contexts.
	Set_control_loop(IControl_loopContext)

	// Set_control_while sets the _control_while rule contexts.
	Set_control_while(IControl_whileContext)

	// Set_ibreak sets the _ibreak rule contexts.
	Set_ibreak(IIbreakContext)

	// Set_icontinue sets the _icontinue rule contexts.
	Set_icontinue(IIcontinueContext)

	// Set_ireturn sets the _ireturn rule contexts.
	Set_ireturn(IIreturnContext)

	// Set_printNormal sets the _printNormal rule contexts.
	Set_printNormal(IPrintNormalContext)

	// Set_printFormato sets the _printFormato rule contexts.
	Set_printFormato(IPrintFormatoContext)

	// GetEx returns the ex attribute.
	GetEx() interface{}

	// SetEx sets the ex attribute.
	SetEx(interface{})

	// IsInstruccionContext differentiates from other interfaces.
	IsInstruccionContext()
}

type InstruccionContext struct {
	*antlr.BaseParserRuleContext
	parser               antlr.Parser
	ex                   interface{}
	_llamada_funcion     ILlamada_funcionContext
	_expresion           IExpresionContext
	_declaracion         IDeclaracionContext
	_declaracion_funcion IDeclaracion_funcionContext
	_asignacion          IAsignacionContext
	_control_if          IControl_ifContext
	_control_match       IControl_matchContext
	_control_loop        IControl_loopContext
	_control_while       IControl_whileContext
	_ibreak              IIbreakContext
	_icontinue           IIcontinueContext
	_ireturn             IIreturnContext
	_printNormal         IPrintNormalContext
	_printFormato        IPrintFormatoContext
}

func NewEmptyInstruccionContext() *InstruccionContext {
	var p = new(InstruccionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_instruccion
	return p
}

func (*InstruccionContext) IsInstruccionContext() {}

func NewInstruccionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstruccionContext {
	var p = new(InstruccionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_instruccion

	return p
}

func (s *InstruccionContext) GetParser() antlr.Parser { return s.parser }

func (s *InstruccionContext) Get_llamada_funcion() ILlamada_funcionContext { return s._llamada_funcion }

func (s *InstruccionContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *InstruccionContext) Get_declaracion() IDeclaracionContext { return s._declaracion }

func (s *InstruccionContext) Get_declaracion_funcion() IDeclaracion_funcionContext {
	return s._declaracion_funcion
}

func (s *InstruccionContext) Get_asignacion() IAsignacionContext { return s._asignacion }

func (s *InstruccionContext) Get_control_if() IControl_ifContext { return s._control_if }

func (s *InstruccionContext) Get_control_match() IControl_matchContext { return s._control_match }

func (s *InstruccionContext) Get_control_loop() IControl_loopContext { return s._control_loop }

func (s *InstruccionContext) Get_control_while() IControl_whileContext { return s._control_while }

func (s *InstruccionContext) Get_ibreak() IIbreakContext { return s._ibreak }

func (s *InstruccionContext) Get_icontinue() IIcontinueContext { return s._icontinue }

func (s *InstruccionContext) Get_ireturn() IIreturnContext { return s._ireturn }

func (s *InstruccionContext) Get_printNormal() IPrintNormalContext { return s._printNormal }

func (s *InstruccionContext) Get_printFormato() IPrintFormatoContext { return s._printFormato }

func (s *InstruccionContext) Set_llamada_funcion(v ILlamada_funcionContext) { s._llamada_funcion = v }

func (s *InstruccionContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *InstruccionContext) Set_declaracion(v IDeclaracionContext) { s._declaracion = v }

func (s *InstruccionContext) Set_declaracion_funcion(v IDeclaracion_funcionContext) {
	s._declaracion_funcion = v
}

func (s *InstruccionContext) Set_asignacion(v IAsignacionContext) { s._asignacion = v }

func (s *InstruccionContext) Set_control_if(v IControl_ifContext) { s._control_if = v }

func (s *InstruccionContext) Set_control_match(v IControl_matchContext) { s._control_match = v }

func (s *InstruccionContext) Set_control_loop(v IControl_loopContext) { s._control_loop = v }

func (s *InstruccionContext) Set_control_while(v IControl_whileContext) { s._control_while = v }

func (s *InstruccionContext) Set_ibreak(v IIbreakContext) { s._ibreak = v }

func (s *InstruccionContext) Set_icontinue(v IIcontinueContext) { s._icontinue = v }

func (s *InstruccionContext) Set_ireturn(v IIreturnContext) { s._ireturn = v }

func (s *InstruccionContext) Set_printNormal(v IPrintNormalContext) { s._printNormal = v }

func (s *InstruccionContext) Set_printFormato(v IPrintFormatoContext) { s._printFormato = v }

func (s *InstruccionContext) GetEx() interface{} { return s.ex }

func (s *InstruccionContext) SetEx(v interface{}) { s.ex = v }

func (s *InstruccionContext) Llamada_funcion() ILlamada_funcionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILlamada_funcionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILlamada_funcionContext)
}

func (s *InstruccionContext) PUNTOCOMA() antlr.TerminalNode {
	return s.GetToken(NparserPUNTOCOMA, 0)
}

func (s *InstruccionContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *InstruccionContext) Declaracion() IDeclaracionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaracionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaracionContext)
}

func (s *InstruccionContext) Declaracion_funcion() IDeclaracion_funcionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaracion_funcionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaracion_funcionContext)
}

func (s *InstruccionContext) Asignacion() IAsignacionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsignacionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsignacionContext)
}

func (s *InstruccionContext) Control_if() IControl_ifContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_ifContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_ifContext)
}

func (s *InstruccionContext) Control_match() IControl_matchContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_matchContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_matchContext)
}

func (s *InstruccionContext) Control_loop() IControl_loopContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_loopContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_loopContext)
}

func (s *InstruccionContext) Control_while() IControl_whileContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_whileContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_whileContext)
}

func (s *InstruccionContext) Ibreak() IIbreakContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIbreakContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIbreakContext)
}

func (s *InstruccionContext) Icontinue() IIcontinueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIcontinueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIcontinueContext)
}

func (s *InstruccionContext) Ireturn() IIreturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIreturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIreturnContext)
}

func (s *InstruccionContext) PrintNormal() IPrintNormalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrintNormalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrintNormalContext)
}

func (s *InstruccionContext) PrintFormato() IPrintFormatoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrintFormatoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrintFormatoContext)
}

func (s *InstruccionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstruccionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Instruccion() (localctx IInstruccionContext) {
	localctx = NewInstruccionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, NparserRULE_instruccion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(150)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(100)

			var _x = p.Llamada_funcion()

			localctx.(*InstruccionContext)._llamada_funcion = _x
		}
		{
			p.SetState(101)
			p.Match(NparserPUNTOCOMA)
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_llamada_funcion().GetEx()

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(104)

			var _x = p.expresion(0)

			localctx.(*InstruccionContext)._expresion = _x
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_expresion().GetEx()

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(107)

			var _x = p.Declaracion()

			localctx.(*InstruccionContext)._declaracion = _x
		}
		{
			p.SetState(108)
			p.Match(NparserPUNTOCOMA)
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_declaracion().GetEx()

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(111)

			var _x = p.Declaracion_funcion()

			localctx.(*InstruccionContext)._declaracion_funcion = _x
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_declaracion_funcion().GetEx()

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(114)

			var _x = p.Asignacion()

			localctx.(*InstruccionContext)._asignacion = _x
		}
		{
			p.SetState(115)
			p.Match(NparserPUNTOCOMA)
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_asignacion().GetEx()

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(118)

			var _x = p.Control_if()

			localctx.(*InstruccionContext)._control_if = _x
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_control_if().GetEx()

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(121)

			var _x = p.Control_match()

			localctx.(*InstruccionContext)._control_match = _x
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_control_match().GetEx()

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(124)

			var _x = p.Control_loop()

			localctx.(*InstruccionContext)._control_loop = _x
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_control_loop().GetEx()

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(127)

			var _x = p.Control_while()

			localctx.(*InstruccionContext)._control_while = _x
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_control_while().GetEx()

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(130)

			var _x = p.Ibreak()

			localctx.(*InstruccionContext)._ibreak = _x
		}
		{
			p.SetState(131)
			p.Match(NparserPUNTOCOMA)
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_ibreak().GetEx()

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(134)

			var _x = p.Icontinue()

			localctx.(*InstruccionContext)._icontinue = _x
		}
		{
			p.SetState(135)
			p.Match(NparserPUNTOCOMA)
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_icontinue().GetEx()

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(138)

			var _x = p.Ireturn()

			localctx.(*InstruccionContext)._ireturn = _x
		}
		{
			p.SetState(139)
			p.Match(NparserPUNTOCOMA)
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_ireturn().GetEx()

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(142)

			var _x = p.PrintNormal()

			localctx.(*InstruccionContext)._printNormal = _x
		}
		{
			p.SetState(143)
			p.Match(NparserPUNTOCOMA)
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_printNormal().GetEx()

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(146)

			var _x = p.PrintFormato()

			localctx.(*InstruccionContext)._printFormato = _x
		}
		{
			p.SetState(147)
			p.Match(NparserPUNTOCOMA)
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_printFormato().GetEx()

	}

	return localctx
}

// IDeclaracionContext is an interface to support dynamic dispatch.
type IDeclaracionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_LET returns the _LET token.
	Get_LET() antlr.Token

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Set_LET sets the _LET token.
	Set_LET(antlr.Token)

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// Get_control_expresion returns the _control_expresion rule contexts.
	Get_control_expresion() IControl_expresionContext

	// Get_tipo_dato returns the _tipo_dato rule contexts.
	Get_tipo_dato() ITipo_datoContext

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// Set_control_expresion sets the _control_expresion rule contexts.
	Set_control_expresion(IControl_expresionContext)

	// Set_tipo_dato sets the _tipo_dato rule contexts.
	Set_tipo_dato(ITipo_datoContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsDeclaracionContext differentiates from other interfaces.
	IsDeclaracionContext()
}

type DeclaracionContext struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	ex                 Ast.Instruccion
	_LET               antlr.Token
	_ID                antlr.Token
	_expresion         IExpresionContext
	_control_expresion IControl_expresionContext
	_tipo_dato         ITipo_datoContext
}

func NewEmptyDeclaracionContext() *DeclaracionContext {
	var p = new(DeclaracionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_declaracion
	return p
}

func (*DeclaracionContext) IsDeclaracionContext() {}

func NewDeclaracionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclaracionContext {
	var p = new(DeclaracionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_declaracion

	return p
}

func (s *DeclaracionContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclaracionContext) Get_LET() antlr.Token { return s._LET }

func (s *DeclaracionContext) Get_ID() antlr.Token { return s._ID }

func (s *DeclaracionContext) Set_LET(v antlr.Token) { s._LET = v }

func (s *DeclaracionContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *DeclaracionContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *DeclaracionContext) Get_control_expresion() IControl_expresionContext {
	return s._control_expresion
}

func (s *DeclaracionContext) Get_tipo_dato() ITipo_datoContext { return s._tipo_dato }

func (s *DeclaracionContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *DeclaracionContext) Set_control_expresion(v IControl_expresionContext) {
	s._control_expresion = v
}

func (s *DeclaracionContext) Set_tipo_dato(v ITipo_datoContext) { s._tipo_dato = v }

func (s *DeclaracionContext) GetEx() Ast.Instruccion { return s.ex }

func (s *DeclaracionContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *DeclaracionContext) LET() antlr.TerminalNode {
	return s.GetToken(NparserLET, 0)
}

func (s *DeclaracionContext) ID() antlr.TerminalNode {
	return s.GetToken(NparserID, 0)
}

func (s *DeclaracionContext) IGUAL() antlr.TerminalNode {
	return s.GetToken(NparserIGUAL, 0)
}

func (s *DeclaracionContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *DeclaracionContext) Control_expresion() IControl_expresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_expresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_expresionContext)
}

func (s *DeclaracionContext) DOSPUNTOS() antlr.TerminalNode {
	return s.GetToken(NparserDOSPUNTOS, 0)
}

func (s *DeclaracionContext) Tipo_dato() ITipo_datoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipo_datoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipo_datoContext)
}

func (s *DeclaracionContext) MUT() antlr.TerminalNode {
	return s.GetToken(NparserMUT, 0)
}

func (s *DeclaracionContext) VEC() antlr.TerminalNode {
	return s.GetToken(NparserVEC, 0)
}

func (s *DeclaracionContext) MENOR() antlr.TerminalNode {
	return s.GetToken(NparserMENOR, 0)
}

func (s *DeclaracionContext) MAYOR() antlr.TerminalNode {
	return s.GetToken(NparserMAYOR, 0)
}

func (s *DeclaracionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclaracionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Declaracion() (localctx IDeclaracionContext) {
	localctx = NewDeclaracionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, NparserRULE_declaracion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(255)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 2, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(152)

			var _m = p.Match(NparserLET)

			localctx.(*DeclaracionContext)._LET = _m
		}
		{
			p.SetState(153)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(154)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(155)

			var _x = p.expresion(0)

			localctx.(*DeclaracionContext)._expresion = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetColumn()
			}
		}())
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), Ast.INDEFINIDO,
			false, false, Ast.VOID, localctx.(*DeclaracionContext).Get_expresion().GetEx(), fila, columna)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(158)

			var _m = p.Match(NparserLET)

			localctx.(*DeclaracionContext)._LET = _m
		}
		{
			p.SetState(159)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(160)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(161)

			var _x = p.Control_expresion()

			localctx.(*DeclaracionContext)._control_expresion = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetColumn()
			}
		}())
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), Ast.INDEFINIDO,
			false, false, Ast.VOID, localctx.(*DeclaracionContext).Get_control_expresion().GetEx(), fila, columna)

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(164)

			var _m = p.Match(NparserLET)

			localctx.(*DeclaracionContext)._LET = _m
		}
		{
			p.SetState(165)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(166)
			p.Match(NparserDOSPUNTOS)
		}
		{
			p.SetState(167)

			var _x = p.Tipo_dato()

			localctx.(*DeclaracionContext)._tipo_dato = _x
		}
		{
			p.SetState(168)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(169)

			var _x = p.expresion(0)

			localctx.(*DeclaracionContext)._expresion = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetColumn()
			}
		}())
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), localctx.(*DeclaracionContext).Get_tipo_dato().GetEx(),
			false, false, Ast.VOID, localctx.(*DeclaracionContext).Get_expresion().GetEx(), fila, columna)

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(172)

			var _m = p.Match(NparserLET)

			localctx.(*DeclaracionContext)._LET = _m
		}
		{
			p.SetState(173)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(174)
			p.Match(NparserDOSPUNTOS)
		}
		{
			p.SetState(175)

			var _x = p.Tipo_dato()

			localctx.(*DeclaracionContext)._tipo_dato = _x
		}
		{
			p.SetState(176)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(177)

			var _x = p.Control_expresion()

			localctx.(*DeclaracionContext)._control_expresion = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetColumn()
			}
		}())
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), localctx.(*DeclaracionContext).Get_tipo_dato().GetEx(),
			false, false, Ast.VOID, localctx.(*DeclaracionContext).Get_control_expresion().GetEx(), fila, columna)

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(180)

			var _m = p.Match(NparserLET)

			localctx.(*DeclaracionContext)._LET = _m
		}
		{
			p.SetState(181)
			p.Match(NparserMUT)
		}
		{
			p.SetState(182)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(183)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(184)

			var _x = p.expresion(0)

			localctx.(*DeclaracionContext)._expresion = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetColumn()
			}
		}())
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), Ast.INDEFINIDO,
			true, false, Ast.VOID, localctx.(*DeclaracionContext).Get_expresion().GetEx(), fila, columna)

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(187)
			p.Match(NparserLET)
		}
		{
			p.SetState(188)
			p.Match(NparserMUT)
		}
		{
			p.SetState(189)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(190)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(191)

			var _x = p.Control_expresion()

			localctx.(*DeclaracionContext)._control_expresion = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetColumn()
			}
		}())
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), Ast.INDEFINIDO,
			true, false, Ast.VOID, localctx.(*DeclaracionContext).Get_control_expresion().GetEx(), fila, columna)

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(194)

			var _m = p.Match(NparserLET)

			localctx.(*DeclaracionContext)._LET = _m
		}
		{
			p.SetState(195)
			p.Match(NparserMUT)
		}
		{
			p.SetState(196)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(197)
			p.Match(NparserDOSPUNTOS)
		}
		{
			p.SetState(198)

			var _x = p.Tipo_dato()

			localctx.(*DeclaracionContext)._tipo_dato = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetColumn()
			}
		}())
		valor := expresiones.NewPrimitivo(nil, Ast.NULL, fila, columna)
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), localctx.(*DeclaracionContext).Get_tipo_dato().GetEx(),
			true, false, Ast.VOID, valor, fila, columna)

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(201)

			var _m = p.Match(NparserLET)

			localctx.(*DeclaracionContext)._LET = _m
		}
		{
			p.SetState(202)
			p.Match(NparserMUT)
		}
		{
			p.SetState(203)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(204)
			p.Match(NparserDOSPUNTOS)
		}
		{
			p.SetState(205)

			var _x = p.Tipo_dato()

			localctx.(*DeclaracionContext)._tipo_dato = _x
		}
		{
			p.SetState(206)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(207)

			var _x = p.expresion(0)

			localctx.(*DeclaracionContext)._expresion = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetColumn()
			}
		}())
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), localctx.(*DeclaracionContext).Get_tipo_dato().GetEx(),
			true, false, Ast.VOID, localctx.(*DeclaracionContext).Get_expresion().GetEx(), fila, columna)

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(210)

			var _m = p.Match(NparserLET)

			localctx.(*DeclaracionContext)._LET = _m
		}
		{
			p.SetState(211)
			p.Match(NparserMUT)
		}
		{
			p.SetState(212)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(213)
			p.Match(NparserDOSPUNTOS)
		}
		{
			p.SetState(214)

			var _x = p.Tipo_dato()

			localctx.(*DeclaracionContext)._tipo_dato = _x
		}
		{
			p.SetState(215)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(216)

			var _x = p.Control_expresion()

			localctx.(*DeclaracionContext)._control_expresion = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetColumn()
			}
		}())
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), localctx.(*DeclaracionContext).Get_tipo_dato().GetEx(),
			true, false, Ast.VOID, localctx.(*DeclaracionContext).Get_control_expresion().GetEx(), fila, columna)

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(219)

			var _m = p.Match(NparserLET)

			localctx.(*DeclaracionContext)._LET = _m
		}
		{
			p.SetState(220)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(221)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(222)

			var _x = p.expresion(0)

			localctx.(*DeclaracionContext)._expresion = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetColumn()
			}
		}())
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), Ast.VECTOR, false, false, Ast.VOID, localctx.(*DeclaracionContext).Get_expresion().GetEx(), fila, columna)

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(225)

			var _m = p.Match(NparserLET)

			localctx.(*DeclaracionContext)._LET = _m
		}
		{
			p.SetState(226)
			p.Match(NparserMUT)
		}
		{
			p.SetState(227)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(228)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(229)

			var _x = p.expresion(0)

			localctx.(*DeclaracionContext)._expresion = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetColumn()
			}
		}())
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), Ast.VECTOR, true, false, Ast.VOID, localctx.(*DeclaracionContext).Get_expresion().GetEx(), fila, columna)

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(232)

			var _m = p.Match(NparserLET)

			localctx.(*DeclaracionContext)._LET = _m
		}
		{
			p.SetState(233)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(234)
			p.Match(NparserDOSPUNTOS)
		}
		{
			p.SetState(235)
			p.Match(NparserVEC)
		}
		{
			p.SetState(236)
			p.Match(NparserMENOR)
		}
		{
			p.SetState(237)

			var _x = p.Tipo_dato()

			localctx.(*DeclaracionContext)._tipo_dato = _x
		}
		{
			p.SetState(238)
			p.Match(NparserMAYOR)
		}
		{
			p.SetState(239)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(240)

			var _x = p.expresion(0)

			localctx.(*DeclaracionContext)._expresion = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetColumn()
			}
		}())
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), Ast.VECTOR, false, false, localctx.(*DeclaracionContext).Get_tipo_dato().GetEx(), localctx.(*DeclaracionContext).Get_expresion().GetEx(), fila, columna)

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(243)

			var _m = p.Match(NparserLET)

			localctx.(*DeclaracionContext)._LET = _m
		}
		{
			p.SetState(244)
			p.Match(NparserMUT)
		}
		{
			p.SetState(245)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(246)
			p.Match(NparserDOSPUNTOS)
		}
		{
			p.SetState(247)
			p.Match(NparserVEC)
		}
		{
			p.SetState(248)
			p.Match(NparserMENOR)
		}
		{
			p.SetState(249)

			var _x = p.Tipo_dato()

			localctx.(*DeclaracionContext)._tipo_dato = _x
		}
		{
			p.SetState(250)
			p.Match(NparserMAYOR)
		}
		{
			p.SetState(251)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(252)

			var _x = p.expresion(0)

			localctx.(*DeclaracionContext)._expresion = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetColumn()
			}
		}())
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), Ast.VECTOR, true, false, localctx.(*DeclaracionContext).Get_tipo_dato().GetEx(), localctx.(*DeclaracionContext).Get_expresion().GetEx(), fila, columna)

	}

	return localctx
}

// IDeclaracion_funcionContext is an interface to support dynamic dispatch.
type IDeclaracion_funcionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_FN returns the _FN token.
	Get_FN() antlr.Token

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Set_FN sets the _FN token.
	Set_FN(antlr.Token)

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// Get_tipo_dato returns the _tipo_dato rule contexts.
	Get_tipo_dato() ITipo_datoContext

	// Get_bloque returns the _bloque rule contexts.
	Get_bloque() IBloqueContext

	// Get_parametros_funcion returns the _parametros_funcion rule contexts.
	Get_parametros_funcion() IParametros_funcionContext

	// Set_tipo_dato sets the _tipo_dato rule contexts.
	Set_tipo_dato(ITipo_datoContext)

	// Set_bloque sets the _bloque rule contexts.
	Set_bloque(IBloqueContext)

	// Set_parametros_funcion sets the _parametros_funcion rule contexts.
	Set_parametros_funcion(IParametros_funcionContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsDeclaracion_funcionContext differentiates from other interfaces.
	IsDeclaracion_funcionContext()
}

type Declaracion_funcionContext struct {
	*antlr.BaseParserRuleContext
	parser              antlr.Parser
	ex                  Ast.Instruccion
	_FN                 antlr.Token
	_ID                 antlr.Token
	_tipo_dato          ITipo_datoContext
	_bloque             IBloqueContext
	_parametros_funcion IParametros_funcionContext
}

func NewEmptyDeclaracion_funcionContext() *Declaracion_funcionContext {
	var p = new(Declaracion_funcionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_declaracion_funcion
	return p
}

func (*Declaracion_funcionContext) IsDeclaracion_funcionContext() {}

func NewDeclaracion_funcionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Declaracion_funcionContext {
	var p = new(Declaracion_funcionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_declaracion_funcion

	return p
}

func (s *Declaracion_funcionContext) GetParser() antlr.Parser { return s.parser }

func (s *Declaracion_funcionContext) Get_FN() antlr.Token { return s._FN }

func (s *Declaracion_funcionContext) Get_ID() antlr.Token { return s._ID }

func (s *Declaracion_funcionContext) Set_FN(v antlr.Token) { s._FN = v }

func (s *Declaracion_funcionContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *Declaracion_funcionContext) Get_tipo_dato() ITipo_datoContext { return s._tipo_dato }

func (s *Declaracion_funcionContext) Get_bloque() IBloqueContext { return s._bloque }

func (s *Declaracion_funcionContext) Get_parametros_funcion() IParametros_funcionContext {
	return s._parametros_funcion
}

func (s *Declaracion_funcionContext) Set_tipo_dato(v ITipo_datoContext) { s._tipo_dato = v }

func (s *Declaracion_funcionContext) Set_bloque(v IBloqueContext) { s._bloque = v }

func (s *Declaracion_funcionContext) Set_parametros_funcion(v IParametros_funcionContext) {
	s._parametros_funcion = v
}

func (s *Declaracion_funcionContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Declaracion_funcionContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Declaracion_funcionContext) PUB() antlr.TerminalNode {
	return s.GetToken(NparserPUB, 0)
}

func (s *Declaracion_funcionContext) FN() antlr.TerminalNode {
	return s.GetToken(NparserFN, 0)
}

func (s *Declaracion_funcionContext) ID() antlr.TerminalNode {
	return s.GetToken(NparserID, 0)
}

func (s *Declaracion_funcionContext) PAR_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserPAR_IZQ, 0)
}

func (s *Declaracion_funcionContext) PAR_DER() antlr.TerminalNode {
	return s.GetToken(NparserPAR_DER, 0)
}

func (s *Declaracion_funcionContext) FN_TIPO_RETORNO() antlr.TerminalNode {
	return s.GetToken(NparserFN_TIPO_RETORNO, 0)
}

func (s *Declaracion_funcionContext) Tipo_dato() ITipo_datoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipo_datoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipo_datoContext)
}

func (s *Declaracion_funcionContext) Bloque() IBloqueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloqueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloqueContext)
}

func (s *Declaracion_funcionContext) Parametros_funcion() IParametros_funcionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParametros_funcionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParametros_funcionContext)
}

func (s *Declaracion_funcionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Declaracion_funcionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Declaracion_funcion() (localctx IDeclaracion_funcionContext) {
	localctx = NewDeclaracion_funcionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, NparserRULE_declaracion_funcion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(329)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(257)
			p.Match(NparserPUB)
		}
		{
			p.SetState(258)

			var _m = p.Match(NparserFN)

			localctx.(*Declaracion_funcionContext)._FN = _m
		}
		{
			p.SetState(259)

			var _m = p.Match(NparserID)

			localctx.(*Declaracion_funcionContext)._ID = _m
		}
		{
			p.SetState(260)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(261)
			p.Match(NparserPAR_DER)
		}
		{
			p.SetState(262)
			p.Match(NparserFN_TIPO_RETORNO)
		}
		{
			p.SetState(263)

			var _x = p.Tipo_dato()

			localctx.(*Declaracion_funcionContext)._tipo_dato = _x
		}
		{
			p.SetState(264)

			var _x = p.Bloque()

			localctx.(*Declaracion_funcionContext)._bloque = _x
		}

		parametros := arraylist.New()
		fila := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetColumn()
			}
		}())
		funcion := simbolos.NewFuncion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, localctx.(*Declaracion_funcionContext).Get_bloque().GetList(),
			parametros, localctx.(*Declaracion_funcionContext).Get_tipo_dato().GetEx(), true, fila, columna)
		localctx.(*Declaracion_funcionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, false, true, Ast.VOID,
			funcion, fila, columna)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(267)
			p.Match(NparserPUB)
		}
		{
			p.SetState(268)

			var _m = p.Match(NparserFN)

			localctx.(*Declaracion_funcionContext)._FN = _m
		}
		{
			p.SetState(269)

			var _m = p.Match(NparserID)

			localctx.(*Declaracion_funcionContext)._ID = _m
		}
		{
			p.SetState(270)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(271)
			p.Match(NparserPAR_DER)
		}
		{
			p.SetState(272)

			var _x = p.Bloque()

			localctx.(*Declaracion_funcionContext)._bloque = _x
		}

		parametros := arraylist.New()
		fila := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetColumn()
			}
		}())
		funcion := simbolos.NewFuncion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, localctx.(*Declaracion_funcionContext).Get_bloque().GetList(),
			parametros, Ast.VOID, true, fila, columna)
		localctx.(*Declaracion_funcionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, false, true, Ast.VOID,
			funcion, fila, columna)

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(275)

			var _m = p.Match(NparserFN)

			localctx.(*Declaracion_funcionContext)._FN = _m
		}
		{
			p.SetState(276)

			var _m = p.Match(NparserID)

			localctx.(*Declaracion_funcionContext)._ID = _m
		}
		{
			p.SetState(277)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(278)
			p.Match(NparserPAR_DER)
		}
		{
			p.SetState(279)
			p.Match(NparserFN_TIPO_RETORNO)
		}
		{
			p.SetState(280)

			var _x = p.Tipo_dato()

			localctx.(*Declaracion_funcionContext)._tipo_dato = _x
		}
		{
			p.SetState(281)

			var _x = p.Bloque()

			localctx.(*Declaracion_funcionContext)._bloque = _x
		}

		fila := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetColumn()
			}
		}())
		parametros := arraylist.New()
		funcion := simbolos.NewFuncion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, localctx.(*Declaracion_funcionContext).Get_bloque().GetList(),
			parametros, localctx.(*Declaracion_funcionContext).Get_tipo_dato().GetEx(), false, fila, columna)
		localctx.(*Declaracion_funcionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, false, false, Ast.VOID,
			funcion, fila, columna)

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(284)

			var _m = p.Match(NparserFN)

			localctx.(*Declaracion_funcionContext)._FN = _m
		}
		{
			p.SetState(285)

			var _m = p.Match(NparserID)

			localctx.(*Declaracion_funcionContext)._ID = _m
		}
		{
			p.SetState(286)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(287)
			p.Match(NparserPAR_DER)
		}
		{
			p.SetState(288)

			var _x = p.Bloque()

			localctx.(*Declaracion_funcionContext)._bloque = _x
		}

		fila := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetColumn()
			}
		}())
		parametros := arraylist.New()
		funcion := simbolos.NewFuncion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, localctx.(*Declaracion_funcionContext).Get_bloque().GetList(),
			parametros, Ast.VOID, false, fila, columna)
		localctx.(*Declaracion_funcionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, false, false, Ast.VOID,
			funcion, fila, columna)

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(291)
			p.Match(NparserPUB)
		}
		{
			p.SetState(292)

			var _m = p.Match(NparserFN)

			localctx.(*Declaracion_funcionContext)._FN = _m
		}
		{
			p.SetState(293)

			var _m = p.Match(NparserID)

			localctx.(*Declaracion_funcionContext)._ID = _m
		}
		{
			p.SetState(294)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(295)

			var _x = p.parametros_funcion(0)

			localctx.(*Declaracion_funcionContext)._parametros_funcion = _x
		}
		{
			p.SetState(296)
			p.Match(NparserPAR_DER)
		}
		{
			p.SetState(297)
			p.Match(NparserFN_TIPO_RETORNO)
		}
		{
			p.SetState(298)

			var _x = p.Tipo_dato()

			localctx.(*Declaracion_funcionContext)._tipo_dato = _x
		}
		{
			p.SetState(299)

			var _x = p.Bloque()

			localctx.(*Declaracion_funcionContext)._bloque = _x
		}

		fila := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetColumn()
			}
		}())
		funcion := simbolos.NewFuncion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, localctx.(*Declaracion_funcionContext).Get_bloque().GetList(),
			localctx.(*Declaracion_funcionContext).Get_parametros_funcion().GetList(), localctx.(*Declaracion_funcionContext).Get_tipo_dato().GetEx(), true, fila, columna)
		localctx.(*Declaracion_funcionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, false, true, Ast.VOID,
			funcion, fila, columna)

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(302)
			p.Match(NparserPUB)
		}
		{
			p.SetState(303)

			var _m = p.Match(NparserFN)

			localctx.(*Declaracion_funcionContext)._FN = _m
		}
		{
			p.SetState(304)

			var _m = p.Match(NparserID)

			localctx.(*Declaracion_funcionContext)._ID = _m
		}
		{
			p.SetState(305)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(306)

			var _x = p.parametros_funcion(0)

			localctx.(*Declaracion_funcionContext)._parametros_funcion = _x
		}
		{
			p.SetState(307)
			p.Match(NparserPAR_DER)
		}
		{
			p.SetState(308)

			var _x = p.Bloque()

			localctx.(*Declaracion_funcionContext)._bloque = _x
		}

		fila := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetColumn()
			}
		}())
		funcion := simbolos.NewFuncion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, localctx.(*Declaracion_funcionContext).Get_bloque().GetList(),
			localctx.(*Declaracion_funcionContext).Get_parametros_funcion().GetList(), Ast.VOID, true, fila, columna)
		localctx.(*Declaracion_funcionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, false, true, Ast.VOID,
			funcion, fila, columna)

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(311)

			var _m = p.Match(NparserFN)

			localctx.(*Declaracion_funcionContext)._FN = _m
		}
		{
			p.SetState(312)

			var _m = p.Match(NparserID)

			localctx.(*Declaracion_funcionContext)._ID = _m
		}
		{
			p.SetState(313)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(314)

			var _x = p.parametros_funcion(0)

			localctx.(*Declaracion_funcionContext)._parametros_funcion = _x
		}
		{
			p.SetState(315)
			p.Match(NparserPAR_DER)
		}
		{
			p.SetState(316)
			p.Match(NparserFN_TIPO_RETORNO)
		}
		{
			p.SetState(317)

			var _x = p.Tipo_dato()

			localctx.(*Declaracion_funcionContext)._tipo_dato = _x
		}
		{
			p.SetState(318)

			var _x = p.Bloque()

			localctx.(*Declaracion_funcionContext)._bloque = _x
		}

		fila := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetColumn()
			}
		}())
		funcion := simbolos.NewFuncion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, localctx.(*Declaracion_funcionContext).Get_bloque().GetList(),
			localctx.(*Declaracion_funcionContext).Get_parametros_funcion().GetList(), localctx.(*Declaracion_funcionContext).Get_tipo_dato().GetEx(), false, fila, columna)
		localctx.(*Declaracion_funcionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, false, false, Ast.VOID,
			funcion, fila, columna)

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(321)

			var _m = p.Match(NparserFN)

			localctx.(*Declaracion_funcionContext)._FN = _m
		}
		{
			p.SetState(322)

			var _m = p.Match(NparserID)

			localctx.(*Declaracion_funcionContext)._ID = _m
		}
		{
			p.SetState(323)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(324)

			var _x = p.parametros_funcion(0)

			localctx.(*Declaracion_funcionContext)._parametros_funcion = _x
		}
		{
			p.SetState(325)
			p.Match(NparserPAR_DER)
		}
		{
			p.SetState(326)

			var _x = p.Bloque()

			localctx.(*Declaracion_funcionContext)._bloque = _x
		}

		fila := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetColumn()
			}
		}())
		funcion := simbolos.NewFuncion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, localctx.(*Declaracion_funcionContext).Get_bloque().GetList(),
			localctx.(*Declaracion_funcionContext).Get_parametros_funcion().GetList(), Ast.VOID, false, fila, columna)
		localctx.(*Declaracion_funcionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, false, false, Ast.VOID,
			funcion, fila, columna)

	}

	return localctx
}

// IAsignacionContext is an interface to support dynamic dispatch.
type IAsignacionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// Get_control_expresion returns the _control_expresion rule contexts.
	Get_control_expresion() IControl_expresionContext

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// Set_control_expresion sets the _control_expresion rule contexts.
	Set_control_expresion(IControl_expresionContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsAsignacionContext differentiates from other interfaces.
	IsAsignacionContext()
}

type AsignacionContext struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	ex                 Ast.Instruccion
	_ID                antlr.Token
	_expresion         IExpresionContext
	_control_expresion IControl_expresionContext
}

func NewEmptyAsignacionContext() *AsignacionContext {
	var p = new(AsignacionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_asignacion
	return p
}

func (*AsignacionContext) IsAsignacionContext() {}

func NewAsignacionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsignacionContext {
	var p = new(AsignacionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_asignacion

	return p
}

func (s *AsignacionContext) GetParser() antlr.Parser { return s.parser }

func (s *AsignacionContext) Get_ID() antlr.Token { return s._ID }

func (s *AsignacionContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *AsignacionContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *AsignacionContext) Get_control_expresion() IControl_expresionContext {
	return s._control_expresion
}

func (s *AsignacionContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *AsignacionContext) Set_control_expresion(v IControl_expresionContext) {
	s._control_expresion = v
}

func (s *AsignacionContext) GetEx() Ast.Instruccion { return s.ex }

func (s *AsignacionContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *AsignacionContext) ID() antlr.TerminalNode {
	return s.GetToken(NparserID, 0)
}

func (s *AsignacionContext) IGUAL() antlr.TerminalNode {
	return s.GetToken(NparserIGUAL, 0)
}

func (s *AsignacionContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *AsignacionContext) Control_expresion() IControl_expresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_expresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_expresionContext)
}

func (s *AsignacionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsignacionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Asignacion() (localctx IAsignacionContext) {
	localctx = NewAsignacionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, NparserRULE_asignacion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(341)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(331)

			var _m = p.Match(NparserID)

			localctx.(*AsignacionContext)._ID = _m
		}
		{
			p.SetState(332)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(333)

			var _x = p.expresion(0)

			localctx.(*AsignacionContext)._expresion = _x
		}

		fila := (func() int {
			if localctx.(*AsignacionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*AsignacionContext).Get_ID().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*AsignacionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*AsignacionContext).Get_ID().GetColumn()
			}
		}())
		localctx.(*AsignacionContext).ex = instrucciones.NewAsignacion((func() string {
			if localctx.(*AsignacionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*AsignacionContext).Get_ID().GetText()
			}
		}()), localctx.(*AsignacionContext).Get_expresion().GetEx(), fila, columna)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(336)

			var _m = p.Match(NparserID)

			localctx.(*AsignacionContext)._ID = _m
		}
		{
			p.SetState(337)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(338)

			var _x = p.Control_expresion()

			localctx.(*AsignacionContext)._control_expresion = _x
		}

		fila := (func() int {
			if localctx.(*AsignacionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*AsignacionContext).Get_ID().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*AsignacionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*AsignacionContext).Get_ID().GetColumn()
			}
		}())
		localctx.(*AsignacionContext).ex = instrucciones.NewAsignacion((func() string {
			if localctx.(*AsignacionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*AsignacionContext).Get_ID().GetText()
			}
		}()), localctx.(*AsignacionContext).Get_control_expresion().GetEx(), fila, columna)

	}

	return localctx
}

// IExpresionContext is an interface to support dynamic dispatch.
type IExpresionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// Get_PAR_IZQ returns the _PAR_IZQ token.
	Get_PAR_IZQ() antlr.Token

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Get_TRUE returns the _TRUE token.
	Get_TRUE() antlr.Token

	// Get_FALSE returns the _FALSE token.
	Get_FALSE() antlr.Token

	// Get_CARACTER returns the _CARACTER token.
	Get_CARACTER() antlr.Token

	// Get_DECIMAL returns the _DECIMAL token.
	Get_DECIMAL() antlr.Token

	// Get_NUMERO returns the _NUMERO token.
	Get_NUMERO() antlr.Token

	// Get_CADENA returns the _CADENA token.
	Get_CADENA() antlr.Token

	// Get_AND returns the _AND token.
	Get_AND() antlr.Token

	// Get_OR returns the _OR token.
	Get_OR() antlr.Token

	// Get_PUNTO returns the _PUNTO token.
	Get_PUNTO() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// Set_PAR_IZQ sets the _PAR_IZQ token.
	Set_PAR_IZQ(antlr.Token)

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// Set_TRUE sets the _TRUE token.
	Set_TRUE(antlr.Token)

	// Set_FALSE sets the _FALSE token.
	Set_FALSE(antlr.Token)

	// Set_CARACTER sets the _CARACTER token.
	Set_CARACTER(antlr.Token)

	// Set_DECIMAL sets the _DECIMAL token.
	Set_DECIMAL(antlr.Token)

	// Set_NUMERO sets the _NUMERO token.
	Set_NUMERO(antlr.Token)

	// Set_CADENA sets the _CADENA token.
	Set_CADENA(antlr.Token)

	// Set_AND sets the _AND token.
	Set_AND(antlr.Token)

	// Set_OR sets the _OR token.
	Set_OR(antlr.Token)

	// Set_PUNTO sets the _PUNTO token.
	Set_PUNTO(antlr.Token)

	// GetE returns the e rule contexts.
	GetE() IExpresionContext

	// GetOp_izq returns the op_izq rule contexts.
	GetOp_izq() IExpresionContext

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// Get_tipo_dato returns the _tipo_dato rule contexts.
	Get_tipo_dato() ITipo_datoContext

	// Get_llamada_funcion returns the _llamada_funcion rule contexts.
	Get_llamada_funcion() ILlamada_funcionContext

	// Get_metodos_iniciar_vector returns the _metodos_iniciar_vector rule contexts.
	Get_metodos_iniciar_vector() IMetodos_iniciar_vectorContext

	// GetOp_der returns the op_der rule contexts.
	GetOp_der() IExpresionContext

	// SetE sets the e rule contexts.
	SetE(IExpresionContext)

	// SetOp_izq sets the op_izq rule contexts.
	SetOp_izq(IExpresionContext)

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// Set_tipo_dato sets the _tipo_dato rule contexts.
	Set_tipo_dato(ITipo_datoContext)

	// Set_llamada_funcion sets the _llamada_funcion rule contexts.
	Set_llamada_funcion(ILlamada_funcionContext)

	// Set_metodos_iniciar_vector sets the _metodos_iniciar_vector rule contexts.
	Set_metodos_iniciar_vector(IMetodos_iniciar_vectorContext)

	// SetOp_der sets the op_der rule contexts.
	SetOp_der(IExpresionContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Expresion

	// SetEx sets the ex attribute.
	SetEx(Ast.Expresion)

	// IsExpresionContext differentiates from other interfaces.
	IsExpresionContext()
}

type ExpresionContext struct {
	*antlr.BaseParserRuleContext
	parser                  antlr.Parser
	ex                      Ast.Expresion
	e                       IExpresionContext
	op_izq                  IExpresionContext
	op                      antlr.Token
	_expresion              IExpresionContext
	_PAR_IZQ                antlr.Token
	_tipo_dato              ITipo_datoContext
	_llamada_funcion        ILlamada_funcionContext
	_metodos_iniciar_vector IMetodos_iniciar_vectorContext
	_ID                     antlr.Token
	_TRUE                   antlr.Token
	_FALSE                  antlr.Token
	_CARACTER               antlr.Token
	_DECIMAL                antlr.Token
	_NUMERO                 antlr.Token
	_CADENA                 antlr.Token
	op_der                  IExpresionContext
	_AND                    antlr.Token
	_OR                     antlr.Token
	_PUNTO                  antlr.Token
}

func NewEmptyExpresionContext() *ExpresionContext {
	var p = new(ExpresionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_expresion
	return p
}

func (*ExpresionContext) IsExpresionContext() {}

func NewExpresionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpresionContext {
	var p = new(ExpresionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_expresion

	return p
}

func (s *ExpresionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpresionContext) GetOp() antlr.Token { return s.op }

func (s *ExpresionContext) Get_PAR_IZQ() antlr.Token { return s._PAR_IZQ }

func (s *ExpresionContext) Get_ID() antlr.Token { return s._ID }

func (s *ExpresionContext) Get_TRUE() antlr.Token { return s._TRUE }

func (s *ExpresionContext) Get_FALSE() antlr.Token { return s._FALSE }

func (s *ExpresionContext) Get_CARACTER() antlr.Token { return s._CARACTER }

func (s *ExpresionContext) Get_DECIMAL() antlr.Token { return s._DECIMAL }

func (s *ExpresionContext) Get_NUMERO() antlr.Token { return s._NUMERO }

func (s *ExpresionContext) Get_CADENA() antlr.Token { return s._CADENA }

func (s *ExpresionContext) Get_AND() antlr.Token { return s._AND }

func (s *ExpresionContext) Get_OR() antlr.Token { return s._OR }

func (s *ExpresionContext) Get_PUNTO() antlr.Token { return s._PUNTO }

func (s *ExpresionContext) SetOp(v antlr.Token) { s.op = v }

func (s *ExpresionContext) Set_PAR_IZQ(v antlr.Token) { s._PAR_IZQ = v }

func (s *ExpresionContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *ExpresionContext) Set_TRUE(v antlr.Token) { s._TRUE = v }

func (s *ExpresionContext) Set_FALSE(v antlr.Token) { s._FALSE = v }

func (s *ExpresionContext) Set_CARACTER(v antlr.Token) { s._CARACTER = v }

func (s *ExpresionContext) Set_DECIMAL(v antlr.Token) { s._DECIMAL = v }

func (s *ExpresionContext) Set_NUMERO(v antlr.Token) { s._NUMERO = v }

func (s *ExpresionContext) Set_CADENA(v antlr.Token) { s._CADENA = v }

func (s *ExpresionContext) Set_AND(v antlr.Token) { s._AND = v }

func (s *ExpresionContext) Set_OR(v antlr.Token) { s._OR = v }

func (s *ExpresionContext) Set_PUNTO(v antlr.Token) { s._PUNTO = v }

func (s *ExpresionContext) GetE() IExpresionContext { return s.e }

func (s *ExpresionContext) GetOp_izq() IExpresionContext { return s.op_izq }

func (s *ExpresionContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *ExpresionContext) Get_tipo_dato() ITipo_datoContext { return s._tipo_dato }

func (s *ExpresionContext) Get_llamada_funcion() ILlamada_funcionContext { return s._llamada_funcion }

func (s *ExpresionContext) Get_metodos_iniciar_vector() IMetodos_iniciar_vectorContext {
	return s._metodos_iniciar_vector
}

func (s *ExpresionContext) GetOp_der() IExpresionContext { return s.op_der }

func (s *ExpresionContext) SetE(v IExpresionContext) { s.e = v }

func (s *ExpresionContext) SetOp_izq(v IExpresionContext) { s.op_izq = v }

func (s *ExpresionContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *ExpresionContext) Set_tipo_dato(v ITipo_datoContext) { s._tipo_dato = v }

func (s *ExpresionContext) Set_llamada_funcion(v ILlamada_funcionContext) { s._llamada_funcion = v }

func (s *ExpresionContext) Set_metodos_iniciar_vector(v IMetodos_iniciar_vectorContext) {
	s._metodos_iniciar_vector = v
}

func (s *ExpresionContext) SetOp_der(v IExpresionContext) { s.op_der = v }

func (s *ExpresionContext) GetEx() Ast.Expresion { return s.ex }

func (s *ExpresionContext) SetEx(v Ast.Expresion) { s.ex = v }

func (s *ExpresionContext) AllExpresion() []IExpresionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpresionContext)(nil)).Elem())
	var tst = make([]IExpresionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpresionContext)
		}
	}

	return tst
}

func (s *ExpresionContext) Expresion(i int) IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *ExpresionContext) RESTA() antlr.TerminalNode {
	return s.GetToken(NparserRESTA, 0)
}

func (s *ExpresionContext) NOT() antlr.TerminalNode {
	return s.GetToken(NparserNOT, 0)
}

func (s *ExpresionContext) PAR_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserPAR_IZQ, 0)
}

func (s *ExpresionContext) PAR_DER() antlr.TerminalNode {
	return s.GetToken(NparserPAR_DER, 0)
}

func (s *ExpresionContext) AS() antlr.TerminalNode {
	return s.GetToken(NparserAS, 0)
}

func (s *ExpresionContext) Tipo_dato() ITipo_datoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipo_datoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipo_datoContext)
}

func (s *ExpresionContext) Llamada_funcion() ILlamada_funcionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILlamada_funcionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILlamada_funcionContext)
}

func (s *ExpresionContext) Metodos_iniciar_vector() IMetodos_iniciar_vectorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMetodos_iniciar_vectorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMetodos_iniciar_vectorContext)
}

func (s *ExpresionContext) ID() antlr.TerminalNode {
	return s.GetToken(NparserID, 0)
}

func (s *ExpresionContext) TRUE() antlr.TerminalNode {
	return s.GetToken(NparserTRUE, 0)
}

func (s *ExpresionContext) FALSE() antlr.TerminalNode {
	return s.GetToken(NparserFALSE, 0)
}

func (s *ExpresionContext) CARACTER() antlr.TerminalNode {
	return s.GetToken(NparserCARACTER, 0)
}

func (s *ExpresionContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(NparserDECIMAL, 0)
}

func (s *ExpresionContext) NUMERO() antlr.TerminalNode {
	return s.GetToken(NparserNUMERO, 0)
}

func (s *ExpresionContext) CADENA() antlr.TerminalNode {
	return s.GetToken(NparserCADENA, 0)
}

func (s *ExpresionContext) MULTIPLICACION() antlr.TerminalNode {
	return s.GetToken(NparserMULTIPLICACION, 0)
}

func (s *ExpresionContext) DIVISION() antlr.TerminalNode {
	return s.GetToken(NparserDIVISION, 0)
}

func (s *ExpresionContext) MODULO() antlr.TerminalNode {
	return s.GetToken(NparserMODULO, 0)
}

func (s *ExpresionContext) SUMA() antlr.TerminalNode {
	return s.GetToken(NparserSUMA, 0)
}

func (s *ExpresionContext) MAYOR_I() antlr.TerminalNode {
	return s.GetToken(NparserMAYOR_I, 0)
}

func (s *ExpresionContext) MAYOR() antlr.TerminalNode {
	return s.GetToken(NparserMAYOR, 0)
}

func (s *ExpresionContext) MENOR_I() antlr.TerminalNode {
	return s.GetToken(NparserMENOR_I, 0)
}

func (s *ExpresionContext) MENOR() antlr.TerminalNode {
	return s.GetToken(NparserMENOR, 0)
}

func (s *ExpresionContext) IGUALDAD() antlr.TerminalNode {
	return s.GetToken(NparserIGUALDAD, 0)
}

func (s *ExpresionContext) DISTINTO() antlr.TerminalNode {
	return s.GetToken(NparserDISTINTO, 0)
}

func (s *ExpresionContext) AND() antlr.TerminalNode {
	return s.GetToken(NparserAND, 0)
}

func (s *ExpresionContext) OR() antlr.TerminalNode {
	return s.GetToken(NparserOR, 0)
}

func (s *ExpresionContext) PUNTO() antlr.TerminalNode {
	return s.GetToken(NparserPUNTO, 0)
}

func (s *ExpresionContext) TO_STRING() antlr.TerminalNode {
	return s.GetToken(NparserTO_STRING, 0)
}

func (s *ExpresionContext) SQRT() antlr.TerminalNode {
	return s.GetToken(NparserSQRT, 0)
}

func (s *ExpresionContext) ABS() antlr.TerminalNode {
	return s.GetToken(NparserABS, 0)
}

func (s *ExpresionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpresionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Expresion() (localctx IExpresionContext) {
	return p.expresion(0)
}

func (p *Nparser) expresion(_p int) (localctx IExpresionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpresionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpresionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 14
	p.EnterRecursionRule(localctx, 14, NparserRULE_expresion, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(380)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(344)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ExpresionContext).op = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == NparserRESTA || _la == NparserNOT) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ExpresionContext).op = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(345)

			var _x = p.expresion(21)

			localctx.(*ExpresionContext).op_izq = _x
			localctx.(*ExpresionContext)._expresion = _x
		}

		fila := (func() int {
			if localctx.(*ExpresionContext).GetOp() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).GetOp().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ExpresionContext).GetOp() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).GetOp().GetColumn()
			}
		}())
		localctx.(*ExpresionContext).ex = expresiones.NewOperation(localctx.(*ExpresionContext).GetOp_izq().GetEx(), (func() string {
			if localctx.(*ExpresionContext).GetOp() == nil {
				return ""
			} else {
				return localctx.(*ExpresionContext).GetOp().GetText()
			}
		}()), nil, true, fila, columna)

	case 2:
		{
			p.SetState(348)

			var _m = p.Match(NparserPAR_IZQ)

			localctx.(*ExpresionContext)._PAR_IZQ = _m
		}
		{
			p.SetState(349)

			var _x = p.expresion(0)

			localctx.(*ExpresionContext)._expresion = _x
		}
		{
			p.SetState(350)
			p.Match(NparserPAR_DER)
		}

		localctx.(*ExpresionContext).ex = localctx.(*ExpresionContext).Get_expresion().GetEx()

	case 3:
		{
			p.SetState(353)

			var _m = p.Match(NparserPAR_IZQ)

			localctx.(*ExpresionContext)._PAR_IZQ = _m
		}
		{
			p.SetState(354)

			var _x = p.expresion(0)

			localctx.(*ExpresionContext)._expresion = _x
		}
		{
			p.SetState(355)
			p.Match(NparserAS)
		}
		{
			p.SetState(356)

			var _x = p.Tipo_dato()

			localctx.(*ExpresionContext)._tipo_dato = _x
		}
		{
			p.SetState(357)
			p.Match(NparserPAR_DER)
		}

		//Cast
		fila := (func() int {
			if localctx.(*ExpresionContext).Get_PAR_IZQ() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_PAR_IZQ().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ExpresionContext).Get_PAR_IZQ() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_PAR_IZQ().GetColumn()
			}
		}())
		localctx.(*ExpresionContext).ex = expresiones.NewCast(localctx.(*ExpresionContext).Get_expresion().GetEx(), Ast.CAST, localctx.(*ExpresionContext).Get_tipo_dato().GetEx(), fila, columna)

	case 4:
		{
			p.SetState(360)

			var _x = p.Llamada_funcion()

			localctx.(*ExpresionContext)._llamada_funcion = _x
		}

		localctx.(*ExpresionContext).ex = localctx.(*ExpresionContext).Get_llamada_funcion().GetEx()

	case 5:
		{
			p.SetState(363)

			var _x = p.Metodos_iniciar_vector()

			localctx.(*ExpresionContext)._metodos_iniciar_vector = _x
		}

		localctx.(*ExpresionContext).ex = localctx.(*ExpresionContext).Get_metodos_iniciar_vector().GetEx()

	case 6:
		{
			p.SetState(366)

			var _m = p.Match(NparserID)

			localctx.(*ExpresionContext)._ID = _m
		}

		id := (func() string {
			if localctx.(*ExpresionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*ExpresionContext).Get_ID().GetText()
			}
		}())
		fila := (func() int {
			if localctx.(*ExpresionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_ID().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ExpresionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_ID().GetColumn()
			}
		}())
		localctx.(*ExpresionContext).ex = expresiones.NewIdentificador(id, Ast.IDENTIFICADOR, fila, columna)

	case 7:
		{
			p.SetState(368)

			var _m = p.Match(NparserTRUE)

			localctx.(*ExpresionContext)._TRUE = _m
		}

		valor := true
		fila := (func() int {
			if localctx.(*ExpresionContext).Get_TRUE() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_TRUE().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ExpresionContext).Get_TRUE() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_TRUE().GetColumn()
			}
		}())
		localctx.(*ExpresionContext).ex = expresiones.NewPrimitivo(valor, Ast.BOOLEAN, fila, columna)

	case 8:
		{
			p.SetState(370)

			var _m = p.Match(NparserFALSE)

			localctx.(*ExpresionContext)._FALSE = _m
		}

		valor := false
		fila := (func() int {
			if localctx.(*ExpresionContext).Get_FALSE() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_FALSE().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ExpresionContext).Get_FALSE() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_FALSE().GetColumn()
			}
		}())
		localctx.(*ExpresionContext).ex = expresiones.NewPrimitivo(valor, Ast.BOOLEAN, fila, columna)

	case 9:
		{
			p.SetState(372)

			var _m = p.Match(NparserCARACTER)

			localctx.(*ExpresionContext)._CARACTER = _m
		}

		valor := (func() string {
			if localctx.(*ExpresionContext).Get_CARACTER() == nil {
				return ""
			} else {
				return localctx.(*ExpresionContext).Get_CARACTER().GetText()
			}
		}())
		valor = valor[1 : len(valor)-1]
		fila := (func() int {
			if localctx.(*ExpresionContext).Get_CARACTER() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_CARACTER().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ExpresionContext).Get_CARACTER() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_CARACTER().GetColumn()
			}
		}())
		localctx.(*ExpresionContext).ex = expresiones.NewPrimitivo(valor, Ast.CHAR, fila, columna)

	case 10:
		{
			p.SetState(374)

			var _m = p.Match(NparserDECIMAL)

			localctx.(*ExpresionContext)._DECIMAL = _m
		}

		valor, err := strconv.ParseFloat((func() string {
			if localctx.(*ExpresionContext).Get_DECIMAL() == nil {
				return ""
			} else {
				return localctx.(*ExpresionContext).Get_DECIMAL().GetText()
			}
		}()), 64)
		if err != nil {
			fmt.Println("Hay un error en el get número")
			fmt.Println(err)
		}
		fila := (func() int {
			if localctx.(*ExpresionContext).Get_DECIMAL() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_DECIMAL().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ExpresionContext).Get_DECIMAL() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_DECIMAL().GetColumn()
			}
		}())
		localctx.(*ExpresionContext).ex = expresiones.NewPrimitivo(valor, Ast.F64, fila, columna)

	case 11:
		{
			p.SetState(376)

			var _m = p.Match(NparserNUMERO)

			localctx.(*ExpresionContext)._NUMERO = _m
		}

		valor, err := strconv.Atoi((func() string {
			if localctx.(*ExpresionContext).Get_NUMERO() == nil {
				return ""
			} else {
				return localctx.(*ExpresionContext).Get_NUMERO().GetText()
			}
		}()))
		if err != nil {
			fmt.Println("Hay un error en el get número")
			fmt.Println(err)
		}
		fila := (func() int {
			if localctx.(*ExpresionContext).Get_NUMERO() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_NUMERO().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ExpresionContext).Get_NUMERO() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_NUMERO().GetColumn()
			}
		}())
		localctx.(*ExpresionContext).ex = expresiones.NewPrimitivo(valor, Ast.I64, fila, columna)

	case 12:
		{
			p.SetState(378)

			var _m = p.Match(NparserCADENA)

			localctx.(*ExpresionContext)._CADENA = _m
		}

		fila := (func() int {
			if localctx.(*ExpresionContext).Get_CADENA() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_CADENA().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ExpresionContext).Get_CADENA() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_CADENA().GetColumn()
			}
		}())
		valor := (func() string {
			if localctx.(*ExpresionContext).Get_CADENA() == nil {
				return ""
			} else {
				return localctx.(*ExpresionContext).Get_CADENA().GetText()
			}
		}())
		valor = valor[1 : len(valor)-1]
		localctx.(*ExpresionContext).ex = expresiones.NewPrimitivo(valor, Ast.STR, fila, columna)

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(432)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 7, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(430)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 6, p.GetParserRuleContext()) {
			case 1:
				localctx = NewExpresionContext(p, _parentctx, _parentState)
				localctx.(*ExpresionContext).op_izq = _prevctx
				p.PushNewRecursionContext(localctx, _startState, NparserRULE_expresion)
				p.SetState(382)

				if !(p.Precpred(p.GetParserRuleContext(), 17)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 17)", ""))
				}
				{
					p.SetState(383)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ExpresionContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(((_la-70)&-(0x1f+1)) == 0 && ((1<<uint((_la-70)))&((1<<(NparserMODULO-70))|(1<<(NparserMULTIPLICACION-70))|(1<<(NparserDIVISION-70)))) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ExpresionContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(384)

					var _x = p.expresion(18)

					localctx.(*ExpresionContext).op_der = _x
					localctx.(*ExpresionContext)._expresion = _x
				}

				fila := (func() int {
					if localctx.(*ExpresionContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).GetOp().GetLine()
					}
				}())
				columna := (func() int {
					if localctx.(*ExpresionContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).GetOp().GetColumn()
					}
				}())
				localctx.(*ExpresionContext).ex = expresiones.NewOperation(localctx.(*ExpresionContext).GetOp_izq().GetEx(), (func() string {
					if localctx.(*ExpresionContext).GetOp() == nil {
						return ""
					} else {
						return localctx.(*ExpresionContext).GetOp().GetText()
					}
				}()), localctx.(*ExpresionContext).GetOp_der().GetEx(), false, fila, columna)

			case 2:
				localctx = NewExpresionContext(p, _parentctx, _parentState)
				localctx.(*ExpresionContext).op_izq = _prevctx
				p.PushNewRecursionContext(localctx, _startState, NparserRULE_expresion)
				p.SetState(387)

				if !(p.Precpred(p.GetParserRuleContext(), 16)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 16)", ""))
				}
				{
					p.SetState(388)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ExpresionContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == NparserRESTA || _la == NparserSUMA) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ExpresionContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(389)

					var _x = p.expresion(17)

					localctx.(*ExpresionContext).op_der = _x
					localctx.(*ExpresionContext)._expresion = _x
				}

				fila := (func() int {
					if localctx.(*ExpresionContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).GetOp().GetLine()
					}
				}())
				columna := (func() int {
					if localctx.(*ExpresionContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).GetOp().GetColumn()
					}
				}())
				localctx.(*ExpresionContext).ex = expresiones.NewOperation(localctx.(*ExpresionContext).GetOp_izq().GetEx(), (func() string {
					if localctx.(*ExpresionContext).GetOp() == nil {
						return ""
					} else {
						return localctx.(*ExpresionContext).GetOp().GetText()
					}
				}()), localctx.(*ExpresionContext).GetOp_der().GetEx(), false, fila, columna)

			case 3:
				localctx = NewExpresionContext(p, _parentctx, _parentState)
				localctx.(*ExpresionContext).op_izq = _prevctx
				p.PushNewRecursionContext(localctx, _startState, NparserRULE_expresion)
				p.SetState(392)

				if !(p.Precpred(p.GetParserRuleContext(), 15)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 15)", ""))
				}
				{
					p.SetState(393)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ExpresionContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(((_la-62)&-(0x1f+1)) == 0 && ((1<<uint((_la-62)))&((1<<(NparserMAYOR_I-62))|(1<<(NparserMAYOR-62))|(1<<(NparserMENOR_I-62))|(1<<(NparserMENOR-62))|(1<<(NparserIGUALDAD-62))|(1<<(NparserDISTINTO-62)))) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ExpresionContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(394)

					var _x = p.expresion(16)

					localctx.(*ExpresionContext).op_der = _x
					localctx.(*ExpresionContext)._expresion = _x
				}

				fila := (func() int {
					if localctx.(*ExpresionContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).GetOp().GetLine()
					}
				}())
				columna := (func() int {
					if localctx.(*ExpresionContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).GetOp().GetColumn()
					}
				}())
				localctx.(*ExpresionContext).ex = expresiones.NewOperation(localctx.(*ExpresionContext).GetOp_izq().GetEx(), (func() string {
					if localctx.(*ExpresionContext).GetOp() == nil {
						return ""
					} else {
						return localctx.(*ExpresionContext).GetOp().GetText()
					}
				}()), localctx.(*ExpresionContext).GetOp_der().GetEx(), false, fila, columna)

			case 4:
				localctx = NewExpresionContext(p, _parentctx, _parentState)
				localctx.(*ExpresionContext).op_izq = _prevctx
				p.PushNewRecursionContext(localctx, _startState, NparserRULE_expresion)
				p.SetState(397)

				if !(p.Precpred(p.GetParserRuleContext(), 14)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 14)", ""))
				}
				{
					p.SetState(398)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ExpresionContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == NparserIGUALDAD || _la == NparserDISTINTO) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ExpresionContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(399)

					var _x = p.expresion(15)

					localctx.(*ExpresionContext).op_der = _x
					localctx.(*ExpresionContext)._expresion = _x
				}

				fila := (func() int {
					if localctx.(*ExpresionContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).GetOp().GetLine()
					}
				}())
				columna := (func() int {
					if localctx.(*ExpresionContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).GetOp().GetColumn()
					}
				}())
				localctx.(*ExpresionContext).ex = expresiones.NewOperation(localctx.(*ExpresionContext).GetOp_izq().GetEx(), (func() string {
					if localctx.(*ExpresionContext).GetOp() == nil {
						return ""
					} else {
						return localctx.(*ExpresionContext).GetOp().GetText()
					}
				}()), localctx.(*ExpresionContext).GetOp_der().GetEx(), false, fila, columna)

			case 5:
				localctx = NewExpresionContext(p, _parentctx, _parentState)
				localctx.(*ExpresionContext).op_izq = _prevctx
				p.PushNewRecursionContext(localctx, _startState, NparserRULE_expresion)
				p.SetState(402)

				if !(p.Precpred(p.GetParserRuleContext(), 13)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 13)", ""))
				}
				{
					p.SetState(403)

					var _m = p.Match(NparserAND)

					localctx.(*ExpresionContext)._AND = _m
				}
				{
					p.SetState(404)

					var _x = p.expresion(14)

					localctx.(*ExpresionContext).op_der = _x
					localctx.(*ExpresionContext)._expresion = _x
				}

				fila := (func() int {
					if localctx.(*ExpresionContext).Get_AND() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_AND().GetLine()
					}
				}())
				columna := (func() int {
					if localctx.(*ExpresionContext).Get_AND() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_AND().GetColumn()
					}
				}())
				localctx.(*ExpresionContext).ex = expresiones.NewOperation(localctx.(*ExpresionContext).GetOp_izq().GetEx(), (func() string {
					if localctx.(*ExpresionContext).Get_AND() == nil {
						return ""
					} else {
						return localctx.(*ExpresionContext).Get_AND().GetText()
					}
				}()), localctx.(*ExpresionContext).GetOp_der().GetEx(), false, fila, columna)

			case 6:
				localctx = NewExpresionContext(p, _parentctx, _parentState)
				localctx.(*ExpresionContext).op_izq = _prevctx
				p.PushNewRecursionContext(localctx, _startState, NparserRULE_expresion)
				p.SetState(407)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
				}
				{
					p.SetState(408)

					var _m = p.Match(NparserOR)

					localctx.(*ExpresionContext)._OR = _m
				}
				{
					p.SetState(409)

					var _x = p.expresion(13)

					localctx.(*ExpresionContext).op_der = _x
					localctx.(*ExpresionContext)._expresion = _x
				}

				fila := (func() int {
					if localctx.(*ExpresionContext).Get_OR() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_OR().GetLine()
					}
				}())
				columna := (func() int {
					if localctx.(*ExpresionContext).Get_OR() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_OR().GetColumn()
					}
				}())
				localctx.(*ExpresionContext).ex = expresiones.NewOperation(localctx.(*ExpresionContext).GetOp_izq().GetEx(), (func() string {
					if localctx.(*ExpresionContext).Get_OR() == nil {
						return ""
					} else {
						return localctx.(*ExpresionContext).Get_OR().GetText()
					}
				}()), localctx.(*ExpresionContext).GetOp_der().GetEx(), false, fila, columna)

			case 7:
				localctx = NewExpresionContext(p, _parentctx, _parentState)
				localctx.(*ExpresionContext).e = _prevctx
				p.PushNewRecursionContext(localctx, _startState, NparserRULE_expresion)
				p.SetState(412)

				if !(p.Precpred(p.GetParserRuleContext(), 20)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 20)", ""))
				}
				{
					p.SetState(413)

					var _m = p.Match(NparserPUNTO)

					localctx.(*ExpresionContext)._PUNTO = _m
				}
				{
					p.SetState(414)
					p.Match(NparserTO_STRING)
				}
				{
					p.SetState(415)

					var _m = p.Match(NparserPAR_IZQ)

					localctx.(*ExpresionContext)._PAR_IZQ = _m
				}
				{
					p.SetState(416)
					p.Match(NparserPAR_DER)
				}

				fila := (func() int {
					if localctx.(*ExpresionContext).Get_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_PUNTO().GetLine()
					}
				}())
				columna := (func() int {
					if localctx.(*ExpresionContext).Get_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_PUNTO().GetColumn()
					}
				}()) - 1
				localctx.(*ExpresionContext).ex = fn_primitivas.NewToString(Ast.LLAMADA_FUNCION, localctx.(*ExpresionContext).GetE().GetEx(), fila, columna)

			case 8:
				localctx = NewExpresionContext(p, _parentctx, _parentState)
				localctx.(*ExpresionContext).e = _prevctx
				p.PushNewRecursionContext(localctx, _startState, NparserRULE_expresion)
				p.SetState(418)

				if !(p.Precpred(p.GetParserRuleContext(), 19)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 19)", ""))
				}
				{
					p.SetState(419)

					var _m = p.Match(NparserPUNTO)

					localctx.(*ExpresionContext)._PUNTO = _m
				}
				{
					p.SetState(420)
					p.Match(NparserSQRT)
				}
				{
					p.SetState(421)

					var _m = p.Match(NparserPAR_IZQ)

					localctx.(*ExpresionContext)._PAR_IZQ = _m
				}
				{
					p.SetState(422)
					p.Match(NparserPAR_DER)
				}

				fila := (func() int {
					if localctx.(*ExpresionContext).Get_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_PUNTO().GetLine()
					}
				}())
				columna := (func() int {
					if localctx.(*ExpresionContext).Get_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_PUNTO().GetColumn()
					}
				}()) - 1
				localctx.(*ExpresionContext).ex = fn_primitivas.NewSqrt(Ast.LLAMADA_FUNCION, localctx.(*ExpresionContext).GetE().GetEx(), fila, columna)

			case 9:
				localctx = NewExpresionContext(p, _parentctx, _parentState)
				localctx.(*ExpresionContext).e = _prevctx
				p.PushNewRecursionContext(localctx, _startState, NparserRULE_expresion)
				p.SetState(424)

				if !(p.Precpred(p.GetParserRuleContext(), 18)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 18)", ""))
				}
				{
					p.SetState(425)

					var _m = p.Match(NparserPUNTO)

					localctx.(*ExpresionContext)._PUNTO = _m
				}
				{
					p.SetState(426)
					p.Match(NparserABS)
				}
				{
					p.SetState(427)

					var _m = p.Match(NparserPAR_IZQ)

					localctx.(*ExpresionContext)._PAR_IZQ = _m
				}
				{
					p.SetState(428)
					p.Match(NparserPAR_DER)
				}

				fila := (func() int {
					if localctx.(*ExpresionContext).Get_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_PUNTO().GetLine()
					}
				}())
				columna := (func() int {
					if localctx.(*ExpresionContext).Get_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_PUNTO().GetColumn()
					}
				}()) - 1
				localctx.(*ExpresionContext).ex = fn_primitivas.NewAbs(Ast.LLAMADA_FUNCION, localctx.(*ExpresionContext).GetE().GetEx(), fila, columna)

			}

		}
		p.SetState(434)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 7, p.GetParserRuleContext())
	}

	return localctx
}

// ITipo_datoContext is an interface to support dynamic dispatch.
type ITipo_datoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetEx returns the ex attribute.
	GetEx() Ast.TipoDato

	// SetEx sets the ex attribute.
	SetEx(Ast.TipoDato)

	// IsTipo_datoContext differentiates from other interfaces.
	IsTipo_datoContext()
}

type Tipo_datoContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	ex     Ast.TipoDato
}

func NewEmptyTipo_datoContext() *Tipo_datoContext {
	var p = new(Tipo_datoContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_tipo_dato
	return p
}

func (*Tipo_datoContext) IsTipo_datoContext() {}

func NewTipo_datoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tipo_datoContext {
	var p = new(Tipo_datoContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_tipo_dato

	return p
}

func (s *Tipo_datoContext) GetParser() antlr.Parser { return s.parser }

func (s *Tipo_datoContext) GetEx() Ast.TipoDato { return s.ex }

func (s *Tipo_datoContext) SetEx(v Ast.TipoDato) { s.ex = v }

func (s *Tipo_datoContext) BOOL() antlr.TerminalNode {
	return s.GetToken(NparserBOOL, 0)
}

func (s *Tipo_datoContext) CHAR() antlr.TerminalNode {
	return s.GetToken(NparserCHAR, 0)
}

func (s *Tipo_datoContext) I64() antlr.TerminalNode {
	return s.GetToken(NparserI64, 0)
}

func (s *Tipo_datoContext) F64() antlr.TerminalNode {
	return s.GetToken(NparserF64, 0)
}

func (s *Tipo_datoContext) STR() antlr.TerminalNode {
	return s.GetToken(NparserSTR, 0)
}

func (s *Tipo_datoContext) STRING() antlr.TerminalNode {
	return s.GetToken(NparserSTRING, 0)
}

func (s *Tipo_datoContext) USIZE() antlr.TerminalNode {
	return s.GetToken(NparserUSIZE, 0)
}

func (s *Tipo_datoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tipo_datoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Tipo_dato() (localctx ITipo_datoContext) {
	localctx = NewTipo_datoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, NparserRULE_tipo_dato)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(449)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case NparserBOOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(435)
			p.Match(NparserBOOL)
		}
		localctx.(*Tipo_datoContext).ex = Ast.BOOLEAN

	case NparserCHAR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(437)
			p.Match(NparserCHAR)
		}
		localctx.(*Tipo_datoContext).ex = Ast.CHAR

	case NparserI64:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(439)
			p.Match(NparserI64)
		}
		localctx.(*Tipo_datoContext).ex = Ast.I64

	case NparserF64:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(441)
			p.Match(NparserF64)
		}
		localctx.(*Tipo_datoContext).ex = Ast.F64

	case NparserSTR:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(443)
			p.Match(NparserSTR)
		}
		localctx.(*Tipo_datoContext).ex = Ast.STR

	case NparserSTRING:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(445)
			p.Match(NparserSTRING)
		}
		localctx.(*Tipo_datoContext).ex = Ast.STRING

	case NparserUSIZE:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(447)
			p.Match(NparserUSIZE)
		}
		localctx.(*Tipo_datoContext).ex = Ast.USIZE

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IControl_ifContext is an interface to support dynamic dispatch.
type IControl_ifContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_IF returns the _IF token.
	Get_IF() antlr.Token

	// Set_IF sets the _IF token.
	Set_IF(antlr.Token)

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// GetBloqueIf returns the bloqueIf rule contexts.
	GetBloqueIf() IBloqueContext

	// GetBloqueElse returns the bloqueElse rule contexts.
	GetBloqueElse() IBloqueContext

	// Get_bloque_else_if returns the _bloque_else_if rule contexts.
	Get_bloque_else_if() IBloque_else_ifContext

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// SetBloqueIf sets the bloqueIf rule contexts.
	SetBloqueIf(IBloqueContext)

	// SetBloqueElse sets the bloqueElse rule contexts.
	SetBloqueElse(IBloqueContext)

	// Set_bloque_else_if sets the _bloque_else_if rule contexts.
	Set_bloque_else_if(IBloque_else_ifContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsControl_ifContext differentiates from other interfaces.
	IsControl_ifContext()
}

type Control_ifContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	ex              Ast.Instruccion
	_IF             antlr.Token
	_expresion      IExpresionContext
	bloqueIf        IBloqueContext
	bloqueElse      IBloqueContext
	_bloque_else_if IBloque_else_ifContext
}

func NewEmptyControl_ifContext() *Control_ifContext {
	var p = new(Control_ifContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_control_if
	return p
}

func (*Control_ifContext) IsControl_ifContext() {}

func NewControl_ifContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Control_ifContext {
	var p = new(Control_ifContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_control_if

	return p
}

func (s *Control_ifContext) GetParser() antlr.Parser { return s.parser }

func (s *Control_ifContext) Get_IF() antlr.Token { return s._IF }

func (s *Control_ifContext) Set_IF(v antlr.Token) { s._IF = v }

func (s *Control_ifContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *Control_ifContext) GetBloqueIf() IBloqueContext { return s.bloqueIf }

func (s *Control_ifContext) GetBloqueElse() IBloqueContext { return s.bloqueElse }

func (s *Control_ifContext) Get_bloque_else_if() IBloque_else_ifContext { return s._bloque_else_if }

func (s *Control_ifContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *Control_ifContext) SetBloqueIf(v IBloqueContext) { s.bloqueIf = v }

func (s *Control_ifContext) SetBloqueElse(v IBloqueContext) { s.bloqueElse = v }

func (s *Control_ifContext) Set_bloque_else_if(v IBloque_else_ifContext) { s._bloque_else_if = v }

func (s *Control_ifContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Control_ifContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Control_ifContext) IF() antlr.TerminalNode {
	return s.GetToken(NparserIF, 0)
}

func (s *Control_ifContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Control_ifContext) AllBloque() []IBloqueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBloqueContext)(nil)).Elem())
	var tst = make([]IBloqueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBloqueContext)
		}
	}

	return tst
}

func (s *Control_ifContext) Bloque(i int) IBloqueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloqueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBloqueContext)
}

func (s *Control_ifContext) ELSE() antlr.TerminalNode {
	return s.GetToken(NparserELSE, 0)
}

func (s *Control_ifContext) Bloque_else_if() IBloque_else_ifContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloque_else_ifContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloque_else_ifContext)
}

func (s *Control_ifContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Control_ifContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Control_if() (localctx IControl_ifContext) {
	localctx = NewControl_ifContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, NparserRULE_control_if)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(477)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 9, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(451)

			var _m = p.Match(NparserIF)

			localctx.(*Control_ifContext)._IF = _m
		}
		{
			p.SetState(452)

			var _x = p.expresion(0)

			localctx.(*Control_ifContext)._expresion = _x
		}
		{
			p.SetState(453)

			var _x = p.Bloque()

			localctx.(*Control_ifContext).bloqueIf = _x
		}

		fila := (func() int {
			if localctx.(*Control_ifContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_ifContext).Get_IF().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Control_ifContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_ifContext).Get_IF().GetColumn()
			}
		}())
		columna++
		lista_null := arraylist.New()
		localctx.(*Control_ifContext).ex = exp_ins.NewIF(localctx.(*Control_ifContext).Get_expresion().GetEx(), localctx.(*Control_ifContext).GetBloqueIf().GetList(), lista_null, Ast.IF, fila, columna, false)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(456)

			var _m = p.Match(NparserIF)

			localctx.(*Control_ifContext)._IF = _m
		}
		{
			p.SetState(457)

			var _x = p.expresion(0)

			localctx.(*Control_ifContext)._expresion = _x
		}
		{
			p.SetState(458)

			var _x = p.Bloque()

			localctx.(*Control_ifContext).bloqueIf = _x
		}
		{
			p.SetState(459)
			p.Match(NparserELSE)
		}
		{
			p.SetState(460)

			var _x = p.Bloque()

			localctx.(*Control_ifContext).bloqueElse = _x
		}

		fila := (func() int {
			if localctx.(*Control_ifContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_ifContext).Get_IF().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Control_ifContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_ifContext).Get_IF().GetColumn()
			}
		}())
		columna++
		lista_entonces := arraylist.New()
		lista_null := arraylist.New()
		Else := exp_ins.NewIF(localctx.(*Control_ifContext).Get_expresion().GetEx(), localctx.(*Control_ifContext).GetBloqueElse().GetList(), lista_null, Ast.ELSE, fila, columna, false)
		lista_entonces.Add(Else)
		localctx.(*Control_ifContext).ex = exp_ins.NewIF(localctx.(*Control_ifContext).Get_expresion().GetEx(), localctx.(*Control_ifContext).GetBloqueIf().GetList(), lista_entonces, Ast.IF, fila, columna, false)

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(463)

			var _m = p.Match(NparserIF)

			localctx.(*Control_ifContext)._IF = _m
		}
		{
			p.SetState(464)

			var _x = p.expresion(0)

			localctx.(*Control_ifContext)._expresion = _x
		}
		{
			p.SetState(465)

			var _x = p.Bloque()

			localctx.(*Control_ifContext).bloqueIf = _x
		}
		{
			p.SetState(466)

			var _x = p.Bloque_else_if()

			localctx.(*Control_ifContext)._bloque_else_if = _x
		}

		fila := (func() int {
			if localctx.(*Control_ifContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_ifContext).Get_IF().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Control_ifContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_ifContext).Get_IF().GetColumn()
			}
		}())
		columna++
		lista_entonces := localctx.(*Control_ifContext).Get_bloque_else_if().GetList()
		localctx.(*Control_ifContext).ex = exp_ins.NewIF(localctx.(*Control_ifContext).Get_expresion().GetEx(), localctx.(*Control_ifContext).GetBloqueIf().GetList(), lista_entonces, Ast.IF, fila, columna, false)

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(469)

			var _m = p.Match(NparserIF)

			localctx.(*Control_ifContext)._IF = _m
		}
		{
			p.SetState(470)

			var _x = p.expresion(0)

			localctx.(*Control_ifContext)._expresion = _x
		}
		{
			p.SetState(471)

			var _x = p.Bloque()

			localctx.(*Control_ifContext).bloqueIf = _x
		}
		{
			p.SetState(472)

			var _x = p.Bloque_else_if()

			localctx.(*Control_ifContext)._bloque_else_if = _x
		}
		{
			p.SetState(473)
			p.Match(NparserELSE)
		}
		{
			p.SetState(474)

			var _x = p.Bloque()

			localctx.(*Control_ifContext).bloqueElse = _x
		}

		fila := (func() int {
			if localctx.(*Control_ifContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_ifContext).Get_IF().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Control_ifContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_ifContext).Get_IF().GetColumn()
			}
		}())
		columna++
		lista_null := arraylist.New()
		Else := exp_ins.NewIF(localctx.(*Control_ifContext).Get_expresion().GetEx(), localctx.(*Control_ifContext).GetBloqueElse().GetList(), lista_null, Ast.ELSE, fila, columna, false)
		lista_entonces := localctx.(*Control_ifContext).Get_bloque_else_if().GetList()
		lista_entonces.Add(Else)
		localctx.(*Control_ifContext).ex = exp_ins.NewIF(localctx.(*Control_ifContext).Get_expresion().GetEx(), localctx.(*Control_ifContext).GetBloqueIf().GetList(), lista_entonces, Ast.IF, fila, columna, false)

	}

	return localctx
}

// IBloque_else_ifContext is an interface to support dynamic dispatch.
type IBloque_else_ifContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_else_if returns the _else_if rule contexts.
	Get_else_if() IElse_ifContext

	// Set_else_if sets the _else_if rule contexts.
	Set_else_if(IElse_ifContext)

	// GetLista returns the lista rule context list.
	GetLista() []IElse_ifContext

	// SetLista sets the lista rule context list.
	SetLista([]IElse_ifContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsBloque_else_ifContext differentiates from other interfaces.
	IsBloque_else_ifContext()
}

type Bloque_else_ifContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	list     *arraylist.List
	_else_if IElse_ifContext
	lista    []IElse_ifContext
}

func NewEmptyBloque_else_ifContext() *Bloque_else_ifContext {
	var p = new(Bloque_else_ifContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_bloque_else_if
	return p
}

func (*Bloque_else_ifContext) IsBloque_else_ifContext() {}

func NewBloque_else_ifContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bloque_else_ifContext {
	var p = new(Bloque_else_ifContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_bloque_else_if

	return p
}

func (s *Bloque_else_ifContext) GetParser() antlr.Parser { return s.parser }

func (s *Bloque_else_ifContext) Get_else_if() IElse_ifContext { return s._else_if }

func (s *Bloque_else_ifContext) Set_else_if(v IElse_ifContext) { s._else_if = v }

func (s *Bloque_else_ifContext) GetLista() []IElse_ifContext { return s.lista }

func (s *Bloque_else_ifContext) SetLista(v []IElse_ifContext) { s.lista = v }

func (s *Bloque_else_ifContext) GetList() *arraylist.List { return s.list }

func (s *Bloque_else_ifContext) SetList(v *arraylist.List) { s.list = v }

func (s *Bloque_else_ifContext) AllElse_if() []IElse_ifContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IElse_ifContext)(nil)).Elem())
	var tst = make([]IElse_ifContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IElse_ifContext)
		}
	}

	return tst
}

func (s *Bloque_else_ifContext) Else_if(i int) IElse_ifContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElse_ifContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IElse_ifContext)
}

func (s *Bloque_else_ifContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bloque_else_ifContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Bloque_else_if() (localctx IBloque_else_ifContext) {
	localctx = NewBloque_else_ifContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, NparserRULE_bloque_else_if)
	localctx.(*Bloque_else_ifContext).list = arraylist.New()

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(480)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(479)

				var _x = p.Else_if()

				localctx.(*Bloque_else_ifContext)._else_if = _x
			}
			localctx.(*Bloque_else_ifContext).lista = append(localctx.(*Bloque_else_ifContext).lista, localctx.(*Bloque_else_ifContext)._else_if)

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(482)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 10, p.GetParserRuleContext())
	}

	listas := localctx.(*Bloque_else_ifContext).GetLista()
	for _, e := range listas {
		localctx.(*Bloque_else_ifContext).list.Add(e.GetEx())
	}

	return localctx
}

// IElse_ifContext is an interface to support dynamic dispatch.
type IElse_ifContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ELSE returns the _ELSE token.
	Get_ELSE() antlr.Token

	// Set_ELSE sets the _ELSE token.
	Set_ELSE(antlr.Token)

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// Get_bloque returns the _bloque rule contexts.
	Get_bloque() IBloqueContext

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// Set_bloque sets the _bloque rule contexts.
	Set_bloque(IBloqueContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsElse_ifContext differentiates from other interfaces.
	IsElse_ifContext()
}

type Else_ifContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	ex         Ast.Instruccion
	_ELSE      antlr.Token
	_expresion IExpresionContext
	_bloque    IBloqueContext
}

func NewEmptyElse_ifContext() *Else_ifContext {
	var p = new(Else_ifContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_else_if
	return p
}

func (*Else_ifContext) IsElse_ifContext() {}

func NewElse_ifContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Else_ifContext {
	var p = new(Else_ifContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_else_if

	return p
}

func (s *Else_ifContext) GetParser() antlr.Parser { return s.parser }

func (s *Else_ifContext) Get_ELSE() antlr.Token { return s._ELSE }

func (s *Else_ifContext) Set_ELSE(v antlr.Token) { s._ELSE = v }

func (s *Else_ifContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *Else_ifContext) Get_bloque() IBloqueContext { return s._bloque }

func (s *Else_ifContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *Else_ifContext) Set_bloque(v IBloqueContext) { s._bloque = v }

func (s *Else_ifContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Else_ifContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Else_ifContext) ELSE() antlr.TerminalNode {
	return s.GetToken(NparserELSE, 0)
}

func (s *Else_ifContext) IF() antlr.TerminalNode {
	return s.GetToken(NparserIF, 0)
}

func (s *Else_ifContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Else_ifContext) Bloque() IBloqueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloqueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloqueContext)
}

func (s *Else_ifContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Else_ifContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Else_if() (localctx IElse_ifContext) {
	localctx = NewElse_ifContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, NparserRULE_else_if)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(486)

		var _m = p.Match(NparserELSE)

		localctx.(*Else_ifContext)._ELSE = _m
	}
	{
		p.SetState(487)
		p.Match(NparserIF)
	}
	{
		p.SetState(488)

		var _x = p.expresion(0)

		localctx.(*Else_ifContext)._expresion = _x
	}
	{
		p.SetState(489)

		var _x = p.Bloque()

		localctx.(*Else_ifContext)._bloque = _x
	}

	fila := (func() int {
		if localctx.(*Else_ifContext).Get_ELSE() == nil {
			return 0
		} else {
			return localctx.(*Else_ifContext).Get_ELSE().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*Else_ifContext).Get_ELSE() == nil {
			return 0
		} else {
			return localctx.(*Else_ifContext).Get_ELSE().GetColumn()
		}
	}())
	columna++
	lista_null := arraylist.New()
	localctx.(*Else_ifContext).ex = exp_ins.NewIF(localctx.(*Else_ifContext).Get_expresion().GetEx(), localctx.(*Else_ifContext).Get_bloque().GetList(), lista_null, Ast.ELSEIF, fila, columna, false)

	return localctx
}

// IControl_if_expContext is an interface to support dynamic dispatch.
type IControl_if_expContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_IF returns the _IF token.
	Get_IF() antlr.Token

	// Set_IF sets the _IF token.
	Set_IF(antlr.Token)

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// GetBloqueIf returns the bloqueIf rule contexts.
	GetBloqueIf() IBloqueContext

	// GetBloqueElse returns the bloqueElse rule contexts.
	GetBloqueElse() IBloqueContext

	// Get_bloque_else_if_exp returns the _bloque_else_if_exp rule contexts.
	Get_bloque_else_if_exp() IBloque_else_if_expContext

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// SetBloqueIf sets the bloqueIf rule contexts.
	SetBloqueIf(IBloqueContext)

	// SetBloqueElse sets the bloqueElse rule contexts.
	SetBloqueElse(IBloqueContext)

	// Set_bloque_else_if_exp sets the _bloque_else_if_exp rule contexts.
	Set_bloque_else_if_exp(IBloque_else_if_expContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsControl_if_expContext differentiates from other interfaces.
	IsControl_if_expContext()
}

type Control_if_expContext struct {
	*antlr.BaseParserRuleContext
	parser              antlr.Parser
	ex                  Ast.Instruccion
	_IF                 antlr.Token
	_expresion          IExpresionContext
	bloqueIf            IBloqueContext
	bloqueElse          IBloqueContext
	_bloque_else_if_exp IBloque_else_if_expContext
}

func NewEmptyControl_if_expContext() *Control_if_expContext {
	var p = new(Control_if_expContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_control_if_exp
	return p
}

func (*Control_if_expContext) IsControl_if_expContext() {}

func NewControl_if_expContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Control_if_expContext {
	var p = new(Control_if_expContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_control_if_exp

	return p
}

func (s *Control_if_expContext) GetParser() antlr.Parser { return s.parser }

func (s *Control_if_expContext) Get_IF() antlr.Token { return s._IF }

func (s *Control_if_expContext) Set_IF(v antlr.Token) { s._IF = v }

func (s *Control_if_expContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *Control_if_expContext) GetBloqueIf() IBloqueContext { return s.bloqueIf }

func (s *Control_if_expContext) GetBloqueElse() IBloqueContext { return s.bloqueElse }

func (s *Control_if_expContext) Get_bloque_else_if_exp() IBloque_else_if_expContext {
	return s._bloque_else_if_exp
}

func (s *Control_if_expContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *Control_if_expContext) SetBloqueIf(v IBloqueContext) { s.bloqueIf = v }

func (s *Control_if_expContext) SetBloqueElse(v IBloqueContext) { s.bloqueElse = v }

func (s *Control_if_expContext) Set_bloque_else_if_exp(v IBloque_else_if_expContext) {
	s._bloque_else_if_exp = v
}

func (s *Control_if_expContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Control_if_expContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Control_if_expContext) IF() antlr.TerminalNode {
	return s.GetToken(NparserIF, 0)
}

func (s *Control_if_expContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Control_if_expContext) AllBloque() []IBloqueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBloqueContext)(nil)).Elem())
	var tst = make([]IBloqueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBloqueContext)
		}
	}

	return tst
}

func (s *Control_if_expContext) Bloque(i int) IBloqueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloqueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBloqueContext)
}

func (s *Control_if_expContext) ELSE() antlr.TerminalNode {
	return s.GetToken(NparserELSE, 0)
}

func (s *Control_if_expContext) Bloque_else_if_exp() IBloque_else_if_expContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloque_else_if_expContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloque_else_if_expContext)
}

func (s *Control_if_expContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Control_if_expContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Control_if_exp() (localctx IControl_if_expContext) {
	localctx = NewControl_if_expContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, NparserRULE_control_if_exp)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(518)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 11, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(492)

			var _m = p.Match(NparserIF)

			localctx.(*Control_if_expContext)._IF = _m
		}
		{
			p.SetState(493)

			var _x = p.expresion(0)

			localctx.(*Control_if_expContext)._expresion = _x
		}
		{
			p.SetState(494)

			var _x = p.Bloque()

			localctx.(*Control_if_expContext).bloqueIf = _x
		}

		fila := (func() int {
			if localctx.(*Control_if_expContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_if_expContext).Get_IF().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Control_if_expContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_if_expContext).Get_IF().GetColumn()
			}
		}())
		columna++
		lista_null := arraylist.New()
		localctx.(*Control_if_expContext).ex = exp_ins.NewIF(localctx.(*Control_if_expContext).Get_expresion().GetEx(), localctx.(*Control_if_expContext).GetBloqueIf().GetList(), lista_null, Ast.IF_EXPRESION, fila, columna, true)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(497)

			var _m = p.Match(NparserIF)

			localctx.(*Control_if_expContext)._IF = _m
		}
		{
			p.SetState(498)

			var _x = p.expresion(0)

			localctx.(*Control_if_expContext)._expresion = _x
		}
		{
			p.SetState(499)

			var _x = p.Bloque()

			localctx.(*Control_if_expContext).bloqueIf = _x
		}
		{
			p.SetState(500)
			p.Match(NparserELSE)
		}
		{
			p.SetState(501)

			var _x = p.Bloque()

			localctx.(*Control_if_expContext).bloqueElse = _x
		}

		fila := (func() int {
			if localctx.(*Control_if_expContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_if_expContext).Get_IF().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Control_if_expContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_if_expContext).Get_IF().GetColumn()
			}
		}())
		columna++
		lista_entonces := arraylist.New()
		lista_null := arraylist.New()
		Else := exp_ins.NewIF(localctx.(*Control_if_expContext).Get_expresion().GetEx(), localctx.(*Control_if_expContext).GetBloqueElse().GetList(), lista_null, Ast.ELSE_EXPRESION, fila, columna, true)
		lista_entonces.Add(Else)
		localctx.(*Control_if_expContext).ex = exp_ins.NewIF(localctx.(*Control_if_expContext).Get_expresion().GetEx(), localctx.(*Control_if_expContext).GetBloqueIf().GetList(), lista_entonces, Ast.IF_EXPRESION, fila, columna, true)

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(504)

			var _m = p.Match(NparserIF)

			localctx.(*Control_if_expContext)._IF = _m
		}
		{
			p.SetState(505)

			var _x = p.expresion(0)

			localctx.(*Control_if_expContext)._expresion = _x
		}
		{
			p.SetState(506)

			var _x = p.Bloque()

			localctx.(*Control_if_expContext).bloqueIf = _x
		}
		{
			p.SetState(507)

			var _x = p.Bloque_else_if_exp()

			localctx.(*Control_if_expContext)._bloque_else_if_exp = _x
		}

		fila := (func() int {
			if localctx.(*Control_if_expContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_if_expContext).Get_IF().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Control_if_expContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_if_expContext).Get_IF().GetColumn()
			}
		}())
		columna++
		lista_entonces := localctx.(*Control_if_expContext).Get_bloque_else_if_exp().GetList()
		localctx.(*Control_if_expContext).ex = exp_ins.NewIF(localctx.(*Control_if_expContext).Get_expresion().GetEx(), localctx.(*Control_if_expContext).GetBloqueIf().GetList(), lista_entonces, Ast.IF_EXPRESION, fila, columna, true)

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(510)

			var _m = p.Match(NparserIF)

			localctx.(*Control_if_expContext)._IF = _m
		}
		{
			p.SetState(511)

			var _x = p.expresion(0)

			localctx.(*Control_if_expContext)._expresion = _x
		}
		{
			p.SetState(512)

			var _x = p.Bloque()

			localctx.(*Control_if_expContext).bloqueIf = _x
		}
		{
			p.SetState(513)

			var _x = p.Bloque_else_if_exp()

			localctx.(*Control_if_expContext)._bloque_else_if_exp = _x
		}
		{
			p.SetState(514)
			p.Match(NparserELSE)
		}
		{
			p.SetState(515)

			var _x = p.Bloque()

			localctx.(*Control_if_expContext).bloqueElse = _x
		}

		fila := (func() int {
			if localctx.(*Control_if_expContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_if_expContext).Get_IF().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Control_if_expContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_if_expContext).Get_IF().GetColumn()
			}
		}())
		columna++
		lista_null := arraylist.New()
		Else := exp_ins.NewIF(localctx.(*Control_if_expContext).Get_expresion().GetEx(), localctx.(*Control_if_expContext).GetBloqueElse().GetList(), lista_null, Ast.ELSE_EXPRESION, fila, columna, true)
		lista_entonces := localctx.(*Control_if_expContext).Get_bloque_else_if_exp().GetList()
		lista_entonces.Add(Else)
		localctx.(*Control_if_expContext).ex = exp_ins.NewIF(localctx.(*Control_if_expContext).Get_expresion().GetEx(), localctx.(*Control_if_expContext).GetBloqueIf().GetList(), lista_entonces, Ast.IF_EXPRESION, fila, columna, true)

	}

	return localctx
}

// IBloque_else_if_expContext is an interface to support dynamic dispatch.
type IBloque_else_if_expContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_else_if_exp returns the _else_if_exp rule contexts.
	Get_else_if_exp() IElse_if_expContext

	// Set_else_if_exp sets the _else_if_exp rule contexts.
	Set_else_if_exp(IElse_if_expContext)

	// GetLista returns the lista rule context list.
	GetLista() []IElse_if_expContext

	// SetLista sets the lista rule context list.
	SetLista([]IElse_if_expContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsBloque_else_if_expContext differentiates from other interfaces.
	IsBloque_else_if_expContext()
}

type Bloque_else_if_expContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	list         *arraylist.List
	_else_if_exp IElse_if_expContext
	lista        []IElse_if_expContext
}

func NewEmptyBloque_else_if_expContext() *Bloque_else_if_expContext {
	var p = new(Bloque_else_if_expContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_bloque_else_if_exp
	return p
}

func (*Bloque_else_if_expContext) IsBloque_else_if_expContext() {}

func NewBloque_else_if_expContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bloque_else_if_expContext {
	var p = new(Bloque_else_if_expContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_bloque_else_if_exp

	return p
}

func (s *Bloque_else_if_expContext) GetParser() antlr.Parser { return s.parser }

func (s *Bloque_else_if_expContext) Get_else_if_exp() IElse_if_expContext { return s._else_if_exp }

func (s *Bloque_else_if_expContext) Set_else_if_exp(v IElse_if_expContext) { s._else_if_exp = v }

func (s *Bloque_else_if_expContext) GetLista() []IElse_if_expContext { return s.lista }

func (s *Bloque_else_if_expContext) SetLista(v []IElse_if_expContext) { s.lista = v }

func (s *Bloque_else_if_expContext) GetList() *arraylist.List { return s.list }

func (s *Bloque_else_if_expContext) SetList(v *arraylist.List) { s.list = v }

func (s *Bloque_else_if_expContext) AllElse_if_exp() []IElse_if_expContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IElse_if_expContext)(nil)).Elem())
	var tst = make([]IElse_if_expContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IElse_if_expContext)
		}
	}

	return tst
}

func (s *Bloque_else_if_expContext) Else_if_exp(i int) IElse_if_expContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElse_if_expContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IElse_if_expContext)
}

func (s *Bloque_else_if_expContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bloque_else_if_expContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Bloque_else_if_exp() (localctx IBloque_else_if_expContext) {
	localctx = NewBloque_else_if_expContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, NparserRULE_bloque_else_if_exp)
	localctx.(*Bloque_else_if_expContext).list = arraylist.New()

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(521)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(520)

				var _x = p.Else_if_exp()

				localctx.(*Bloque_else_if_expContext)._else_if_exp = _x
			}
			localctx.(*Bloque_else_if_expContext).lista = append(localctx.(*Bloque_else_if_expContext).lista, localctx.(*Bloque_else_if_expContext)._else_if_exp)

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(523)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext())
	}

	listas := localctx.(*Bloque_else_if_expContext).GetLista()
	for _, e := range listas {
		localctx.(*Bloque_else_if_expContext).list.Add(e.GetEx())
	}

	return localctx
}

// IElse_if_expContext is an interface to support dynamic dispatch.
type IElse_if_expContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ELSE returns the _ELSE token.
	Get_ELSE() antlr.Token

	// Set_ELSE sets the _ELSE token.
	Set_ELSE(antlr.Token)

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// Get_bloque returns the _bloque rule contexts.
	Get_bloque() IBloqueContext

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// Set_bloque sets the _bloque rule contexts.
	Set_bloque(IBloqueContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsElse_if_expContext differentiates from other interfaces.
	IsElse_if_expContext()
}

type Else_if_expContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	ex         Ast.Instruccion
	_ELSE      antlr.Token
	_expresion IExpresionContext
	_bloque    IBloqueContext
}

func NewEmptyElse_if_expContext() *Else_if_expContext {
	var p = new(Else_if_expContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_else_if_exp
	return p
}

func (*Else_if_expContext) IsElse_if_expContext() {}

func NewElse_if_expContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Else_if_expContext {
	var p = new(Else_if_expContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_else_if_exp

	return p
}

func (s *Else_if_expContext) GetParser() antlr.Parser { return s.parser }

func (s *Else_if_expContext) Get_ELSE() antlr.Token { return s._ELSE }

func (s *Else_if_expContext) Set_ELSE(v antlr.Token) { s._ELSE = v }

func (s *Else_if_expContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *Else_if_expContext) Get_bloque() IBloqueContext { return s._bloque }

func (s *Else_if_expContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *Else_if_expContext) Set_bloque(v IBloqueContext) { s._bloque = v }

func (s *Else_if_expContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Else_if_expContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Else_if_expContext) ELSE() antlr.TerminalNode {
	return s.GetToken(NparserELSE, 0)
}

func (s *Else_if_expContext) IF() antlr.TerminalNode {
	return s.GetToken(NparserIF, 0)
}

func (s *Else_if_expContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Else_if_expContext) Bloque() IBloqueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloqueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloqueContext)
}

func (s *Else_if_expContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Else_if_expContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Else_if_exp() (localctx IElse_if_expContext) {
	localctx = NewElse_if_expContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, NparserRULE_else_if_exp)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(527)

		var _m = p.Match(NparserELSE)

		localctx.(*Else_if_expContext)._ELSE = _m
	}
	{
		p.SetState(528)
		p.Match(NparserIF)
	}
	{
		p.SetState(529)

		var _x = p.expresion(0)

		localctx.(*Else_if_expContext)._expresion = _x
	}
	{
		p.SetState(530)

		var _x = p.Bloque()

		localctx.(*Else_if_expContext)._bloque = _x
	}

	fila := (func() int {
		if localctx.(*Else_if_expContext).Get_ELSE() == nil {
			return 0
		} else {
			return localctx.(*Else_if_expContext).Get_ELSE().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*Else_if_expContext).Get_ELSE() == nil {
			return 0
		} else {
			return localctx.(*Else_if_expContext).Get_ELSE().GetColumn()
		}
	}())
	columna++
	lista_null := arraylist.New()
	localctx.(*Else_if_expContext).ex = exp_ins.NewIF(localctx.(*Else_if_expContext).Get_expresion().GetEx(), localctx.(*Else_if_expContext).Get_bloque().GetList(), lista_null, Ast.ELSEIF_EXPRESION, fila, columna, true)

	return localctx
}

// IControl_expresionContext is an interface to support dynamic dispatch.
type IControl_expresionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_control_if_exp returns the _control_if_exp rule contexts.
	Get_control_if_exp() IControl_if_expContext

	// Get_control_match_exp returns the _control_match_exp rule contexts.
	Get_control_match_exp() IControl_match_expContext

	// Get_control_loop_exp returns the _control_loop_exp rule contexts.
	Get_control_loop_exp() IControl_loop_expContext

	// Set_control_if_exp sets the _control_if_exp rule contexts.
	Set_control_if_exp(IControl_if_expContext)

	// Set_control_match_exp sets the _control_match_exp rule contexts.
	Set_control_match_exp(IControl_match_expContext)

	// Set_control_loop_exp sets the _control_loop_exp rule contexts.
	Set_control_loop_exp(IControl_loop_expContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsControl_expresionContext differentiates from other interfaces.
	IsControl_expresionContext()
}

type Control_expresionContext struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	ex                 Ast.Instruccion
	_control_if_exp    IControl_if_expContext
	_control_match_exp IControl_match_expContext
	_control_loop_exp  IControl_loop_expContext
}

func NewEmptyControl_expresionContext() *Control_expresionContext {
	var p = new(Control_expresionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_control_expresion
	return p
}

func (*Control_expresionContext) IsControl_expresionContext() {}

func NewControl_expresionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Control_expresionContext {
	var p = new(Control_expresionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_control_expresion

	return p
}

func (s *Control_expresionContext) GetParser() antlr.Parser { return s.parser }

func (s *Control_expresionContext) Get_control_if_exp() IControl_if_expContext {
	return s._control_if_exp
}

func (s *Control_expresionContext) Get_control_match_exp() IControl_match_expContext {
	return s._control_match_exp
}

func (s *Control_expresionContext) Get_control_loop_exp() IControl_loop_expContext {
	return s._control_loop_exp
}

func (s *Control_expresionContext) Set_control_if_exp(v IControl_if_expContext) {
	s._control_if_exp = v
}

func (s *Control_expresionContext) Set_control_match_exp(v IControl_match_expContext) {
	s._control_match_exp = v
}

func (s *Control_expresionContext) Set_control_loop_exp(v IControl_loop_expContext) {
	s._control_loop_exp = v
}

func (s *Control_expresionContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Control_expresionContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Control_expresionContext) Control_if_exp() IControl_if_expContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_if_expContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_if_expContext)
}

func (s *Control_expresionContext) Control_match_exp() IControl_match_expContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_match_expContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_match_expContext)
}

func (s *Control_expresionContext) Control_loop_exp() IControl_loop_expContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_loop_expContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_loop_expContext)
}

func (s *Control_expresionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Control_expresionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Control_expresion() (localctx IControl_expresionContext) {
	localctx = NewControl_expresionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, NparserRULE_control_expresion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(542)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case NparserIF:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(533)

			var _x = p.Control_if_exp()

			localctx.(*Control_expresionContext)._control_if_exp = _x
		}
		localctx.(*Control_expresionContext).ex = localctx.(*Control_expresionContext).Get_control_if_exp().GetEx()

	case NparserMATCH:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(536)

			var _x = p.Control_match_exp()

			localctx.(*Control_expresionContext)._control_match_exp = _x
		}
		localctx.(*Control_expresionContext).ex = localctx.(*Control_expresionContext).Get_control_match_exp().GetEx()

	case NparserLOOP:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(539)

			var _x = p.Control_loop_exp()

			localctx.(*Control_expresionContext)._control_loop_exp = _x
		}
		localctx.(*Control_expresionContext).ex = localctx.(*Control_expresionContext).Get_control_loop_exp().GetEx()

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IControl_matchContext is an interface to support dynamic dispatch.
type IControl_matchContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_MATCH returns the _MATCH token.
	Get_MATCH() antlr.Token

	// Set_MATCH sets the _MATCH token.
	Set_MATCH(antlr.Token)

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// Get_control_case returns the _control_case rule contexts.
	Get_control_case() IControl_caseContext

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// Set_control_case sets the _control_case rule contexts.
	Set_control_case(IControl_caseContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsControl_matchContext differentiates from other interfaces.
	IsControl_matchContext()
}

type Control_matchContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	ex            Ast.Instruccion
	_MATCH        antlr.Token
	_expresion    IExpresionContext
	_control_case IControl_caseContext
}

func NewEmptyControl_matchContext() *Control_matchContext {
	var p = new(Control_matchContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_control_match
	return p
}

func (*Control_matchContext) IsControl_matchContext() {}

func NewControl_matchContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Control_matchContext {
	var p = new(Control_matchContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_control_match

	return p
}

func (s *Control_matchContext) GetParser() antlr.Parser { return s.parser }

func (s *Control_matchContext) Get_MATCH() antlr.Token { return s._MATCH }

func (s *Control_matchContext) Set_MATCH(v antlr.Token) { s._MATCH = v }

func (s *Control_matchContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *Control_matchContext) Get_control_case() IControl_caseContext { return s._control_case }

func (s *Control_matchContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *Control_matchContext) Set_control_case(v IControl_caseContext) { s._control_case = v }

func (s *Control_matchContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Control_matchContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Control_matchContext) MATCH() antlr.TerminalNode {
	return s.GetToken(NparserMATCH, 0)
}

func (s *Control_matchContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Control_matchContext) LLAVE_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserLLAVE_IZQ, 0)
}

func (s *Control_matchContext) Control_case() IControl_caseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_caseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_caseContext)
}

func (s *Control_matchContext) LLAVE_DER() antlr.TerminalNode {
	return s.GetToken(NparserLLAVE_DER, 0)
}

func (s *Control_matchContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Control_matchContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Control_match() (localctx IControl_matchContext) {
	localctx = NewControl_matchContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, NparserRULE_control_match)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(544)

		var _m = p.Match(NparserMATCH)

		localctx.(*Control_matchContext)._MATCH = _m
	}
	{
		p.SetState(545)

		var _x = p.expresion(0)

		localctx.(*Control_matchContext)._expresion = _x
	}
	{
		p.SetState(546)
		p.Match(NparserLLAVE_IZQ)
	}
	{
		p.SetState(547)

		var _x = p.Control_case()

		localctx.(*Control_matchContext)._control_case = _x
	}
	{
		p.SetState(548)
		p.Match(NparserLLAVE_DER)
	}

	fila := (func() int {
		if localctx.(*Control_matchContext).Get_MATCH() == nil {
			return 0
		} else {
			return localctx.(*Control_matchContext).Get_MATCH().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*Control_matchContext).Get_MATCH() == nil {
			return 0
		} else {
			return localctx.(*Control_matchContext).Get_MATCH().GetLine()
		}
	}()) - 1
	localctx.(*Control_matchContext).ex = exp_ins.NewMatch(localctx.(*Control_matchContext).Get_expresion().GetEx(), localctx.(*Control_matchContext).Get_control_case().GetList(), Ast.MATCH, fila, columna)

	return localctx
}

// IControl_caseContext is an interface to support dynamic dispatch.
type IControl_caseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_cases returns the _cases rule contexts.
	Get_cases() ICasesContext

	// Set_cases sets the _cases rule contexts.
	Set_cases(ICasesContext)

	// GetLista returns the lista rule context list.
	GetLista() []ICasesContext

	// SetLista sets the lista rule context list.
	SetLista([]ICasesContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsControl_caseContext differentiates from other interfaces.
	IsControl_caseContext()
}

type Control_caseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	list   *arraylist.List
	_cases ICasesContext
	lista  []ICasesContext
}

func NewEmptyControl_caseContext() *Control_caseContext {
	var p = new(Control_caseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_control_case
	return p
}

func (*Control_caseContext) IsControl_caseContext() {}

func NewControl_caseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Control_caseContext {
	var p = new(Control_caseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_control_case

	return p
}

func (s *Control_caseContext) GetParser() antlr.Parser { return s.parser }

func (s *Control_caseContext) Get_cases() ICasesContext { return s._cases }

func (s *Control_caseContext) Set_cases(v ICasesContext) { s._cases = v }

func (s *Control_caseContext) GetLista() []ICasesContext { return s.lista }

func (s *Control_caseContext) SetLista(v []ICasesContext) { s.lista = v }

func (s *Control_caseContext) GetList() *arraylist.List { return s.list }

func (s *Control_caseContext) SetList(v *arraylist.List) { s.list = v }

func (s *Control_caseContext) AllCases() []ICasesContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICasesContext)(nil)).Elem())
	var tst = make([]ICasesContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICasesContext)
		}
	}

	return tst
}

func (s *Control_caseContext) Cases(i int) ICasesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICasesContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICasesContext)
}

func (s *Control_caseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Control_caseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Control_case() (localctx IControl_caseContext) {
	localctx = NewControl_caseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, NparserRULE_control_case)
	localctx.(*Control_caseContext).list = arraylist.New()
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(552)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<NparserVEC)|(1<<NparserVEC_M)|(1<<NparserTRUE)|(1<<NparserFALSE))) != 0) || (((_la-46)&-(0x1f+1)) == 0 && ((1<<uint((_la-46)))&((1<<(NparserNUMERO-46))|(1<<(NparserDECIMAL-46))|(1<<(NparserID-46))|(1<<(NparserDEFAULT-46))|(1<<(NparserRESTA-46))|(1<<(NparserNOT-46)))) != 0) || (((_la-78)&-(0x1f+1)) == 0 && ((1<<uint((_la-78)))&((1<<(NparserPAR_IZQ-78))|(1<<(NparserCADENA-78))|(1<<(NparserCARACTER-78)))) != 0) {
		{
			p.SetState(551)

			var _x = p.Cases()

			localctx.(*Control_caseContext)._cases = _x
		}
		localctx.(*Control_caseContext).lista = append(localctx.(*Control_caseContext).lista, localctx.(*Control_caseContext)._cases)

		p.SetState(554)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	listas := localctx.(*Control_caseContext).GetLista()
	for _, e := range listas {
		localctx.(*Control_caseContext).list.Add(e.GetEx())
	}

	return localctx
}

// ICasesContext is an interface to support dynamic dispatch.
type ICasesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_CASE returns the _CASE token.
	Get_CASE() antlr.Token

	// Set_CASE sets the _CASE token.
	Set_CASE(antlr.Token)

	// Get_case_match returns the _case_match rule contexts.
	Get_case_match() ICase_matchContext

	// Get_bloque returns the _bloque rule contexts.
	Get_bloque() IBloqueContext

	// Set_case_match sets the _case_match rule contexts.
	Set_case_match(ICase_matchContext)

	// Set_bloque sets the _bloque rule contexts.
	Set_bloque(IBloqueContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsCasesContext differentiates from other interfaces.
	IsCasesContext()
}

type CasesContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	ex          Ast.Instruccion
	_case_match ICase_matchContext
	_CASE       antlr.Token
	_bloque     IBloqueContext
}

func NewEmptyCasesContext() *CasesContext {
	var p = new(CasesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_cases
	return p
}

func (*CasesContext) IsCasesContext() {}

func NewCasesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CasesContext {
	var p = new(CasesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_cases

	return p
}

func (s *CasesContext) GetParser() antlr.Parser { return s.parser }

func (s *CasesContext) Get_CASE() antlr.Token { return s._CASE }

func (s *CasesContext) Set_CASE(v antlr.Token) { s._CASE = v }

func (s *CasesContext) Get_case_match() ICase_matchContext { return s._case_match }

func (s *CasesContext) Get_bloque() IBloqueContext { return s._bloque }

func (s *CasesContext) Set_case_match(v ICase_matchContext) { s._case_match = v }

func (s *CasesContext) Set_bloque(v IBloqueContext) { s._bloque = v }

func (s *CasesContext) GetEx() Ast.Instruccion { return s.ex }

func (s *CasesContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *CasesContext) Case_match() ICase_matchContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICase_matchContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICase_matchContext)
}

func (s *CasesContext) CASE() antlr.TerminalNode {
	return s.GetToken(NparserCASE, 0)
}

func (s *CasesContext) Bloque() IBloqueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloqueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloqueContext)
}

func (s *CasesContext) COMA() antlr.TerminalNode {
	return s.GetToken(NparserCOMA, 0)
}

func (s *CasesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CasesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Cases() (localctx ICasesContext) {
	localctx = NewCasesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, NparserRULE_cases)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(558)

		var _x = p.case_match(0)

		localctx.(*CasesContext)._case_match = _x
	}
	{
		p.SetState(559)

		var _m = p.Match(NparserCASE)

		localctx.(*CasesContext)._CASE = _m
	}
	{
		p.SetState(560)

		var _x = p.Bloque()

		localctx.(*CasesContext)._bloque = _x
	}
	{
		p.SetState(561)
		p.Match(NparserCOMA)
	}

	fila := (func() int {
		if localctx.(*CasesContext).Get_CASE() == nil {
			return 0
		} else {
			return localctx.(*CasesContext).Get_CASE().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*CasesContext).Get_CASE() == nil {
			return 0
		} else {
			return localctx.(*CasesContext).Get_CASE().GetLine()
		}
	}()) - 1
	//Verificar si lo que vienen es un default
	listaTemp := localctx.(*CasesContext).Get_case_match().GetList()
	_, tipo := listaTemp.GetValue(0).(Ast.Abstracto).GetTipo()
	if tipo == Ast.DEFAULT {
		localctx.(*CasesContext).ex = exp_ins.NewCase(localctx.(*CasesContext).Get_case_match().GetList(), localctx.(*CasesContext).Get_bloque().GetList(), Ast.CASE, fila, columna, true)
	} else {
		localctx.(*CasesContext).ex = exp_ins.NewCase(localctx.(*CasesContext).Get_case_match().GetList(), localctx.(*CasesContext).Get_bloque().GetList(), Ast.CASE, fila, columna, false)
	}

	return localctx
}

// ICase_matchContext is an interface to support dynamic dispatch.
type ICase_matchContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_DEFAULT returns the _DEFAULT token.
	Get_DEFAULT() antlr.Token

	// Set_DEFAULT sets the _DEFAULT token.
	Set_DEFAULT(antlr.Token)

	// GetLista_cases returns the lista_cases rule contexts.
	GetLista_cases() ICase_matchContext

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// SetLista_cases sets the lista_cases rule contexts.
	SetLista_cases(ICase_matchContext)

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsCase_matchContext differentiates from other interfaces.
	IsCase_matchContext()
}

type Case_matchContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	list        *arraylist.List
	lista_cases ICase_matchContext
	_expresion  IExpresionContext
	_DEFAULT    antlr.Token
}

func NewEmptyCase_matchContext() *Case_matchContext {
	var p = new(Case_matchContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_case_match
	return p
}

func (*Case_matchContext) IsCase_matchContext() {}

func NewCase_matchContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Case_matchContext {
	var p = new(Case_matchContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_case_match

	return p
}

func (s *Case_matchContext) GetParser() antlr.Parser { return s.parser }

func (s *Case_matchContext) Get_DEFAULT() antlr.Token { return s._DEFAULT }

func (s *Case_matchContext) Set_DEFAULT(v antlr.Token) { s._DEFAULT = v }

func (s *Case_matchContext) GetLista_cases() ICase_matchContext { return s.lista_cases }

func (s *Case_matchContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *Case_matchContext) SetLista_cases(v ICase_matchContext) { s.lista_cases = v }

func (s *Case_matchContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *Case_matchContext) GetList() *arraylist.List { return s.list }

func (s *Case_matchContext) SetList(v *arraylist.List) { s.list = v }

func (s *Case_matchContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Case_matchContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(NparserDEFAULT, 0)
}

func (s *Case_matchContext) O() antlr.TerminalNode {
	return s.GetToken(NparserO, 0)
}

func (s *Case_matchContext) Case_match() ICase_matchContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICase_matchContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICase_matchContext)
}

func (s *Case_matchContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Case_matchContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Case_match() (localctx ICase_matchContext) {
	return p.case_match(0)
}

func (p *Nparser) case_match(_p int) (localctx ICase_matchContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewCase_matchContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ICase_matchContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 38
	p.EnterRecursionRule(localctx, 38, NparserRULE_case_match, _p)
	localctx.(*Case_matchContext).list = arraylist.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(570)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case NparserVEC, NparserVEC_M, NparserTRUE, NparserFALSE, NparserNUMERO, NparserDECIMAL, NparserID, NparserRESTA, NparserNOT, NparserPAR_IZQ, NparserCADENA, NparserCARACTER:
		{
			p.SetState(565)

			var _x = p.expresion(0)

			localctx.(*Case_matchContext)._expresion = _x
		}

		localctx.(*Case_matchContext).list.Add(localctx.(*Case_matchContext).Get_expresion().GetEx())

	case NparserDEFAULT:
		{
			p.SetState(568)

			var _m = p.Match(NparserDEFAULT)

			localctx.(*Case_matchContext)._DEFAULT = _m
		}

		fila := (func() int {
			if localctx.(*Case_matchContext).Get_DEFAULT() == nil {
				return 0
			} else {
				return localctx.(*Case_matchContext).Get_DEFAULT().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Case_matchContext).Get_DEFAULT() == nil {
				return 0
			} else {
				return localctx.(*Case_matchContext).Get_DEFAULT().GetColumn()
			}
		}())
		expresion := expresiones.NewPrimitivo(false, Ast.DEFAULT, fila, columna)
		localctx.(*Case_matchContext).list.Add(expresion)

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(579)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 16, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewCase_matchContext(p, _parentctx, _parentState)
			localctx.(*Case_matchContext).lista_cases = _prevctx
			p.PushNewRecursionContext(localctx, _startState, NparserRULE_case_match)
			p.SetState(572)

			if !(p.Precpred(p.GetParserRuleContext(), 3)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
			}
			{
				p.SetState(573)
				p.Match(NparserO)
			}
			{
				p.SetState(574)

				var _x = p.expresion(0)

				localctx.(*Case_matchContext)._expresion = _x
			}

			localctx.(*Case_matchContext).GetLista_cases().GetList().Add(localctx.(*Case_matchContext).Get_expresion().GetEx())
			localctx.(*Case_matchContext).list = localctx.(*Case_matchContext).GetLista_cases().GetList()

		}
		p.SetState(581)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 16, p.GetParserRuleContext())
	}

	return localctx
}

// IControl_match_expContext is an interface to support dynamic dispatch.
type IControl_match_expContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_MATCH returns the _MATCH token.
	Get_MATCH() antlr.Token

	// Set_MATCH sets the _MATCH token.
	Set_MATCH(antlr.Token)

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// Get_control_case_exp returns the _control_case_exp rule contexts.
	Get_control_case_exp() IControl_case_expContext

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// Set_control_case_exp sets the _control_case_exp rule contexts.
	Set_control_case_exp(IControl_case_expContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsControl_match_expContext differentiates from other interfaces.
	IsControl_match_expContext()
}

type Control_match_expContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	ex                Ast.Instruccion
	_MATCH            antlr.Token
	_expresion        IExpresionContext
	_control_case_exp IControl_case_expContext
}

func NewEmptyControl_match_expContext() *Control_match_expContext {
	var p = new(Control_match_expContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_control_match_exp
	return p
}

func (*Control_match_expContext) IsControl_match_expContext() {}

func NewControl_match_expContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Control_match_expContext {
	var p = new(Control_match_expContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_control_match_exp

	return p
}

func (s *Control_match_expContext) GetParser() antlr.Parser { return s.parser }

func (s *Control_match_expContext) Get_MATCH() antlr.Token { return s._MATCH }

func (s *Control_match_expContext) Set_MATCH(v antlr.Token) { s._MATCH = v }

func (s *Control_match_expContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *Control_match_expContext) Get_control_case_exp() IControl_case_expContext {
	return s._control_case_exp
}

func (s *Control_match_expContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *Control_match_expContext) Set_control_case_exp(v IControl_case_expContext) {
	s._control_case_exp = v
}

func (s *Control_match_expContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Control_match_expContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Control_match_expContext) MATCH() antlr.TerminalNode {
	return s.GetToken(NparserMATCH, 0)
}

func (s *Control_match_expContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Control_match_expContext) LLAVE_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserLLAVE_IZQ, 0)
}

func (s *Control_match_expContext) Control_case_exp() IControl_case_expContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_case_expContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_case_expContext)
}

func (s *Control_match_expContext) LLAVE_DER() antlr.TerminalNode {
	return s.GetToken(NparserLLAVE_DER, 0)
}

func (s *Control_match_expContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Control_match_expContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Control_match_exp() (localctx IControl_match_expContext) {
	localctx = NewControl_match_expContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, NparserRULE_control_match_exp)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(582)

		var _m = p.Match(NparserMATCH)

		localctx.(*Control_match_expContext)._MATCH = _m
	}
	{
		p.SetState(583)

		var _x = p.expresion(0)

		localctx.(*Control_match_expContext)._expresion = _x
	}
	{
		p.SetState(584)
		p.Match(NparserLLAVE_IZQ)
	}
	{
		p.SetState(585)

		var _x = p.Control_case_exp()

		localctx.(*Control_match_expContext)._control_case_exp = _x
	}
	{
		p.SetState(586)
		p.Match(NparserLLAVE_DER)
	}

	fila := (func() int {
		if localctx.(*Control_match_expContext).Get_MATCH() == nil {
			return 0
		} else {
			return localctx.(*Control_match_expContext).Get_MATCH().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*Control_match_expContext).Get_MATCH() == nil {
			return 0
		} else {
			return localctx.(*Control_match_expContext).Get_MATCH().GetLine()
		}
	}()) - 1
	localctx.(*Control_match_expContext).ex = exp_ins.NewMatch(localctx.(*Control_match_expContext).Get_expresion().GetEx(), localctx.(*Control_match_expContext).Get_control_case_exp().GetList(), Ast.MATCH_EXPRESION, fila, columna)

	return localctx
}

// IControl_case_expContext is an interface to support dynamic dispatch.
type IControl_case_expContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_cases_exp returns the _cases_exp rule contexts.
	Get_cases_exp() ICases_expContext

	// Set_cases_exp sets the _cases_exp rule contexts.
	Set_cases_exp(ICases_expContext)

	// GetLista returns the lista rule context list.
	GetLista() []ICases_expContext

	// SetLista sets the lista rule context list.
	SetLista([]ICases_expContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsControl_case_expContext differentiates from other interfaces.
	IsControl_case_expContext()
}

type Control_case_expContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	list       *arraylist.List
	_cases_exp ICases_expContext
	lista      []ICases_expContext
}

func NewEmptyControl_case_expContext() *Control_case_expContext {
	var p = new(Control_case_expContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_control_case_exp
	return p
}

func (*Control_case_expContext) IsControl_case_expContext() {}

func NewControl_case_expContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Control_case_expContext {
	var p = new(Control_case_expContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_control_case_exp

	return p
}

func (s *Control_case_expContext) GetParser() antlr.Parser { return s.parser }

func (s *Control_case_expContext) Get_cases_exp() ICases_expContext { return s._cases_exp }

func (s *Control_case_expContext) Set_cases_exp(v ICases_expContext) { s._cases_exp = v }

func (s *Control_case_expContext) GetLista() []ICases_expContext { return s.lista }

func (s *Control_case_expContext) SetLista(v []ICases_expContext) { s.lista = v }

func (s *Control_case_expContext) GetList() *arraylist.List { return s.list }

func (s *Control_case_expContext) SetList(v *arraylist.List) { s.list = v }

func (s *Control_case_expContext) AllCases_exp() []ICases_expContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICases_expContext)(nil)).Elem())
	var tst = make([]ICases_expContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICases_expContext)
		}
	}

	return tst
}

func (s *Control_case_expContext) Cases_exp(i int) ICases_expContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICases_expContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICases_expContext)
}

func (s *Control_case_expContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Control_case_expContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Control_case_exp() (localctx IControl_case_expContext) {
	localctx = NewControl_case_expContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, NparserRULE_control_case_exp)
	localctx.(*Control_case_expContext).list = arraylist.New()
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(590)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<NparserVEC)|(1<<NparserVEC_M)|(1<<NparserTRUE)|(1<<NparserFALSE))) != 0) || (((_la-46)&-(0x1f+1)) == 0 && ((1<<uint((_la-46)))&((1<<(NparserNUMERO-46))|(1<<(NparserDECIMAL-46))|(1<<(NparserID-46))|(1<<(NparserDEFAULT-46))|(1<<(NparserRESTA-46))|(1<<(NparserNOT-46)))) != 0) || (((_la-78)&-(0x1f+1)) == 0 && ((1<<uint((_la-78)))&((1<<(NparserPAR_IZQ-78))|(1<<(NparserCADENA-78))|(1<<(NparserCARACTER-78)))) != 0) {
		{
			p.SetState(589)

			var _x = p.Cases_exp()

			localctx.(*Control_case_expContext)._cases_exp = _x
		}
		localctx.(*Control_case_expContext).lista = append(localctx.(*Control_case_expContext).lista, localctx.(*Control_case_expContext)._cases_exp)

		p.SetState(592)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	listas := localctx.(*Control_case_expContext).GetLista()
	for _, e := range listas {
		localctx.(*Control_case_expContext).list.Add(e.GetEx())
	}

	return localctx
}

// ICases_expContext is an interface to support dynamic dispatch.
type ICases_expContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_CASE returns the _CASE token.
	Get_CASE() antlr.Token

	// Set_CASE sets the _CASE token.
	Set_CASE(antlr.Token)

	// Get_case_match_exp returns the _case_match_exp rule contexts.
	Get_case_match_exp() ICase_match_expContext

	// Get_bloque returns the _bloque rule contexts.
	Get_bloque() IBloqueContext

	// Set_case_match_exp sets the _case_match_exp rule contexts.
	Set_case_match_exp(ICase_match_expContext)

	// Set_bloque sets the _bloque rule contexts.
	Set_bloque(IBloqueContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsCases_expContext differentiates from other interfaces.
	IsCases_expContext()
}

type Cases_expContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	ex              Ast.Instruccion
	_case_match_exp ICase_match_expContext
	_CASE           antlr.Token
	_bloque         IBloqueContext
}

func NewEmptyCases_expContext() *Cases_expContext {
	var p = new(Cases_expContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_cases_exp
	return p
}

func (*Cases_expContext) IsCases_expContext() {}

func NewCases_expContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cases_expContext {
	var p = new(Cases_expContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_cases_exp

	return p
}

func (s *Cases_expContext) GetParser() antlr.Parser { return s.parser }

func (s *Cases_expContext) Get_CASE() antlr.Token { return s._CASE }

func (s *Cases_expContext) Set_CASE(v antlr.Token) { s._CASE = v }

func (s *Cases_expContext) Get_case_match_exp() ICase_match_expContext { return s._case_match_exp }

func (s *Cases_expContext) Get_bloque() IBloqueContext { return s._bloque }

func (s *Cases_expContext) Set_case_match_exp(v ICase_match_expContext) { s._case_match_exp = v }

func (s *Cases_expContext) Set_bloque(v IBloqueContext) { s._bloque = v }

func (s *Cases_expContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Cases_expContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Cases_expContext) Case_match_exp() ICase_match_expContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICase_match_expContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICase_match_expContext)
}

func (s *Cases_expContext) CASE() antlr.TerminalNode {
	return s.GetToken(NparserCASE, 0)
}

func (s *Cases_expContext) Bloque() IBloqueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloqueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloqueContext)
}

func (s *Cases_expContext) COMA() antlr.TerminalNode {
	return s.GetToken(NparserCOMA, 0)
}

func (s *Cases_expContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cases_expContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Cases_exp() (localctx ICases_expContext) {
	localctx = NewCases_expContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, NparserRULE_cases_exp)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(596)

		var _x = p.case_match_exp(0)

		localctx.(*Cases_expContext)._case_match_exp = _x
	}
	{
		p.SetState(597)

		var _m = p.Match(NparserCASE)

		localctx.(*Cases_expContext)._CASE = _m
	}
	{
		p.SetState(598)

		var _x = p.Bloque()

		localctx.(*Cases_expContext)._bloque = _x
	}
	{
		p.SetState(599)
		p.Match(NparserCOMA)
	}

	fila := (func() int {
		if localctx.(*Cases_expContext).Get_CASE() == nil {
			return 0
		} else {
			return localctx.(*Cases_expContext).Get_CASE().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*Cases_expContext).Get_CASE() == nil {
			return 0
		} else {
			return localctx.(*Cases_expContext).Get_CASE().GetLine()
		}
	}()) - 1
	//Verificar si lo que vienen es un default
	listaTemp := localctx.(*Cases_expContext).Get_case_match_exp().GetList()
	_, tipo := listaTemp.GetValue(0).(Ast.Abstracto).GetTipo()
	if tipo == Ast.DEFAULT {
		localctx.(*Cases_expContext).ex = exp_ins.NewCase(localctx.(*Cases_expContext).Get_case_match_exp().GetList(), localctx.(*Cases_expContext).Get_bloque().GetList(), Ast.CASE_EXPRESION, fila, columna, true)
	} else {
		localctx.(*Cases_expContext).ex = exp_ins.NewCase(localctx.(*Cases_expContext).Get_case_match_exp().GetList(), localctx.(*Cases_expContext).Get_bloque().GetList(), Ast.CASE_EXPRESION, fila, columna, false)
	}

	return localctx
}

// ICase_match_expContext is an interface to support dynamic dispatch.
type ICase_match_expContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_DEFAULT returns the _DEFAULT token.
	Get_DEFAULT() antlr.Token

	// Set_DEFAULT sets the _DEFAULT token.
	Set_DEFAULT(antlr.Token)

	// GetLista_cases returns the lista_cases rule contexts.
	GetLista_cases() ICase_match_expContext

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// SetLista_cases sets the lista_cases rule contexts.
	SetLista_cases(ICase_match_expContext)

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsCase_match_expContext differentiates from other interfaces.
	IsCase_match_expContext()
}

type Case_match_expContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	list        *arraylist.List
	lista_cases ICase_match_expContext
	_expresion  IExpresionContext
	_DEFAULT    antlr.Token
}

func NewEmptyCase_match_expContext() *Case_match_expContext {
	var p = new(Case_match_expContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_case_match_exp
	return p
}

func (*Case_match_expContext) IsCase_match_expContext() {}

func NewCase_match_expContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Case_match_expContext {
	var p = new(Case_match_expContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_case_match_exp

	return p
}

func (s *Case_match_expContext) GetParser() antlr.Parser { return s.parser }

func (s *Case_match_expContext) Get_DEFAULT() antlr.Token { return s._DEFAULT }

func (s *Case_match_expContext) Set_DEFAULT(v antlr.Token) { s._DEFAULT = v }

func (s *Case_match_expContext) GetLista_cases() ICase_match_expContext { return s.lista_cases }

func (s *Case_match_expContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *Case_match_expContext) SetLista_cases(v ICase_match_expContext) { s.lista_cases = v }

func (s *Case_match_expContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *Case_match_expContext) GetList() *arraylist.List { return s.list }

func (s *Case_match_expContext) SetList(v *arraylist.List) { s.list = v }

func (s *Case_match_expContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Case_match_expContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(NparserDEFAULT, 0)
}

func (s *Case_match_expContext) O() antlr.TerminalNode {
	return s.GetToken(NparserO, 0)
}

func (s *Case_match_expContext) Case_match_exp() ICase_match_expContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICase_match_expContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICase_match_expContext)
}

func (s *Case_match_expContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Case_match_expContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Case_match_exp() (localctx ICase_match_expContext) {
	return p.case_match_exp(0)
}

func (p *Nparser) case_match_exp(_p int) (localctx ICase_match_expContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewCase_match_expContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ICase_match_expContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 46
	p.EnterRecursionRule(localctx, 46, NparserRULE_case_match_exp, _p)
	localctx.(*Case_match_expContext).list = arraylist.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(608)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case NparserVEC, NparserVEC_M, NparserTRUE, NparserFALSE, NparserNUMERO, NparserDECIMAL, NparserID, NparserRESTA, NparserNOT, NparserPAR_IZQ, NparserCADENA, NparserCARACTER:
		{
			p.SetState(603)

			var _x = p.expresion(0)

			localctx.(*Case_match_expContext)._expresion = _x
		}

		localctx.(*Case_match_expContext).list.Add(localctx.(*Case_match_expContext).Get_expresion().GetEx())

	case NparserDEFAULT:
		{
			p.SetState(606)

			var _m = p.Match(NparserDEFAULT)

			localctx.(*Case_match_expContext)._DEFAULT = _m
		}

		fila := (func() int {
			if localctx.(*Case_match_expContext).Get_DEFAULT() == nil {
				return 0
			} else {
				return localctx.(*Case_match_expContext).Get_DEFAULT().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Case_match_expContext).Get_DEFAULT() == nil {
				return 0
			} else {
				return localctx.(*Case_match_expContext).Get_DEFAULT().GetColumn()
			}
		}())
		expresion := expresiones.NewPrimitivo(false, Ast.DEFAULT, fila, columna)
		localctx.(*Case_match_expContext).list.Add(expresion)

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(617)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 19, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewCase_match_expContext(p, _parentctx, _parentState)
			localctx.(*Case_match_expContext).lista_cases = _prevctx
			p.PushNewRecursionContext(localctx, _startState, NparserRULE_case_match_exp)
			p.SetState(610)

			if !(p.Precpred(p.GetParserRuleContext(), 3)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
			}
			{
				p.SetState(611)
				p.Match(NparserO)
			}
			{
				p.SetState(612)

				var _x = p.expresion(0)

				localctx.(*Case_match_expContext)._expresion = _x
			}

			localctx.(*Case_match_expContext).GetLista_cases().GetList().Add(localctx.(*Case_match_expContext).Get_expresion().GetEx())
			localctx.(*Case_match_expContext).list = localctx.(*Case_match_expContext).GetLista_cases().GetList()

		}
		p.SetState(619)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 19, p.GetParserRuleContext())
	}

	return localctx
}

// IIreturnContext is an interface to support dynamic dispatch.
type IIreturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_RETURN returns the _RETURN token.
	Get_RETURN() antlr.Token

	// Set_RETURN sets the _RETURN token.
	Set_RETURN(antlr.Token)

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsIreturnContext differentiates from other interfaces.
	IsIreturnContext()
}

type IreturnContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	ex         Ast.Instruccion
	_RETURN    antlr.Token
	_expresion IExpresionContext
}

func NewEmptyIreturnContext() *IreturnContext {
	var p = new(IreturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_ireturn
	return p
}

func (*IreturnContext) IsIreturnContext() {}

func NewIreturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IreturnContext {
	var p = new(IreturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_ireturn

	return p
}

func (s *IreturnContext) GetParser() antlr.Parser { return s.parser }

func (s *IreturnContext) Get_RETURN() antlr.Token { return s._RETURN }

func (s *IreturnContext) Set_RETURN(v antlr.Token) { s._RETURN = v }

func (s *IreturnContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *IreturnContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *IreturnContext) GetEx() Ast.Instruccion { return s.ex }

func (s *IreturnContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *IreturnContext) RETURN() antlr.TerminalNode {
	return s.GetToken(NparserRETURN, 0)
}

func (s *IreturnContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *IreturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IreturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Ireturn() (localctx IIreturnContext) {
	localctx = NewIreturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, NparserRULE_ireturn)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(626)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 20, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(620)

			var _m = p.Match(NparserRETURN)

			localctx.(*IreturnContext)._RETURN = _m
		}

		fila := (func() int {
			if localctx.(*IreturnContext).Get_RETURN() == nil {
				return 0
			} else {
				return localctx.(*IreturnContext).Get_RETURN().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*IreturnContext).Get_RETURN() == nil {
				return 0
			} else {
				return localctx.(*IreturnContext).Get_RETURN().GetColumn()
			}
		}())
		localctx.(*IreturnContext).ex = transferencia.NewReturn(Ast.RETURN, nil, fila, columna)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(622)

			var _m = p.Match(NparserRETURN)

			localctx.(*IreturnContext)._RETURN = _m
		}
		{
			p.SetState(623)

			var _x = p.expresion(0)

			localctx.(*IreturnContext)._expresion = _x
		}

		fila := (func() int {
			if localctx.(*IreturnContext).Get_RETURN() == nil {
				return 0
			} else {
				return localctx.(*IreturnContext).Get_RETURN().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*IreturnContext).Get_RETURN() == nil {
				return 0
			} else {
				return localctx.(*IreturnContext).Get_RETURN().GetColumn()
			}
		}())
		localctx.(*IreturnContext).ex = transferencia.NewReturn(Ast.RETURN_EXPRESION, localctx.(*IreturnContext).Get_expresion().GetEx(), fila, columna)

	}

	return localctx
}

// IIbreakContext is an interface to support dynamic dispatch.
type IIbreakContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_BREAK returns the _BREAK token.
	Get_BREAK() antlr.Token

	// Set_BREAK sets the _BREAK token.
	Set_BREAK(antlr.Token)

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsIbreakContext differentiates from other interfaces.
	IsIbreakContext()
}

type IbreakContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	ex         Ast.Instruccion
	_BREAK     antlr.Token
	_expresion IExpresionContext
}

func NewEmptyIbreakContext() *IbreakContext {
	var p = new(IbreakContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_ibreak
	return p
}

func (*IbreakContext) IsIbreakContext() {}

func NewIbreakContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IbreakContext {
	var p = new(IbreakContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_ibreak

	return p
}

func (s *IbreakContext) GetParser() antlr.Parser { return s.parser }

func (s *IbreakContext) Get_BREAK() antlr.Token { return s._BREAK }

func (s *IbreakContext) Set_BREAK(v antlr.Token) { s._BREAK = v }

func (s *IbreakContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *IbreakContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *IbreakContext) GetEx() Ast.Instruccion { return s.ex }

func (s *IbreakContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *IbreakContext) BREAK() antlr.TerminalNode {
	return s.GetToken(NparserBREAK, 0)
}

func (s *IbreakContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *IbreakContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IbreakContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Ibreak() (localctx IIbreakContext) {
	localctx = NewIbreakContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, NparserRULE_ibreak)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(634)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 21, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(628)

			var _m = p.Match(NparserBREAK)

			localctx.(*IbreakContext)._BREAK = _m
		}

		fila := (func() int {
			if localctx.(*IbreakContext).Get_BREAK() == nil {
				return 0
			} else {
				return localctx.(*IbreakContext).Get_BREAK().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*IbreakContext).Get_BREAK() == nil {
				return 0
			} else {
				return localctx.(*IbreakContext).Get_BREAK().GetColumn()
			}
		}())
		localctx.(*IbreakContext).ex = transferencia.NewBreak(Ast.BREAK, nil, fila, columna)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(630)

			var _m = p.Match(NparserBREAK)

			localctx.(*IbreakContext)._BREAK = _m
		}
		{
			p.SetState(631)

			var _x = p.expresion(0)

			localctx.(*IbreakContext)._expresion = _x
		}

		fila := (func() int {
			if localctx.(*IbreakContext).Get_BREAK() == nil {
				return 0
			} else {
				return localctx.(*IbreakContext).Get_BREAK().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*IbreakContext).Get_BREAK() == nil {
				return 0
			} else {
				return localctx.(*IbreakContext).Get_BREAK().GetColumn()
			}
		}())
		localctx.(*IbreakContext).ex = transferencia.NewBreak(Ast.BREAK_EXPRESION, localctx.(*IbreakContext).Get_expresion().GetEx(), fila, columna)

	}

	return localctx
}

// IIcontinueContext is an interface to support dynamic dispatch.
type IIcontinueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_CONTINUE returns the _CONTINUE token.
	Get_CONTINUE() antlr.Token

	// Set_CONTINUE sets the _CONTINUE token.
	Set_CONTINUE(antlr.Token)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsIcontinueContext differentiates from other interfaces.
	IsIcontinueContext()
}

type IcontinueContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	ex        Ast.Instruccion
	_CONTINUE antlr.Token
}

func NewEmptyIcontinueContext() *IcontinueContext {
	var p = new(IcontinueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_icontinue
	return p
}

func (*IcontinueContext) IsIcontinueContext() {}

func NewIcontinueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IcontinueContext {
	var p = new(IcontinueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_icontinue

	return p
}

func (s *IcontinueContext) GetParser() antlr.Parser { return s.parser }

func (s *IcontinueContext) Get_CONTINUE() antlr.Token { return s._CONTINUE }

func (s *IcontinueContext) Set_CONTINUE(v antlr.Token) { s._CONTINUE = v }

func (s *IcontinueContext) GetEx() Ast.Instruccion { return s.ex }

func (s *IcontinueContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *IcontinueContext) CONTINUE() antlr.TerminalNode {
	return s.GetToken(NparserCONTINUE, 0)
}

func (s *IcontinueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IcontinueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Icontinue() (localctx IIcontinueContext) {
	localctx = NewIcontinueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, NparserRULE_icontinue)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(636)

		var _m = p.Match(NparserCONTINUE)

		localctx.(*IcontinueContext)._CONTINUE = _m
	}

	fila := (func() int {
		if localctx.(*IcontinueContext).Get_CONTINUE() == nil {
			return 0
		} else {
			return localctx.(*IcontinueContext).Get_CONTINUE().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*IcontinueContext).Get_CONTINUE() == nil {
			return 0
		} else {
			return localctx.(*IcontinueContext).Get_CONTINUE().GetColumn()
		}
	}())
	localctx.(*IcontinueContext).ex = transferencia.NewContinue(fila, columna)

	return localctx
}

// IControl_loopContext is an interface to support dynamic dispatch.
type IControl_loopContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_LOOP returns the _LOOP token.
	Get_LOOP() antlr.Token

	// Set_LOOP sets the _LOOP token.
	Set_LOOP(antlr.Token)

	// Get_bloque returns the _bloque rule contexts.
	Get_bloque() IBloqueContext

	// Set_bloque sets the _bloque rule contexts.
	Set_bloque(IBloqueContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsControl_loopContext differentiates from other interfaces.
	IsControl_loopContext()
}

type Control_loopContext struct {
	*antlr.BaseParserRuleContext
	parser  antlr.Parser
	ex      Ast.Instruccion
	_LOOP   antlr.Token
	_bloque IBloqueContext
}

func NewEmptyControl_loopContext() *Control_loopContext {
	var p = new(Control_loopContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_control_loop
	return p
}

func (*Control_loopContext) IsControl_loopContext() {}

func NewControl_loopContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Control_loopContext {
	var p = new(Control_loopContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_control_loop

	return p
}

func (s *Control_loopContext) GetParser() antlr.Parser { return s.parser }

func (s *Control_loopContext) Get_LOOP() antlr.Token { return s._LOOP }

func (s *Control_loopContext) Set_LOOP(v antlr.Token) { s._LOOP = v }

func (s *Control_loopContext) Get_bloque() IBloqueContext { return s._bloque }

func (s *Control_loopContext) Set_bloque(v IBloqueContext) { s._bloque = v }

func (s *Control_loopContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Control_loopContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Control_loopContext) LOOP() antlr.TerminalNode {
	return s.GetToken(NparserLOOP, 0)
}

func (s *Control_loopContext) Bloque() IBloqueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloqueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloqueContext)
}

func (s *Control_loopContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Control_loopContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Control_loop() (localctx IControl_loopContext) {
	localctx = NewControl_loopContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, NparserRULE_control_loop)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(639)

		var _m = p.Match(NparserLOOP)

		localctx.(*Control_loopContext)._LOOP = _m
	}
	{
		p.SetState(640)

		var _x = p.Bloque()

		localctx.(*Control_loopContext)._bloque = _x
	}

	fila := (func() int {
		if localctx.(*Control_loopContext).Get_LOOP() == nil {
			return 0
		} else {
			return localctx.(*Control_loopContext).Get_LOOP().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*Control_loopContext).Get_LOOP() == nil {
			return 0
		} else {
			return localctx.(*Control_loopContext).Get_LOOP().GetColumn()
		}
	}())
	localctx.(*Control_loopContext).ex = bucles.NewLoop(Ast.LOOP, localctx.(*Control_loopContext).Get_bloque().GetList(), fila, columna)

	return localctx
}

// IControl_loop_expContext is an interface to support dynamic dispatch.
type IControl_loop_expContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_LOOP returns the _LOOP token.
	Get_LOOP() antlr.Token

	// Set_LOOP sets the _LOOP token.
	Set_LOOP(antlr.Token)

	// Get_bloque returns the _bloque rule contexts.
	Get_bloque() IBloqueContext

	// Set_bloque sets the _bloque rule contexts.
	Set_bloque(IBloqueContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsControl_loop_expContext differentiates from other interfaces.
	IsControl_loop_expContext()
}

type Control_loop_expContext struct {
	*antlr.BaseParserRuleContext
	parser  antlr.Parser
	ex      Ast.Instruccion
	_LOOP   antlr.Token
	_bloque IBloqueContext
}

func NewEmptyControl_loop_expContext() *Control_loop_expContext {
	var p = new(Control_loop_expContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_control_loop_exp
	return p
}

func (*Control_loop_expContext) IsControl_loop_expContext() {}

func NewControl_loop_expContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Control_loop_expContext {
	var p = new(Control_loop_expContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_control_loop_exp

	return p
}

func (s *Control_loop_expContext) GetParser() antlr.Parser { return s.parser }

func (s *Control_loop_expContext) Get_LOOP() antlr.Token { return s._LOOP }

func (s *Control_loop_expContext) Set_LOOP(v antlr.Token) { s._LOOP = v }

func (s *Control_loop_expContext) Get_bloque() IBloqueContext { return s._bloque }

func (s *Control_loop_expContext) Set_bloque(v IBloqueContext) { s._bloque = v }

func (s *Control_loop_expContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Control_loop_expContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Control_loop_expContext) LOOP() antlr.TerminalNode {
	return s.GetToken(NparserLOOP, 0)
}

func (s *Control_loop_expContext) Bloque() IBloqueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloqueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloqueContext)
}

func (s *Control_loop_expContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Control_loop_expContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Control_loop_exp() (localctx IControl_loop_expContext) {
	localctx = NewControl_loop_expContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, NparserRULE_control_loop_exp)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(643)

		var _m = p.Match(NparserLOOP)

		localctx.(*Control_loop_expContext)._LOOP = _m
	}
	{
		p.SetState(644)

		var _x = p.Bloque()

		localctx.(*Control_loop_expContext)._bloque = _x
	}

	fila := (func() int {
		if localctx.(*Control_loop_expContext).Get_LOOP() == nil {
			return 0
		} else {
			return localctx.(*Control_loop_expContext).Get_LOOP().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*Control_loop_expContext).Get_LOOP() == nil {
			return 0
		} else {
			return localctx.(*Control_loop_expContext).Get_LOOP().GetColumn()
		}
	}())
	localctx.(*Control_loop_expContext).ex = bucles.NewLoop(Ast.LOOP_EXPRESION, localctx.(*Control_loop_expContext).Get_bloque().GetList(), fila, columna)

	return localctx
}

// IPrintNormalContext is an interface to support dynamic dispatch.
type IPrintNormalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_PRINT returns the _PRINT token.
	Get_PRINT() antlr.Token

	// Set_PRINT sets the _PRINT token.
	Set_PRINT(antlr.Token)

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsPrintNormalContext differentiates from other interfaces.
	IsPrintNormalContext()
}

type PrintNormalContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	ex         Ast.Instruccion
	_PRINT     antlr.Token
	_expresion IExpresionContext
}

func NewEmptyPrintNormalContext() *PrintNormalContext {
	var p = new(PrintNormalContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_printNormal
	return p
}

func (*PrintNormalContext) IsPrintNormalContext() {}

func NewPrintNormalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrintNormalContext {
	var p = new(PrintNormalContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_printNormal

	return p
}

func (s *PrintNormalContext) GetParser() antlr.Parser { return s.parser }

func (s *PrintNormalContext) Get_PRINT() antlr.Token { return s._PRINT }

func (s *PrintNormalContext) Set_PRINT(v antlr.Token) { s._PRINT = v }

func (s *PrintNormalContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *PrintNormalContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *PrintNormalContext) GetEx() Ast.Instruccion { return s.ex }

func (s *PrintNormalContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *PrintNormalContext) PRINT() antlr.TerminalNode {
	return s.GetToken(NparserPRINT, 0)
}

func (s *PrintNormalContext) PAR_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserPAR_IZQ, 0)
}

func (s *PrintNormalContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *PrintNormalContext) PAR_DER() antlr.TerminalNode {
	return s.GetToken(NparserPAR_DER, 0)
}

func (s *PrintNormalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrintNormalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) PrintNormal() (localctx IPrintNormalContext) {
	localctx = NewPrintNormalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, NparserRULE_printNormal)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(647)

		var _m = p.Match(NparserPRINT)

		localctx.(*PrintNormalContext)._PRINT = _m
	}
	{
		p.SetState(648)
		p.Match(NparserPAR_IZQ)
	}
	{
		p.SetState(649)

		var _x = p.expresion(0)

		localctx.(*PrintNormalContext)._expresion = _x
	}
	{
		p.SetState(650)
		p.Match(NparserPAR_DER)
	}

	fila := (func() int {
		if localctx.(*PrintNormalContext).Get_PRINT() == nil {
			return 0
		} else {
			return localctx.(*PrintNormalContext).Get_PRINT().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*PrintNormalContext).Get_PRINT() == nil {
			return 0
		} else {
			return localctx.(*PrintNormalContext).Get_PRINT().GetColumn()
		}
	}())
	localctx.(*PrintNormalContext).ex = instrucciones.NewPrint(localctx.(*PrintNormalContext).Get_expresion().GetEx(), Ast.PRINT, fila, columna)

	return localctx
}

// IPrintFormatoContext is an interface to support dynamic dispatch.
type IPrintFormatoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_PRINT returns the _PRINT token.
	Get_PRINT() antlr.Token

	// Get_CADENA returns the _CADENA token.
	Get_CADENA() antlr.Token

	// Set_PRINT sets the _PRINT token.
	Set_PRINT(antlr.Token)

	// Set_CADENA sets the _CADENA token.
	Set_CADENA(antlr.Token)

	// GetExpresiones returns the expresiones rule contexts.
	GetExpresiones() IElementosPrintContext

	// SetExpresiones sets the expresiones rule contexts.
	SetExpresiones(IElementosPrintContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsPrintFormatoContext differentiates from other interfaces.
	IsPrintFormatoContext()
}

type PrintFormatoContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	ex          Ast.Instruccion
	_PRINT      antlr.Token
	_CADENA     antlr.Token
	expresiones IElementosPrintContext
}

func NewEmptyPrintFormatoContext() *PrintFormatoContext {
	var p = new(PrintFormatoContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_printFormato
	return p
}

func (*PrintFormatoContext) IsPrintFormatoContext() {}

func NewPrintFormatoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrintFormatoContext {
	var p = new(PrintFormatoContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_printFormato

	return p
}

func (s *PrintFormatoContext) GetParser() antlr.Parser { return s.parser }

func (s *PrintFormatoContext) Get_PRINT() antlr.Token { return s._PRINT }

func (s *PrintFormatoContext) Get_CADENA() antlr.Token { return s._CADENA }

func (s *PrintFormatoContext) Set_PRINT(v antlr.Token) { s._PRINT = v }

func (s *PrintFormatoContext) Set_CADENA(v antlr.Token) { s._CADENA = v }

func (s *PrintFormatoContext) GetExpresiones() IElementosPrintContext { return s.expresiones }

func (s *PrintFormatoContext) SetExpresiones(v IElementosPrintContext) { s.expresiones = v }

func (s *PrintFormatoContext) GetEx() Ast.Instruccion { return s.ex }

func (s *PrintFormatoContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *PrintFormatoContext) PRINT() antlr.TerminalNode {
	return s.GetToken(NparserPRINT, 0)
}

func (s *PrintFormatoContext) PAR_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserPAR_IZQ, 0)
}

func (s *PrintFormatoContext) CADENA() antlr.TerminalNode {
	return s.GetToken(NparserCADENA, 0)
}

func (s *PrintFormatoContext) COMA() antlr.TerminalNode {
	return s.GetToken(NparserCOMA, 0)
}

func (s *PrintFormatoContext) PAR_DER() antlr.TerminalNode {
	return s.GetToken(NparserPAR_DER, 0)
}

func (s *PrintFormatoContext) ElementosPrint() IElementosPrintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementosPrintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementosPrintContext)
}

func (s *PrintFormatoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrintFormatoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) PrintFormato() (localctx IPrintFormatoContext) {
	localctx = NewPrintFormatoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, NparserRULE_printFormato)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(653)

		var _m = p.Match(NparserPRINT)

		localctx.(*PrintFormatoContext)._PRINT = _m
	}
	{
		p.SetState(654)
		p.Match(NparserPAR_IZQ)
	}
	{
		p.SetState(655)

		var _m = p.Match(NparserCADENA)

		localctx.(*PrintFormatoContext)._CADENA = _m
	}
	{
		p.SetState(656)
		p.Match(NparserCOMA)
	}
	{
		p.SetState(657)

		var _x = p.elementosPrint(0)

		localctx.(*PrintFormatoContext).expresiones = _x
	}
	{
		p.SetState(658)
		p.Match(NparserPAR_DER)
	}

	fila := (func() int {
		if localctx.(*PrintFormatoContext).Get_PRINT() == nil {
			return 0
		} else {
			return localctx.(*PrintFormatoContext).Get_PRINT().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*PrintFormatoContext).Get_PRINT() == nil {
			return 0
		} else {
			return localctx.(*PrintFormatoContext).Get_PRINT().GetColumn()
		}
	}())
	valor := (func() string {
		if localctx.(*PrintFormatoContext).Get_CADENA() == nil {
			return ""
		} else {
			return localctx.(*PrintFormatoContext).Get_CADENA().GetText()
		}
	}())
	valor = valor[1 : len(valor)-1]
	localctx.(*PrintFormatoContext).ex = instrucciones.NewPrintF(localctx.(*PrintFormatoContext).GetExpresiones().GetList(), valor, Ast.PRINTF, fila, columna)

	return localctx
}

// IElementosPrintContext is an interface to support dynamic dispatch.
type IElementosPrintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLista_elementos returns the lista_elementos rule contexts.
	GetLista_elementos() IElementosPrintContext

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// SetLista_elementos sets the lista_elementos rule contexts.
	SetLista_elementos(IElementosPrintContext)

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsElementosPrintContext differentiates from other interfaces.
	IsElementosPrintContext()
}

type ElementosPrintContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	list            *arraylist.List
	lista_elementos IElementosPrintContext
	_expresion      IExpresionContext
}

func NewEmptyElementosPrintContext() *ElementosPrintContext {
	var p = new(ElementosPrintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_elementosPrint
	return p
}

func (*ElementosPrintContext) IsElementosPrintContext() {}

func NewElementosPrintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElementosPrintContext {
	var p = new(ElementosPrintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_elementosPrint

	return p
}

func (s *ElementosPrintContext) GetParser() antlr.Parser { return s.parser }

func (s *ElementosPrintContext) GetLista_elementos() IElementosPrintContext { return s.lista_elementos }

func (s *ElementosPrintContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *ElementosPrintContext) SetLista_elementos(v IElementosPrintContext) { s.lista_elementos = v }

func (s *ElementosPrintContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *ElementosPrintContext) GetList() *arraylist.List { return s.list }

func (s *ElementosPrintContext) SetList(v *arraylist.List) { s.list = v }

func (s *ElementosPrintContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *ElementosPrintContext) COMA() antlr.TerminalNode {
	return s.GetToken(NparserCOMA, 0)
}

func (s *ElementosPrintContext) ElementosPrint() IElementosPrintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementosPrintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementosPrintContext)
}

func (s *ElementosPrintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElementosPrintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) ElementosPrint() (localctx IElementosPrintContext) {
	return p.elementosPrint(0)
}

func (p *Nparser) elementosPrint(_p int) (localctx IElementosPrintContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewElementosPrintContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IElementosPrintContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 62
	p.EnterRecursionRule(localctx, 62, NparserRULE_elementosPrint, _p)
	localctx.(*ElementosPrintContext).list = arraylist.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(662)

		var _x = p.expresion(0)

		localctx.(*ElementosPrintContext)._expresion = _x
	}

	localctx.(*ElementosPrintContext).list.Add(localctx.(*ElementosPrintContext).Get_expresion().GetEx())

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(672)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 22, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewElementosPrintContext(p, _parentctx, _parentState)
			localctx.(*ElementosPrintContext).lista_elementos = _prevctx
			p.PushNewRecursionContext(localctx, _startState, NparserRULE_elementosPrint)
			p.SetState(665)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(666)
				p.Match(NparserCOMA)
			}
			{
				p.SetState(667)

				var _x = p.expresion(0)

				localctx.(*ElementosPrintContext)._expresion = _x
			}

			localctx.(*ElementosPrintContext).GetLista_elementos().GetList().Add(localctx.(*ElementosPrintContext).Get_expresion().GetEx())
			localctx.(*ElementosPrintContext).list = localctx.(*ElementosPrintContext).GetLista_elementos().GetList()

		}
		p.SetState(674)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 22, p.GetParserRuleContext())
	}

	return localctx
}

// IControl_whileContext is an interface to support dynamic dispatch.
type IControl_whileContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_WHILE returns the _WHILE token.
	Get_WHILE() antlr.Token

	// Set_WHILE sets the _WHILE token.
	Set_WHILE(antlr.Token)

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// Get_bloque returns the _bloque rule contexts.
	Get_bloque() IBloqueContext

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// Set_bloque sets the _bloque rule contexts.
	Set_bloque(IBloqueContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsControl_whileContext differentiates from other interfaces.
	IsControl_whileContext()
}

type Control_whileContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	ex         Ast.Instruccion
	_WHILE     antlr.Token
	_expresion IExpresionContext
	_bloque    IBloqueContext
}

func NewEmptyControl_whileContext() *Control_whileContext {
	var p = new(Control_whileContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_control_while
	return p
}

func (*Control_whileContext) IsControl_whileContext() {}

func NewControl_whileContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Control_whileContext {
	var p = new(Control_whileContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_control_while

	return p
}

func (s *Control_whileContext) GetParser() antlr.Parser { return s.parser }

func (s *Control_whileContext) Get_WHILE() antlr.Token { return s._WHILE }

func (s *Control_whileContext) Set_WHILE(v antlr.Token) { s._WHILE = v }

func (s *Control_whileContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *Control_whileContext) Get_bloque() IBloqueContext { return s._bloque }

func (s *Control_whileContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *Control_whileContext) Set_bloque(v IBloqueContext) { s._bloque = v }

func (s *Control_whileContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Control_whileContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Control_whileContext) WHILE() antlr.TerminalNode {
	return s.GetToken(NparserWHILE, 0)
}

func (s *Control_whileContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Control_whileContext) Bloque() IBloqueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloqueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloqueContext)
}

func (s *Control_whileContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Control_whileContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Control_while() (localctx IControl_whileContext) {
	localctx = NewControl_whileContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, NparserRULE_control_while)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(675)

		var _m = p.Match(NparserWHILE)

		localctx.(*Control_whileContext)._WHILE = _m
	}
	{
		p.SetState(676)

		var _x = p.expresion(0)

		localctx.(*Control_whileContext)._expresion = _x
	}
	{
		p.SetState(677)

		var _x = p.Bloque()

		localctx.(*Control_whileContext)._bloque = _x
	}

	fila := (func() int {
		if localctx.(*Control_whileContext).Get_WHILE() == nil {
			return 0
		} else {
			return localctx.(*Control_whileContext).Get_WHILE().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*Control_whileContext).Get_WHILE() == nil {
			return 0
		} else {
			return localctx.(*Control_whileContext).Get_WHILE().GetColumn()
		}
	}())
	localctx.(*Control_whileContext).ex = bucles.NewWhile(Ast.WHILE, localctx.(*Control_whileContext).Get_expresion().GetEx(), localctx.(*Control_whileContext).Get_bloque().GetList(), fila, columna)

	return localctx
}

// IParametros_funcionContext is an interface to support dynamic dispatch.
type IParametros_funcionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLista_elementos returns the lista_elementos rule contexts.
	GetLista_elementos() IParametros_funcionContext

	// Get_parametro returns the _parametro rule contexts.
	Get_parametro() IParametroContext

	// SetLista_elementos sets the lista_elementos rule contexts.
	SetLista_elementos(IParametros_funcionContext)

	// Set_parametro sets the _parametro rule contexts.
	Set_parametro(IParametroContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsParametros_funcionContext differentiates from other interfaces.
	IsParametros_funcionContext()
}

type Parametros_funcionContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	list            *arraylist.List
	lista_elementos IParametros_funcionContext
	_parametro      IParametroContext
}

func NewEmptyParametros_funcionContext() *Parametros_funcionContext {
	var p = new(Parametros_funcionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_parametros_funcion
	return p
}

func (*Parametros_funcionContext) IsParametros_funcionContext() {}

func NewParametros_funcionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Parametros_funcionContext {
	var p = new(Parametros_funcionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_parametros_funcion

	return p
}

func (s *Parametros_funcionContext) GetParser() antlr.Parser { return s.parser }

func (s *Parametros_funcionContext) GetLista_elementos() IParametros_funcionContext {
	return s.lista_elementos
}

func (s *Parametros_funcionContext) Get_parametro() IParametroContext { return s._parametro }

func (s *Parametros_funcionContext) SetLista_elementos(v IParametros_funcionContext) {
	s.lista_elementos = v
}

func (s *Parametros_funcionContext) Set_parametro(v IParametroContext) { s._parametro = v }

func (s *Parametros_funcionContext) GetList() *arraylist.List { return s.list }

func (s *Parametros_funcionContext) SetList(v *arraylist.List) { s.list = v }

func (s *Parametros_funcionContext) Parametro() IParametroContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParametroContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParametroContext)
}

func (s *Parametros_funcionContext) COMA() antlr.TerminalNode {
	return s.GetToken(NparserCOMA, 0)
}

func (s *Parametros_funcionContext) Parametros_funcion() IParametros_funcionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParametros_funcionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParametros_funcionContext)
}

func (s *Parametros_funcionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Parametros_funcionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Parametros_funcion() (localctx IParametros_funcionContext) {
	return p.parametros_funcion(0)
}

func (p *Nparser) parametros_funcion(_p int) (localctx IParametros_funcionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewParametros_funcionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IParametros_funcionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 66
	p.EnterRecursionRule(localctx, 66, NparserRULE_parametros_funcion, _p)
	localctx.(*Parametros_funcionContext).list = arraylist.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(681)

		var _x = p.Parametro()

		localctx.(*Parametros_funcionContext)._parametro = _x
	}

	localctx.(*Parametros_funcionContext).list.Add(localctx.(*Parametros_funcionContext).Get_parametro().GetEx())

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(691)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 23, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewParametros_funcionContext(p, _parentctx, _parentState)
			localctx.(*Parametros_funcionContext).lista_elementos = _prevctx
			p.PushNewRecursionContext(localctx, _startState, NparserRULE_parametros_funcion)
			p.SetState(684)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(685)
				p.Match(NparserCOMA)
			}
			{
				p.SetState(686)

				var _x = p.Parametro()

				localctx.(*Parametros_funcionContext)._parametro = _x
			}

			localctx.(*Parametros_funcionContext).GetLista_elementos().GetList().Add(localctx.(*Parametros_funcionContext).Get_parametro().GetEx())
			localctx.(*Parametros_funcionContext).list = localctx.(*Parametros_funcionContext).GetLista_elementos().GetList()

		}
		p.SetState(693)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 23, p.GetParserRuleContext())
	}

	return localctx
}

// IParametroContext is an interface to support dynamic dispatch.
type IParametroContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_MUT returns the _MUT token.
	Get_MUT() antlr.Token

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Set_MUT sets the _MUT token.
	Set_MUT(antlr.Token)

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// Get_tipo_dato returns the _tipo_dato rule contexts.
	Get_tipo_dato() ITipo_datoContext

	// Set_tipo_dato sets the _tipo_dato rule contexts.
	Set_tipo_dato(ITipo_datoContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Expresion

	// SetEx sets the ex attribute.
	SetEx(Ast.Expresion)

	// IsParametroContext differentiates from other interfaces.
	IsParametroContext()
}

type ParametroContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	ex         Ast.Expresion
	_MUT       antlr.Token
	_ID        antlr.Token
	_tipo_dato ITipo_datoContext
}

func NewEmptyParametroContext() *ParametroContext {
	var p = new(ParametroContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_parametro
	return p
}

func (*ParametroContext) IsParametroContext() {}

func NewParametroContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParametroContext {
	var p = new(ParametroContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_parametro

	return p
}

func (s *ParametroContext) GetParser() antlr.Parser { return s.parser }

func (s *ParametroContext) Get_MUT() antlr.Token { return s._MUT }

func (s *ParametroContext) Get_ID() antlr.Token { return s._ID }

func (s *ParametroContext) Set_MUT(v antlr.Token) { s._MUT = v }

func (s *ParametroContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *ParametroContext) Get_tipo_dato() ITipo_datoContext { return s._tipo_dato }

func (s *ParametroContext) Set_tipo_dato(v ITipo_datoContext) { s._tipo_dato = v }

func (s *ParametroContext) GetEx() Ast.Expresion { return s.ex }

func (s *ParametroContext) SetEx(v Ast.Expresion) { s.ex = v }

func (s *ParametroContext) MUT() antlr.TerminalNode {
	return s.GetToken(NparserMUT, 0)
}

func (s *ParametroContext) ID() antlr.TerminalNode {
	return s.GetToken(NparserID, 0)
}

func (s *ParametroContext) DOSPUNTOS() antlr.TerminalNode {
	return s.GetToken(NparserDOSPUNTOS, 0)
}

func (s *ParametroContext) Tipo_dato() ITipo_datoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipo_datoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipo_datoContext)
}

func (s *ParametroContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParametroContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Parametro() (localctx IParametroContext) {
	localctx = NewParametroContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, NparserRULE_parametro)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(705)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case NparserMUT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(694)

			var _m = p.Match(NparserMUT)

			localctx.(*ParametroContext)._MUT = _m
		}
		{
			p.SetState(695)

			var _m = p.Match(NparserID)

			localctx.(*ParametroContext)._ID = _m
		}
		{
			p.SetState(696)
			p.Match(NparserDOSPUNTOS)
		}
		{
			p.SetState(697)

			var _x = p.Tipo_dato()

			localctx.(*ParametroContext)._tipo_dato = _x
		}

		fila := (func() int {
			if localctx.(*ParametroContext).Get_MUT() == nil {
				return 0
			} else {
				return localctx.(*ParametroContext).Get_MUT().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ParametroContext).Get_MUT() == nil {
				return 0
			} else {
				return localctx.(*ParametroContext).Get_MUT().GetColumn()
			}
		}())
		localctx.(*ParametroContext).ex = simbolos.NewParametro((func() string {
			if localctx.(*ParametroContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*ParametroContext).Get_ID().GetText()
			}
		}()), Ast.PARAMETRO, localctx.(*ParametroContext).Get_tipo_dato().GetEx(), true, fila, columna)

	case NparserID:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(700)

			var _m = p.Match(NparserID)

			localctx.(*ParametroContext)._ID = _m
		}
		{
			p.SetState(701)
			p.Match(NparserDOSPUNTOS)
		}
		{
			p.SetState(702)

			var _x = p.Tipo_dato()

			localctx.(*ParametroContext)._tipo_dato = _x
		}

		fila := (func() int {
			if localctx.(*ParametroContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*ParametroContext).Get_ID().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ParametroContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*ParametroContext).Get_ID().GetColumn()
			}
		}())
		localctx.(*ParametroContext).ex = simbolos.NewParametro((func() string {
			if localctx.(*ParametroContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*ParametroContext).Get_ID().GetText()
			}
		}()), Ast.PARAMETRO, localctx.(*ParametroContext).Get_tipo_dato().GetEx(), false, fila, columna)

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ILlamada_funcionContext is an interface to support dynamic dispatch.
type ILlamada_funcionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// Get_parametros_llamada returns the _parametros_llamada rule contexts.
	Get_parametros_llamada() IParametros_llamadaContext

	// Set_parametros_llamada sets the _parametros_llamada rule contexts.
	Set_parametros_llamada(IParametros_llamadaContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Expresion

	// SetEx sets the ex attribute.
	SetEx(Ast.Expresion)

	// IsLlamada_funcionContext differentiates from other interfaces.
	IsLlamada_funcionContext()
}

type Llamada_funcionContext struct {
	*antlr.BaseParserRuleContext
	parser              antlr.Parser
	ex                  Ast.Expresion
	_ID                 antlr.Token
	_parametros_llamada IParametros_llamadaContext
}

func NewEmptyLlamada_funcionContext() *Llamada_funcionContext {
	var p = new(Llamada_funcionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_llamada_funcion
	return p
}

func (*Llamada_funcionContext) IsLlamada_funcionContext() {}

func NewLlamada_funcionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Llamada_funcionContext {
	var p = new(Llamada_funcionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_llamada_funcion

	return p
}

func (s *Llamada_funcionContext) GetParser() antlr.Parser { return s.parser }

func (s *Llamada_funcionContext) Get_ID() antlr.Token { return s._ID }

func (s *Llamada_funcionContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *Llamada_funcionContext) Get_parametros_llamada() IParametros_llamadaContext {
	return s._parametros_llamada
}

func (s *Llamada_funcionContext) Set_parametros_llamada(v IParametros_llamadaContext) {
	s._parametros_llamada = v
}

func (s *Llamada_funcionContext) GetEx() Ast.Expresion { return s.ex }

func (s *Llamada_funcionContext) SetEx(v Ast.Expresion) { s.ex = v }

func (s *Llamada_funcionContext) ID() antlr.TerminalNode {
	return s.GetToken(NparserID, 0)
}

func (s *Llamada_funcionContext) PAR_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserPAR_IZQ, 0)
}

func (s *Llamada_funcionContext) Parametros_llamada() IParametros_llamadaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParametros_llamadaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParametros_llamadaContext)
}

func (s *Llamada_funcionContext) PAR_DER() antlr.TerminalNode {
	return s.GetToken(NparserPAR_DER, 0)
}

func (s *Llamada_funcionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Llamada_funcionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Llamada_funcion() (localctx ILlamada_funcionContext) {
	localctx = NewLlamada_funcionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, NparserRULE_llamada_funcion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(717)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 25, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(707)

			var _m = p.Match(NparserID)

			localctx.(*Llamada_funcionContext)._ID = _m
		}
		{
			p.SetState(708)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(709)

			var _x = p.parametros_llamada(0)

			localctx.(*Llamada_funcionContext)._parametros_llamada = _x
		}
		{
			p.SetState(710)
			p.Match(NparserPAR_DER)
		}

		fila := (func() int {
			if localctx.(*Llamada_funcionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Llamada_funcionContext).Get_ID().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Llamada_funcionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Llamada_funcionContext).Get_ID().GetColumn()
			}
		}())
		id := expresiones.NewIdentificador((func() string {
			if localctx.(*Llamada_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Llamada_funcionContext).Get_ID().GetText()
			}
		}()), Ast.IDENTIFICADOR, fila, columna)
		localctx.(*Llamada_funcionContext).ex = simbolos.NewLlamadaFuncion(id, localctx.(*Llamada_funcionContext).Get_parametros_llamada().GetList(), Ast.LLAMADA_FUNCION, fila, columna)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(713)

			var _m = p.Match(NparserID)

			localctx.(*Llamada_funcionContext)._ID = _m
		}
		{
			p.SetState(714)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(715)
			p.Match(NparserPAR_DER)
		}

		fila := (func() int {
			if localctx.(*Llamada_funcionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Llamada_funcionContext).Get_ID().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Llamada_funcionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Llamada_funcionContext).Get_ID().GetColumn()
			}
		}())
		params := arraylist.New()
		id := expresiones.NewIdentificador((func() string {
			if localctx.(*Llamada_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Llamada_funcionContext).Get_ID().GetText()
			}
		}()), Ast.IDENTIFICADOR, fila, columna)
		localctx.(*Llamada_funcionContext).ex = simbolos.NewLlamadaFuncion(id, params, Ast.LLAMADA_FUNCION, fila, columna)

	}

	return localctx
}

// IParametros_llamadaContext is an interface to support dynamic dispatch.
type IParametros_llamadaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLista_elementos returns the lista_elementos rule contexts.
	GetLista_elementos() IParametros_llamadaContext

	// Get_parametro_llamada_referencia returns the _parametro_llamada_referencia rule contexts.
	Get_parametro_llamada_referencia() IParametro_llamada_referenciaContext

	// SetLista_elementos sets the lista_elementos rule contexts.
	SetLista_elementos(IParametros_llamadaContext)

	// Set_parametro_llamada_referencia sets the _parametro_llamada_referencia rule contexts.
	Set_parametro_llamada_referencia(IParametro_llamada_referenciaContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsParametros_llamadaContext differentiates from other interfaces.
	IsParametros_llamadaContext()
}

type Parametros_llamadaContext struct {
	*antlr.BaseParserRuleContext
	parser                        antlr.Parser
	list                          *arraylist.List
	lista_elementos               IParametros_llamadaContext
	_parametro_llamada_referencia IParametro_llamada_referenciaContext
}

func NewEmptyParametros_llamadaContext() *Parametros_llamadaContext {
	var p = new(Parametros_llamadaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_parametros_llamada
	return p
}

func (*Parametros_llamadaContext) IsParametros_llamadaContext() {}

func NewParametros_llamadaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Parametros_llamadaContext {
	var p = new(Parametros_llamadaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_parametros_llamada

	return p
}

func (s *Parametros_llamadaContext) GetParser() antlr.Parser { return s.parser }

func (s *Parametros_llamadaContext) GetLista_elementos() IParametros_llamadaContext {
	return s.lista_elementos
}

func (s *Parametros_llamadaContext) Get_parametro_llamada_referencia() IParametro_llamada_referenciaContext {
	return s._parametro_llamada_referencia
}

func (s *Parametros_llamadaContext) SetLista_elementos(v IParametros_llamadaContext) {
	s.lista_elementos = v
}

func (s *Parametros_llamadaContext) Set_parametro_llamada_referencia(v IParametro_llamada_referenciaContext) {
	s._parametro_llamada_referencia = v
}

func (s *Parametros_llamadaContext) GetList() *arraylist.List { return s.list }

func (s *Parametros_llamadaContext) SetList(v *arraylist.List) { s.list = v }

func (s *Parametros_llamadaContext) Parametro_llamada_referencia() IParametro_llamada_referenciaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParametro_llamada_referenciaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParametro_llamada_referenciaContext)
}

func (s *Parametros_llamadaContext) COMA() antlr.TerminalNode {
	return s.GetToken(NparserCOMA, 0)
}

func (s *Parametros_llamadaContext) Parametros_llamada() IParametros_llamadaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParametros_llamadaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParametros_llamadaContext)
}

func (s *Parametros_llamadaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Parametros_llamadaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Parametros_llamada() (localctx IParametros_llamadaContext) {
	return p.parametros_llamada(0)
}

func (p *Nparser) parametros_llamada(_p int) (localctx IParametros_llamadaContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewParametros_llamadaContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IParametros_llamadaContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 72
	p.EnterRecursionRule(localctx, 72, NparserRULE_parametros_llamada, _p)
	localctx.(*Parametros_llamadaContext).list = arraylist.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(720)

		var _x = p.Parametro_llamada_referencia()

		localctx.(*Parametros_llamadaContext)._parametro_llamada_referencia = _x
	}

	localctx.(*Parametros_llamadaContext).list.Add(localctx.(*Parametros_llamadaContext).Get_parametro_llamada_referencia().GetEx())

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(730)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 26, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewParametros_llamadaContext(p, _parentctx, _parentState)
			localctx.(*Parametros_llamadaContext).lista_elementos = _prevctx
			p.PushNewRecursionContext(localctx, _startState, NparserRULE_parametros_llamada)
			p.SetState(723)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(724)
				p.Match(NparserCOMA)
			}
			{
				p.SetState(725)

				var _x = p.Parametro_llamada_referencia()

				localctx.(*Parametros_llamadaContext)._parametro_llamada_referencia = _x
			}

			localctx.(*Parametros_llamadaContext).GetLista_elementos().GetList().Add(localctx.(*Parametros_llamadaContext).Get_parametro_llamada_referencia().GetEx())
			localctx.(*Parametros_llamadaContext).list = localctx.(*Parametros_llamadaContext).GetLista_elementos().GetList()

		}
		p.SetState(732)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 26, p.GetParserRuleContext())
	}

	return localctx
}

// IParametro_llamada_referenciaContext is an interface to support dynamic dispatch.
type IParametro_llamada_referenciaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_AMPERSAND returns the _AMPERSAND token.
	Get_AMPERSAND() antlr.Token

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Set_AMPERSAND sets the _AMPERSAND token.
	Set_AMPERSAND(antlr.Token)

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// GetE returns the e rule contexts.
	GetE() IExpresionContext

	// SetE sets the e rule contexts.
	SetE(IExpresionContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Expresion

	// SetEx sets the ex attribute.
	SetEx(Ast.Expresion)

	// IsParametro_llamada_referenciaContext differentiates from other interfaces.
	IsParametro_llamada_referenciaContext()
}

type Parametro_llamada_referenciaContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	ex         Ast.Expresion
	e          IExpresionContext
	_AMPERSAND antlr.Token
	_ID        antlr.Token
}

func NewEmptyParametro_llamada_referenciaContext() *Parametro_llamada_referenciaContext {
	var p = new(Parametro_llamada_referenciaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_parametro_llamada_referencia
	return p
}

func (*Parametro_llamada_referenciaContext) IsParametro_llamada_referenciaContext() {}

func NewParametro_llamada_referenciaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Parametro_llamada_referenciaContext {
	var p = new(Parametro_llamada_referenciaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_parametro_llamada_referencia

	return p
}

func (s *Parametro_llamada_referenciaContext) GetParser() antlr.Parser { return s.parser }

func (s *Parametro_llamada_referenciaContext) Get_AMPERSAND() antlr.Token { return s._AMPERSAND }

func (s *Parametro_llamada_referenciaContext) Get_ID() antlr.Token { return s._ID }

func (s *Parametro_llamada_referenciaContext) Set_AMPERSAND(v antlr.Token) { s._AMPERSAND = v }

func (s *Parametro_llamada_referenciaContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *Parametro_llamada_referenciaContext) GetE() IExpresionContext { return s.e }

func (s *Parametro_llamada_referenciaContext) SetE(v IExpresionContext) { s.e = v }

func (s *Parametro_llamada_referenciaContext) GetEx() Ast.Expresion { return s.ex }

func (s *Parametro_llamada_referenciaContext) SetEx(v Ast.Expresion) { s.ex = v }

func (s *Parametro_llamada_referenciaContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Parametro_llamada_referenciaContext) AMPERSAND() antlr.TerminalNode {
	return s.GetToken(NparserAMPERSAND, 0)
}

func (s *Parametro_llamada_referenciaContext) MUT() antlr.TerminalNode {
	return s.GetToken(NparserMUT, 0)
}

func (s *Parametro_llamada_referenciaContext) ID() antlr.TerminalNode {
	return s.GetToken(NparserID, 0)
}

func (s *Parametro_llamada_referenciaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Parametro_llamada_referenciaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Parametro_llamada_referencia() (localctx IParametro_llamada_referenciaContext) {
	localctx = NewParametro_llamada_referenciaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, NparserRULE_parametro_llamada_referencia)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(743)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 27, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(733)

			var _x = p.expresion(0)

			localctx.(*Parametro_llamada_referenciaContext).e = _x
		}

		temp := localctx.(*Parametro_llamada_referenciaContext).GetE().GetEx()
		fila := temp.(Ast.Abstracto).GetFila()
		columna := temp.(Ast.Abstracto).GetColumna()
		localctx.(*Parametro_llamada_referenciaContext).ex = simbolos.NewValor(localctx.(*Parametro_llamada_referenciaContext).GetE().GetEx(), Ast.VALOR, false, false, fila, columna)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(736)

			var _m = p.Match(NparserAMPERSAND)

			localctx.(*Parametro_llamada_referenciaContext)._AMPERSAND = _m
		}
		{
			p.SetState(737)
			p.Match(NparserMUT)
		}
		{
			p.SetState(738)

			var _m = p.Match(NparserID)

			localctx.(*Parametro_llamada_referenciaContext)._ID = _m
		}

		fila := (func() int {
			if localctx.(*Parametro_llamada_referenciaContext).Get_AMPERSAND() == nil {
				return 0
			} else {
				return localctx.(*Parametro_llamada_referenciaContext).Get_AMPERSAND().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Parametro_llamada_referenciaContext).Get_AMPERSAND() == nil {
				return 0
			} else {
				return localctx.(*Parametro_llamada_referenciaContext).Get_AMPERSAND().GetColumn()
			}
		}())
		id := expresiones.NewIdentificador((func() string {
			if localctx.(*Parametro_llamada_referenciaContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Parametro_llamada_referenciaContext).Get_ID().GetText()
			}
		}()), Ast.IDENTIFICADOR, fila, columna)
		localctx.(*Parametro_llamada_referenciaContext).ex = simbolos.NewValor(id, Ast.VALOR, true, true, fila, columna)

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(740)

			var _m = p.Match(NparserAMPERSAND)

			localctx.(*Parametro_llamada_referenciaContext)._AMPERSAND = _m
		}
		{
			p.SetState(741)

			var _m = p.Match(NparserID)

			localctx.(*Parametro_llamada_referenciaContext)._ID = _m
		}

		fila := (func() int {
			if localctx.(*Parametro_llamada_referenciaContext).Get_AMPERSAND() == nil {
				return 0
			} else {
				return localctx.(*Parametro_llamada_referenciaContext).Get_AMPERSAND().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Parametro_llamada_referenciaContext).Get_AMPERSAND() == nil {
				return 0
			} else {
				return localctx.(*Parametro_llamada_referenciaContext).Get_AMPERSAND().GetColumn()
			}
		}())
		id := expresiones.NewIdentificador((func() string {
			if localctx.(*Parametro_llamada_referenciaContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Parametro_llamada_referenciaContext).Get_ID().GetText()
			}
		}()), Ast.IDENTIFICADOR, fila, columna)
		localctx.(*Parametro_llamada_referenciaContext).ex = simbolos.NewValor(id, Ast.VALOR, true, false, fila, columna)

	}

	return localctx
}

// IElementos_vectorContext is an interface to support dynamic dispatch.
type IElementos_vectorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLista_elementos returns the lista_elementos rule contexts.
	GetLista_elementos() IElementos_vectorContext

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// SetLista_elementos sets the lista_elementos rule contexts.
	SetLista_elementos(IElementos_vectorContext)

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsElementos_vectorContext differentiates from other interfaces.
	IsElementos_vectorContext()
}

type Elementos_vectorContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	list            *arraylist.List
	lista_elementos IElementos_vectorContext
	_expresion      IExpresionContext
}

func NewEmptyElementos_vectorContext() *Elementos_vectorContext {
	var p = new(Elementos_vectorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_elementos_vector
	return p
}

func (*Elementos_vectorContext) IsElementos_vectorContext() {}

func NewElementos_vectorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Elementos_vectorContext {
	var p = new(Elementos_vectorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_elementos_vector

	return p
}

func (s *Elementos_vectorContext) GetParser() antlr.Parser { return s.parser }

func (s *Elementos_vectorContext) GetLista_elementos() IElementos_vectorContext {
	return s.lista_elementos
}

func (s *Elementos_vectorContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *Elementos_vectorContext) SetLista_elementos(v IElementos_vectorContext) {
	s.lista_elementos = v
}

func (s *Elementos_vectorContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *Elementos_vectorContext) GetList() *arraylist.List { return s.list }

func (s *Elementos_vectorContext) SetList(v *arraylist.List) { s.list = v }

func (s *Elementos_vectorContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Elementos_vectorContext) COMA() antlr.TerminalNode {
	return s.GetToken(NparserCOMA, 0)
}

func (s *Elementos_vectorContext) Elementos_vector() IElementos_vectorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementos_vectorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementos_vectorContext)
}

func (s *Elementos_vectorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Elementos_vectorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Elementos_vector() (localctx IElementos_vectorContext) {
	return p.elementos_vector(0)
}

func (p *Nparser) elementos_vector(_p int) (localctx IElementos_vectorContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewElementos_vectorContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IElementos_vectorContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 76
	p.EnterRecursionRule(localctx, 76, NparserRULE_elementos_vector, _p)
	localctx.(*Elementos_vectorContext).list = arraylist.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(746)

		var _x = p.expresion(0)

		localctx.(*Elementos_vectorContext)._expresion = _x
	}

	localctx.(*Elementos_vectorContext).list.Add(localctx.(*Elementos_vectorContext).Get_expresion().GetEx())

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(756)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 28, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewElementos_vectorContext(p, _parentctx, _parentState)
			localctx.(*Elementos_vectorContext).lista_elementos = _prevctx
			p.PushNewRecursionContext(localctx, _startState, NparserRULE_elementos_vector)
			p.SetState(749)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(750)
				p.Match(NparserCOMA)
			}
			{
				p.SetState(751)

				var _x = p.expresion(0)

				localctx.(*Elementos_vectorContext)._expresion = _x
			}

			localctx.(*Elementos_vectorContext).GetLista_elementos().GetList().Add(localctx.(*Elementos_vectorContext).Get_expresion().GetEx())
			localctx.(*Elementos_vectorContext).list = localctx.(*Elementos_vectorContext).GetLista_elementos().GetList()

		}
		p.SetState(758)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 28, p.GetParserRuleContext())
	}

	return localctx
}

// IMetodos_iniciar_vectorContext is an interface to support dynamic dispatch.
type IMetodos_iniciar_vectorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_VEC returns the _VEC token.
	Get_VEC() antlr.Token

	// Get_VEC_M returns the _VEC_M token.
	Get_VEC_M() antlr.Token

	// Set_VEC sets the _VEC token.
	Set_VEC(antlr.Token)

	// Set_VEC_M sets the _VEC_M token.
	Set_VEC_M(antlr.Token)

	// GetE returns the e rule contexts.
	GetE() IElementos_vectorContext

	// Get_elementos_vector returns the _elementos_vector rule contexts.
	Get_elementos_vector() IElementos_vectorContext

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// SetE sets the e rule contexts.
	SetE(IElementos_vectorContext)

	// Set_elementos_vector sets the _elementos_vector rule contexts.
	Set_elementos_vector(IElementos_vectorContext)

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Expresion

	// SetEx sets the ex attribute.
	SetEx(Ast.Expresion)

	// IsMetodos_iniciar_vectorContext differentiates from other interfaces.
	IsMetodos_iniciar_vectorContext()
}

type Metodos_iniciar_vectorContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	ex                Ast.Expresion
	_VEC              antlr.Token
	_VEC_M            antlr.Token
	e                 IElementos_vectorContext
	_elementos_vector IElementos_vectorContext
	_expresion        IExpresionContext
}

func NewEmptyMetodos_iniciar_vectorContext() *Metodos_iniciar_vectorContext {
	var p = new(Metodos_iniciar_vectorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_metodos_iniciar_vector
	return p
}

func (*Metodos_iniciar_vectorContext) IsMetodos_iniciar_vectorContext() {}

func NewMetodos_iniciar_vectorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Metodos_iniciar_vectorContext {
	var p = new(Metodos_iniciar_vectorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_metodos_iniciar_vector

	return p
}

func (s *Metodos_iniciar_vectorContext) GetParser() antlr.Parser { return s.parser }

func (s *Metodos_iniciar_vectorContext) Get_VEC() antlr.Token { return s._VEC }

func (s *Metodos_iniciar_vectorContext) Get_VEC_M() antlr.Token { return s._VEC_M }

func (s *Metodos_iniciar_vectorContext) Set_VEC(v antlr.Token) { s._VEC = v }

func (s *Metodos_iniciar_vectorContext) Set_VEC_M(v antlr.Token) { s._VEC_M = v }

func (s *Metodos_iniciar_vectorContext) GetE() IElementos_vectorContext { return s.e }

func (s *Metodos_iniciar_vectorContext) Get_elementos_vector() IElementos_vectorContext {
	return s._elementos_vector
}

func (s *Metodos_iniciar_vectorContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *Metodos_iniciar_vectorContext) SetE(v IElementos_vectorContext) { s.e = v }

func (s *Metodos_iniciar_vectorContext) Set_elementos_vector(v IElementos_vectorContext) {
	s._elementos_vector = v
}

func (s *Metodos_iniciar_vectorContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *Metodos_iniciar_vectorContext) GetEx() Ast.Expresion { return s.ex }

func (s *Metodos_iniciar_vectorContext) SetEx(v Ast.Expresion) { s.ex = v }

func (s *Metodos_iniciar_vectorContext) VEC() antlr.TerminalNode {
	return s.GetToken(NparserVEC, 0)
}

func (s *Metodos_iniciar_vectorContext) DOBLE_DOSPUNTOS() antlr.TerminalNode {
	return s.GetToken(NparserDOBLE_DOSPUNTOS, 0)
}

func (s *Metodos_iniciar_vectorContext) NEW() antlr.TerminalNode {
	return s.GetToken(NparserNEW, 0)
}

func (s *Metodos_iniciar_vectorContext) PAR_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserPAR_IZQ, 0)
}

func (s *Metodos_iniciar_vectorContext) PAR_DER() antlr.TerminalNode {
	return s.GetToken(NparserPAR_DER, 0)
}

func (s *Metodos_iniciar_vectorContext) VEC_M() antlr.TerminalNode {
	return s.GetToken(NparserVEC_M, 0)
}

func (s *Metodos_iniciar_vectorContext) NOT() antlr.TerminalNode {
	return s.GetToken(NparserNOT, 0)
}

func (s *Metodos_iniciar_vectorContext) CORCHETE_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserCORCHETE_IZQ, 0)
}

func (s *Metodos_iniciar_vectorContext) CORCHETE_DER() antlr.TerminalNode {
	return s.GetToken(NparserCORCHETE_DER, 0)
}

func (s *Metodos_iniciar_vectorContext) Elementos_vector() IElementos_vectorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementos_vectorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementos_vectorContext)
}

func (s *Metodos_iniciar_vectorContext) WITH_CAPACITY() antlr.TerminalNode {
	return s.GetToken(NparserWITH_CAPACITY, 0)
}

func (s *Metodos_iniciar_vectorContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Metodos_iniciar_vectorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Metodos_iniciar_vectorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Metodos_iniciar_vector() (localctx IMetodos_iniciar_vectorContext) {
	localctx = NewMetodos_iniciar_vectorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, NparserRULE_metodos_iniciar_vector)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(780)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 29, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(759)

			var _m = p.Match(NparserVEC)

			localctx.(*Metodos_iniciar_vectorContext)._VEC = _m
		}
		{
			p.SetState(760)
			p.Match(NparserDOBLE_DOSPUNTOS)
		}
		{
			p.SetState(761)
			p.Match(NparserNEW)
		}
		{
			p.SetState(762)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(763)
			p.Match(NparserPAR_DER)
		}

		fila := (func() int {
			if localctx.(*Metodos_iniciar_vectorContext).Get_VEC() == nil {
				return 0
			} else {
				return localctx.(*Metodos_iniciar_vectorContext).Get_VEC().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Metodos_iniciar_vectorContext).Get_VEC() == nil {
				return 0
			} else {
				return localctx.(*Metodos_iniciar_vectorContext).Get_VEC().GetColumn()
			}
		}())
		vacio := true
		listaTemp := arraylist.New()
		usize := expresiones.NewPrimitivo(0, Ast.USIZE, fila, columna)
		localctx.(*Metodos_iniciar_vectorContext).ex = expresiones.NewVector(Ast.VECTOR, listaTemp, Ast.INDEFINIDO,
			usize, false, false, vacio, fila, columna)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(765)

			var _m = p.Match(NparserVEC_M)

			localctx.(*Metodos_iniciar_vectorContext)._VEC_M = _m
		}
		{
			p.SetState(766)
			p.Match(NparserNOT)
		}
		{
			p.SetState(767)
			p.Match(NparserCORCHETE_IZQ)
		}
		{
			p.SetState(768)

			var _x = p.elementos_vector(0)

			localctx.(*Metodos_iniciar_vectorContext).e = _x
			localctx.(*Metodos_iniciar_vectorContext)._elementos_vector = _x
		}
		{
			p.SetState(769)
			p.Match(NparserCORCHETE_DER)
		}

		fila := (func() int {
			if localctx.(*Metodos_iniciar_vectorContext).Get_VEC_M() == nil {
				return 0
			} else {
				return localctx.(*Metodos_iniciar_vectorContext).Get_VEC_M().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Metodos_iniciar_vectorContext).Get_VEC_M() == nil {
				return 0
			} else {
				return localctx.(*Metodos_iniciar_vectorContext).Get_VEC_M().GetColumn()
			}
		}())
		vacio := true
		listaTemp := localctx.(*Metodos_iniciar_vectorContext).GetE().GetList()
		if listaTemp.Len() > 0 {
			vacio = false
		}
		localctx.(*Metodos_iniciar_vectorContext).ex = expresiones.NewVector(Ast.VECTOR, localctx.(*Metodos_iniciar_vectorContext).Get_elementos_vector().GetList(), Ast.INDEFINIDO,
			Ast.TipoRetornado{Tipo: Ast.LIBRE, Valor: true}, false, false, vacio, fila, columna)

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(772)

			var _m = p.Match(NparserVEC)

			localctx.(*Metodos_iniciar_vectorContext)._VEC = _m
		}
		{
			p.SetState(773)
			p.Match(NparserDOBLE_DOSPUNTOS)
		}
		{
			p.SetState(774)
			p.Match(NparserWITH_CAPACITY)
		}
		{
			p.SetState(775)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(776)

			var _x = p.expresion(0)

			localctx.(*Metodos_iniciar_vectorContext)._expresion = _x
		}
		{
			p.SetState(777)
			p.Match(NparserPAR_DER)
		}

		fila := (func() int {
			if localctx.(*Metodos_iniciar_vectorContext).Get_VEC() == nil {
				return 0
			} else {
				return localctx.(*Metodos_iniciar_vectorContext).Get_VEC().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Metodos_iniciar_vectorContext).Get_VEC() == nil {
				return 0
			} else {
				return localctx.(*Metodos_iniciar_vectorContext).Get_VEC().GetColumn()
			}
		}())
		vacio := true
		listaTemp := arraylist.New()
		localctx.(*Metodos_iniciar_vectorContext).ex = expresiones.NewVector(Ast.VECTOR, listaTemp, Ast.INDEFINIDO,
			localctx.(*Metodos_iniciar_vectorContext).Get_expresion().GetEx(), false, false, vacio, fila, columna)

	}

	return localctx
}

// IMetodos_vectorContext is an interface to support dynamic dispatch.
type IMetodos_vectorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsMetodos_vectorContext differentiates from other interfaces.
	IsMetodos_vectorContext()
}

type Metodos_vectorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	ex     Ast.Instruccion
}

func NewEmptyMetodos_vectorContext() *Metodos_vectorContext {
	var p = new(Metodos_vectorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_metodos_vector
	return p
}

func (*Metodos_vectorContext) IsMetodos_vectorContext() {}

func NewMetodos_vectorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Metodos_vectorContext {
	var p = new(Metodos_vectorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_metodos_vector

	return p
}

func (s *Metodos_vectorContext) GetParser() antlr.Parser { return s.parser }

func (s *Metodos_vectorContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Metodos_vectorContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Metodos_vectorContext) AllExpresion() []IExpresionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpresionContext)(nil)).Elem())
	var tst = make([]IExpresionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpresionContext)
		}
	}

	return tst
}

func (s *Metodos_vectorContext) Expresion(i int) IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Metodos_vectorContext) PUNTO() antlr.TerminalNode {
	return s.GetToken(NparserPUNTO, 0)
}

func (s *Metodos_vectorContext) PUSH() antlr.TerminalNode {
	return s.GetToken(NparserPUSH, 0)
}

func (s *Metodos_vectorContext) PAR_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserPAR_IZQ, 0)
}

func (s *Metodos_vectorContext) PAR_DER() antlr.TerminalNode {
	return s.GetToken(NparserPAR_DER, 0)
}

func (s *Metodos_vectorContext) INSERT() antlr.TerminalNode {
	return s.GetToken(NparserINSERT, 0)
}

func (s *Metodos_vectorContext) COMA() antlr.TerminalNode {
	return s.GetToken(NparserCOMA, 0)
}

func (s *Metodos_vectorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Metodos_vectorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Metodos_vector() (localctx IMetodos_vectorContext) {
	localctx = NewMetodos_vectorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, NparserRULE_metodos_vector)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(798)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 30, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(782)
			p.expresion(0)
		}
		{
			p.SetState(783)
			p.Match(NparserPUNTO)
		}
		{
			p.SetState(784)
			p.Match(NparserPUSH)
		}
		{
			p.SetState(785)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(786)
			p.expresion(0)
		}
		{
			p.SetState(787)
			p.Match(NparserPAR_DER)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(789)
			p.expresion(0)
		}
		{
			p.SetState(790)
			p.Match(NparserPUNTO)
		}
		{
			p.SetState(791)
			p.Match(NparserINSERT)
		}
		{
			p.SetState(792)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(793)
			p.expresion(0)
		}
		{
			p.SetState(794)
			p.Match(NparserCOMA)
		}
		{
			p.SetState(795)
			p.expresion(0)
		}
		{
			p.SetState(796)
			p.Match(NparserPAR_DER)
		}

	}

	return localctx
}

// IMetodos_vector_expresionContext is an interface to support dynamic dispatch.
type IMetodos_vector_expresionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetEx returns the ex attribute.
	GetEx() Ast.Expresion

	// SetEx sets the ex attribute.
	SetEx(Ast.Expresion)

	// IsMetodos_vector_expresionContext differentiates from other interfaces.
	IsMetodos_vector_expresionContext()
}

type Metodos_vector_expresionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	ex     Ast.Expresion
}

func NewEmptyMetodos_vector_expresionContext() *Metodos_vector_expresionContext {
	var p = new(Metodos_vector_expresionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_metodos_vector_expresion
	return p
}

func (*Metodos_vector_expresionContext) IsMetodos_vector_expresionContext() {}

func NewMetodos_vector_expresionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Metodos_vector_expresionContext {
	var p = new(Metodos_vector_expresionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_metodos_vector_expresion

	return p
}

func (s *Metodos_vector_expresionContext) GetParser() antlr.Parser { return s.parser }

func (s *Metodos_vector_expresionContext) GetEx() Ast.Expresion { return s.ex }

func (s *Metodos_vector_expresionContext) SetEx(v Ast.Expresion) { s.ex = v }

func (s *Metodos_vector_expresionContext) AllExpresion() []IExpresionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpresionContext)(nil)).Elem())
	var tst = make([]IExpresionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpresionContext)
		}
	}

	return tst
}

func (s *Metodos_vector_expresionContext) Expresion(i int) IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Metodos_vector_expresionContext) PUNTO() antlr.TerminalNode {
	return s.GetToken(NparserPUNTO, 0)
}

func (s *Metodos_vector_expresionContext) REMOVE() antlr.TerminalNode {
	return s.GetToken(NparserREMOVE, 0)
}

func (s *Metodos_vector_expresionContext) PAR_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserPAR_IZQ, 0)
}

func (s *Metodos_vector_expresionContext) PAR_DER() antlr.TerminalNode {
	return s.GetToken(NparserPAR_DER, 0)
}

func (s *Metodos_vector_expresionContext) CONTAINS() antlr.TerminalNode {
	return s.GetToken(NparserCONTAINS, 0)
}

func (s *Metodos_vector_expresionContext) AMPERSAND() antlr.TerminalNode {
	return s.GetToken(NparserAMPERSAND, 0)
}

func (s *Metodos_vector_expresionContext) LEN() antlr.TerminalNode {
	return s.GetToken(NparserLEN, 0)
}

func (s *Metodos_vector_expresionContext) CAPACITY() antlr.TerminalNode {
	return s.GetToken(NparserCAPACITY, 0)
}

func (s *Metodos_vector_expresionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Metodos_vector_expresionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Metodos_vector_expresion() (localctx IMetodos_vector_expresionContext) {
	localctx = NewMetodos_vector_expresionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, NparserRULE_metodos_vector_expresion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(828)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 31, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(800)
			p.expresion(0)
		}
		{
			p.SetState(801)
			p.Match(NparserPUNTO)
		}
		{
			p.SetState(802)
			p.Match(NparserREMOVE)
		}
		{
			p.SetState(803)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(804)
			p.expresion(0)
		}
		{
			p.SetState(805)
			p.Match(NparserPAR_DER)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(807)
			p.expresion(0)
		}
		{
			p.SetState(808)
			p.Match(NparserPUNTO)
		}
		{
			p.SetState(809)
			p.Match(NparserCONTAINS)
		}
		{
			p.SetState(810)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(811)
			p.Match(NparserAMPERSAND)
		}
		{
			p.SetState(812)
			p.expresion(0)
		}
		{
			p.SetState(813)
			p.Match(NparserPAR_DER)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(815)
			p.expresion(0)
		}
		{
			p.SetState(816)
			p.Match(NparserPUNTO)
		}
		{
			p.SetState(817)
			p.Match(NparserLEN)
		}
		{
			p.SetState(818)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(819)
			p.expresion(0)
		}
		{
			p.SetState(820)
			p.Match(NparserPAR_DER)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(822)
			p.expresion(0)
		}
		{
			p.SetState(823)
			p.Match(NparserPUNTO)
		}
		{
			p.SetState(824)
			p.Match(NparserCAPACITY)
		}
		{
			p.SetState(825)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(826)
			p.Match(NparserPAR_DER)
		}

	}

	return localctx
}

func (p *Nparser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 7:
		var t *ExpresionContext = nil
		if localctx != nil {
			t = localctx.(*ExpresionContext)
		}
		return p.Expresion_Sempred(t, predIndex)

	case 19:
		var t *Case_matchContext = nil
		if localctx != nil {
			t = localctx.(*Case_matchContext)
		}
		return p.Case_match_Sempred(t, predIndex)

	case 23:
		var t *Case_match_expContext = nil
		if localctx != nil {
			t = localctx.(*Case_match_expContext)
		}
		return p.Case_match_exp_Sempred(t, predIndex)

	case 31:
		var t *ElementosPrintContext = nil
		if localctx != nil {
			t = localctx.(*ElementosPrintContext)
		}
		return p.ElementosPrint_Sempred(t, predIndex)

	case 33:
		var t *Parametros_funcionContext = nil
		if localctx != nil {
			t = localctx.(*Parametros_funcionContext)
		}
		return p.Parametros_funcion_Sempred(t, predIndex)

	case 36:
		var t *Parametros_llamadaContext = nil
		if localctx != nil {
			t = localctx.(*Parametros_llamadaContext)
		}
		return p.Parametros_llamada_Sempred(t, predIndex)

	case 38:
		var t *Elementos_vectorContext = nil
		if localctx != nil {
			t = localctx.(*Elementos_vectorContext)
		}
		return p.Elementos_vector_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *Nparser) Expresion_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 17)

	case 1:
		return p.Precpred(p.GetParserRuleContext(), 16)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 15)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 14)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 13)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 12)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 20)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 19)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 18)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Nparser) Case_match_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 9:
		return p.Precpred(p.GetParserRuleContext(), 3)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Nparser) Case_match_exp_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 10:
		return p.Precpred(p.GetParserRuleContext(), 3)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Nparser) ElementosPrint_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 11:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Nparser) Parametros_funcion_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 12:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Nparser) Parametros_llamada_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 13:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Nparser) Elementos_vector_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 14:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
