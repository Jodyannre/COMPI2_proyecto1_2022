// Code generated from c:\Users\Joddie\Documents\GitHub\COMPI2_proyecto1_2022\Back\parser\Nparser.g4 by ANTLR 4.8. DO NOT EDIT.

package parser // Nparser

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

import "github.com/colegno/arraylist"
import "Back/analizador/Ast"
import "Back/analizador/expresiones"
import "Back/analizador/instrucciones"
import "Back/analizador/exp_ins"
import "Back/analizador/transferencia"
import "Back/analizador/bucles"
import "Back/analizador/Ast/simbolos"
import "Back/analizador/fn_primitivas"
import "Back/analizador/fn_vectores"
import "Back/analizador/fn_array"

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 91, 1084,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 3, 2, 3, 2, 3, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 7, 4, 116, 10, 4, 12, 4, 14, 4, 119,
	11, 4, 3, 4, 3, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5,
	3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5,
	3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5,
	3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5,
	3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5,
	3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 184, 10, 5, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6,
	3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6,
	3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6,
	3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6,
	3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6,
	3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6,
	3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6,
	3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6,
	3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6,
	3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6,
	3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 5, 6, 306, 10, 6, 3, 7, 3, 7,
	3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7,
	3, 7, 5, 7, 323, 10, 7, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8,
	3, 8, 7, 8, 334, 10, 8, 12, 8, 14, 8, 337, 11, 8, 3, 9, 3, 9, 3, 9, 3,
	9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 5, 9, 350, 10, 9, 3, 10, 3,
	10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11,
	3, 11, 3, 11, 3, 11, 7, 11, 367, 10, 11, 12, 11, 14, 11, 370, 11, 11, 3,
	12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13,
	3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3,
	13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13,
	3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3,
	13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13,
	3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3,
	13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13,
	3, 13, 3, 13, 3, 13, 5, 13, 449, 10, 13, 3, 14, 3, 14, 3, 14, 3, 14, 3,
	14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 5, 14, 461, 10, 14, 3, 15, 3, 15,
	3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 5,
	15, 475, 10, 15, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16,
	3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3,
	16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16,
	3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3,
	16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 5, 16, 523, 10, 16, 3, 16,
	3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3,
	16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16,
	3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3,
	16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16,
	3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3,
	16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16,
	3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3,
	16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16,
	3, 16, 3, 16, 7, 16, 612, 10, 16, 12, 16, 14, 16, 615, 11, 16, 3, 17, 3,
	17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17,
	3, 17, 3, 17, 5, 17, 631, 10, 17, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3,
	18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18,
	3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 5,
	18, 659, 10, 18, 3, 19, 6, 19, 662, 10, 19, 13, 19, 14, 19, 663, 3, 19,
	3, 19, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 21, 3, 21, 3, 21, 3,
	21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21,
	3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3,
	21, 3, 21, 5, 21, 700, 10, 21, 3, 22, 6, 22, 703, 10, 22, 13, 22, 14, 22,
	704, 3, 22, 3, 22, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 24, 3,
	24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 5, 24, 724, 10, 24,
	3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 26, 6, 26, 734, 10,
	26, 13, 26, 14, 26, 735, 3, 26, 3, 26, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27,
	3, 27, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 5, 28, 752, 10, 28, 3,
	28, 3, 28, 3, 28, 3, 28, 3, 28, 7, 28, 759, 10, 28, 12, 28, 14, 28, 762,
	11, 28, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 30, 6, 30,
	772, 10, 30, 13, 30, 14, 30, 773, 3, 30, 3, 30, 3, 31, 3, 31, 3, 31, 3,
	31, 3, 31, 3, 31, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 5, 32, 790,
	10, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 7, 32, 797, 10, 32, 12, 32,
	14, 32, 800, 11, 32, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 5, 33, 808,
	10, 33, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 5, 34, 816, 10, 34, 3,
	35, 3, 35, 3, 35, 3, 36, 3, 36, 3, 36, 3, 36, 3, 37, 3, 37, 3, 37, 3, 37,
	3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 39, 3, 39, 3, 39, 3, 39, 3,
	39, 3, 39, 3, 39, 3, 39, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40,
	3, 40, 3, 40, 7, 40, 852, 10, 40, 12, 40, 14, 40, 855, 11, 40, 3, 41, 3,
	41, 3, 41, 3, 41, 3, 41, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42,
	3, 42, 3, 42, 7, 42, 871, 10, 42, 12, 42, 14, 42, 874, 11, 42, 3, 43, 3,
	43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43,
	3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3,
	43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 5, 43, 906, 10, 43,
	3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 5,
	44, 918, 10, 44, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45,
	3, 45, 7, 45, 929, 10, 45, 12, 45, 14, 45, 932, 11, 45, 3, 46, 3, 46, 3,
	46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 5, 46, 944, 10, 46,
	3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 7, 47, 955,
	10, 47, 12, 47, 14, 47, 958, 11, 47, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48,
	3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3,
	48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48,
	3, 48, 3, 48, 3, 48, 3, 48, 5, 48, 990, 10, 48, 3, 49, 3, 49, 3, 49, 3,
	49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49,
	3, 49, 3, 49, 3, 49, 3, 49, 5, 49, 1010, 10, 49, 3, 50, 3, 50, 3, 50, 3,
	50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50,
	3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 5, 50, 1032, 10, 50, 3, 51, 3,
	51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51,
	5, 51, 1046, 10, 51, 3, 52, 3, 52, 3, 52, 3, 52, 3, 52, 3, 52, 3, 52, 3,
	52, 3, 52, 3, 52, 3, 52, 3, 52, 3, 52, 3, 52, 5, 52, 1062, 10, 52, 3, 53,
	3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3,
	53, 3, 53, 3, 53, 3, 53, 7, 53, 1079, 10, 53, 12, 53, 14, 53, 1082, 11,
	53, 3, 53, 2, 12, 14, 20, 30, 54, 62, 78, 82, 88, 92, 104, 54, 2, 4, 6,
	8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42,
	44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78,
	80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 2, 7, 4, 2, 76,
	76, 78, 78, 3, 2, 72, 74, 3, 2, 76, 77, 4, 2, 64, 68, 70, 70, 4, 2, 68,
	68, 70, 70, 2, 1147, 2, 106, 3, 2, 2, 2, 4, 109, 3, 2, 2, 2, 6, 117, 3,
	2, 2, 2, 8, 183, 3, 2, 2, 2, 10, 305, 3, 2, 2, 2, 12, 322, 3, 2, 2, 2,
	14, 324, 3, 2, 2, 2, 16, 349, 3, 2, 2, 2, 18, 351, 3, 2, 2, 2, 20, 357,
	3, 2, 2, 2, 22, 371, 3, 2, 2, 2, 24, 448, 3, 2, 2, 2, 26, 460, 3, 2, 2,
	2, 28, 474, 3, 2, 2, 2, 30, 522, 3, 2, 2, 2, 32, 630, 3, 2, 2, 2, 34, 658,
	3, 2, 2, 2, 36, 661, 3, 2, 2, 2, 38, 667, 3, 2, 2, 2, 40, 699, 3, 2, 2,
	2, 42, 702, 3, 2, 2, 2, 44, 708, 3, 2, 2, 2, 46, 723, 3, 2, 2, 2, 48, 725,
	3, 2, 2, 2, 50, 733, 3, 2, 2, 2, 52, 739, 3, 2, 2, 2, 54, 751, 3, 2, 2,
	2, 56, 763, 3, 2, 2, 2, 58, 771, 3, 2, 2, 2, 60, 777, 3, 2, 2, 2, 62, 789,
	3, 2, 2, 2, 64, 807, 3, 2, 2, 2, 66, 815, 3, 2, 2, 2, 68, 817, 3, 2, 2,
	2, 70, 820, 3, 2, 2, 2, 72, 824, 3, 2, 2, 2, 74, 828, 3, 2, 2, 2, 76, 834,
	3, 2, 2, 2, 78, 842, 3, 2, 2, 2, 80, 856, 3, 2, 2, 2, 82, 861, 3, 2, 2,
	2, 84, 905, 3, 2, 2, 2, 86, 917, 3, 2, 2, 2, 88, 919, 3, 2, 2, 2, 90, 943,
	3, 2, 2, 2, 92, 945, 3, 2, 2, 2, 94, 989, 3, 2, 2, 2, 96, 1009, 3, 2, 2,
	2, 98, 1031, 3, 2, 2, 2, 100, 1045, 3, 2, 2, 2, 102, 1061, 3, 2, 2, 2,
	104, 1063, 3, 2, 2, 2, 106, 107, 5, 6, 4, 2, 107, 108, 8, 2, 1, 2, 108,
	3, 3, 2, 2, 2, 109, 110, 7, 82, 2, 2, 110, 111, 5, 6, 4, 2, 111, 112, 7,
	83, 2, 2, 112, 113, 8, 3, 1, 2, 113, 5, 3, 2, 2, 2, 114, 116, 5, 8, 5,
	2, 115, 114, 3, 2, 2, 2, 116, 119, 3, 2, 2, 2, 117, 115, 3, 2, 2, 2, 117,
	118, 3, 2, 2, 2, 118, 120, 3, 2, 2, 2, 119, 117, 3, 2, 2, 2, 120, 121,
	8, 4, 1, 2, 121, 7, 3, 2, 2, 2, 122, 123, 5, 86, 44, 2, 123, 124, 7, 63,
	2, 2, 124, 125, 8, 5, 1, 2, 125, 184, 3, 2, 2, 2, 126, 127, 5, 26, 14,
	2, 127, 128, 7, 63, 2, 2, 128, 129, 8, 5, 1, 2, 129, 184, 3, 2, 2, 2, 130,
	131, 5, 30, 16, 2, 131, 132, 7, 63, 2, 2, 132, 133, 8, 5, 1, 2, 133, 184,
	3, 2, 2, 2, 134, 135, 5, 30, 16, 2, 135, 136, 8, 5, 1, 2, 136, 184, 3,
	2, 2, 2, 137, 138, 5, 10, 6, 2, 138, 139, 7, 63, 2, 2, 139, 140, 8, 5,
	1, 2, 140, 184, 3, 2, 2, 2, 141, 142, 5, 24, 13, 2, 142, 143, 8, 5, 1,
	2, 143, 184, 3, 2, 2, 2, 144, 145, 5, 34, 18, 2, 145, 146, 8, 5, 1, 2,
	146, 184, 3, 2, 2, 2, 147, 148, 5, 48, 25, 2, 148, 149, 8, 5, 1, 2, 149,
	184, 3, 2, 2, 2, 150, 151, 5, 70, 36, 2, 151, 152, 8, 5, 1, 2, 152, 184,
	3, 2, 2, 2, 153, 154, 5, 80, 41, 2, 154, 155, 8, 5, 1, 2, 155, 184, 3,
	2, 2, 2, 156, 157, 5, 66, 34, 2, 157, 158, 7, 63, 2, 2, 158, 159, 8, 5,
	1, 2, 159, 184, 3, 2, 2, 2, 160, 161, 5, 68, 35, 2, 161, 162, 7, 63, 2,
	2, 162, 163, 8, 5, 1, 2, 163, 184, 3, 2, 2, 2, 164, 165, 5, 64, 33, 2,
	165, 166, 7, 63, 2, 2, 166, 167, 8, 5, 1, 2, 167, 184, 3, 2, 2, 2, 168,
	169, 5, 74, 38, 2, 169, 170, 7, 63, 2, 2, 170, 171, 8, 5, 1, 2, 171, 184,
	3, 2, 2, 2, 172, 173, 5, 76, 39, 2, 173, 174, 7, 63, 2, 2, 174, 175, 8,
	5, 1, 2, 175, 184, 3, 2, 2, 2, 176, 177, 5, 96, 49, 2, 177, 178, 7, 63,
	2, 2, 178, 179, 8, 5, 1, 2, 179, 184, 3, 2, 2, 2, 180, 181, 5, 12, 7, 2,
	181, 182, 8, 5, 1, 2, 182, 184, 3, 2, 2, 2, 183, 122, 3, 2, 2, 2, 183,
	126, 3, 2, 2, 2, 183, 130, 3, 2, 2, 2, 183, 134, 3, 2, 2, 2, 183, 137,
	3, 2, 2, 2, 183, 141, 3, 2, 2, 2, 183, 144, 3, 2, 2, 2, 183, 147, 3, 2,
	2, 2, 183, 150, 3, 2, 2, 2, 183, 153, 3, 2, 2, 2, 183, 156, 3, 2, 2, 2,
	183, 160, 3, 2, 2, 2, 183, 164, 3, 2, 2, 2, 183, 168, 3, 2, 2, 2, 183,
	172, 3, 2, 2, 2, 183, 176, 3, 2, 2, 2, 183, 180, 3, 2, 2, 2, 184, 9, 3,
	2, 2, 2, 185, 186, 7, 17, 2, 2, 186, 187, 7, 51, 2, 2, 187, 188, 7, 71,
	2, 2, 188, 189, 5, 30, 16, 2, 189, 190, 8, 6, 1, 2, 190, 306, 3, 2, 2,
	2, 191, 192, 7, 17, 2, 2, 192, 193, 7, 51, 2, 2, 193, 194, 7, 71, 2, 2,
	194, 195, 5, 46, 24, 2, 195, 196, 8, 6, 1, 2, 196, 306, 3, 2, 2, 2, 197,
	198, 7, 17, 2, 2, 198, 199, 7, 51, 2, 2, 199, 200, 7, 59, 2, 2, 200, 201,
	5, 32, 17, 2, 201, 202, 7, 71, 2, 2, 202, 203, 5, 30, 16, 2, 203, 204,
	8, 6, 1, 2, 204, 306, 3, 2, 2, 2, 205, 206, 7, 17, 2, 2, 206, 207, 7, 51,
	2, 2, 207, 208, 7, 59, 2, 2, 208, 209, 5, 32, 17, 2, 209, 210, 7, 71, 2,
	2, 210, 211, 5, 46, 24, 2, 211, 212, 8, 6, 1, 2, 212, 306, 3, 2, 2, 2,
	213, 214, 7, 17, 2, 2, 214, 215, 7, 16, 2, 2, 215, 216, 7, 51, 2, 2, 216,
	217, 7, 71, 2, 2, 217, 218, 5, 30, 16, 2, 218, 219, 8, 6, 1, 2, 219, 306,
	3, 2, 2, 2, 220, 221, 7, 17, 2, 2, 221, 222, 7, 16, 2, 2, 222, 223, 7,
	51, 2, 2, 223, 224, 7, 71, 2, 2, 224, 225, 5, 46, 24, 2, 225, 226, 8, 6,
	1, 2, 226, 306, 3, 2, 2, 2, 227, 228, 7, 17, 2, 2, 228, 229, 7, 16, 2,
	2, 229, 230, 7, 51, 2, 2, 230, 231, 7, 59, 2, 2, 231, 232, 5, 32, 17, 2,
	232, 233, 8, 6, 1, 2, 233, 306, 3, 2, 2, 2, 234, 235, 7, 17, 2, 2, 235,
	236, 7, 16, 2, 2, 236, 237, 7, 51, 2, 2, 237, 238, 7, 59, 2, 2, 238, 239,
	5, 32, 17, 2, 239, 240, 7, 71, 2, 2, 240, 241, 5, 30, 16, 2, 241, 242,
	8, 6, 1, 2, 242, 306, 3, 2, 2, 2, 243, 244, 7, 17, 2, 2, 244, 245, 7, 16,
	2, 2, 245, 246, 7, 51, 2, 2, 246, 247, 7, 59, 2, 2, 247, 248, 5, 32, 17,
	2, 248, 249, 7, 71, 2, 2, 249, 250, 5, 46, 24, 2, 250, 251, 8, 6, 1, 2,
	251, 306, 3, 2, 2, 2, 252, 253, 7, 17, 2, 2, 253, 254, 7, 51, 2, 2, 254,
	255, 7, 71, 2, 2, 255, 256, 5, 30, 16, 2, 256, 257, 8, 6, 1, 2, 257, 306,
	3, 2, 2, 2, 258, 259, 7, 17, 2, 2, 259, 260, 7, 16, 2, 2, 260, 261, 7,
	51, 2, 2, 261, 262, 7, 71, 2, 2, 262, 263, 5, 30, 16, 2, 263, 264, 8, 6,
	1, 2, 264, 306, 3, 2, 2, 2, 265, 266, 7, 17, 2, 2, 266, 267, 7, 51, 2,
	2, 267, 268, 7, 59, 2, 2, 268, 269, 7, 14, 2, 2, 269, 270, 7, 67, 2, 2,
	270, 271, 5, 32, 17, 2, 271, 272, 7, 65, 2, 2, 272, 273, 7, 71, 2, 2, 273,
	274, 5, 30, 16, 2, 274, 275, 8, 6, 1, 2, 275, 306, 3, 2, 2, 2, 276, 277,
	7, 17, 2, 2, 277, 278, 7, 16, 2, 2, 278, 279, 7, 51, 2, 2, 279, 280, 7,
	59, 2, 2, 280, 281, 7, 14, 2, 2, 281, 282, 7, 67, 2, 2, 282, 283, 5, 32,
	17, 2, 283, 284, 7, 65, 2, 2, 284, 285, 7, 71, 2, 2, 285, 286, 5, 30, 16,
	2, 286, 287, 8, 6, 1, 2, 287, 306, 3, 2, 2, 2, 288, 289, 7, 17, 2, 2, 289,
	290, 7, 51, 2, 2, 290, 291, 7, 59, 2, 2, 291, 292, 5, 102, 52, 2, 292,
	293, 7, 71, 2, 2, 293, 294, 5, 30, 16, 2, 294, 295, 8, 6, 1, 2, 295, 306,
	3, 2, 2, 2, 296, 297, 7, 17, 2, 2, 297, 298, 7, 16, 2, 2, 298, 299, 7,
	51, 2, 2, 299, 300, 7, 59, 2, 2, 300, 301, 5, 102, 52, 2, 301, 302, 7,
	71, 2, 2, 302, 303, 5, 30, 16, 2, 303, 304, 8, 6, 1, 2, 304, 306, 3, 2,
	2, 2, 305, 185, 3, 2, 2, 2, 305, 191, 3, 2, 2, 2, 305, 197, 3, 2, 2, 2,
	305, 205, 3, 2, 2, 2, 305, 213, 3, 2, 2, 2, 305, 220, 3, 2, 2, 2, 305,
	227, 3, 2, 2, 2, 305, 234, 3, 2, 2, 2, 305, 243, 3, 2, 2, 2, 305, 252,
	3, 2, 2, 2, 305, 258, 3, 2, 2, 2, 305, 265, 3, 2, 2, 2, 305, 276, 3, 2,
	2, 2, 305, 288, 3, 2, 2, 2, 305, 296, 3, 2, 2, 2, 306, 11, 3, 2, 2, 2,
	307, 308, 7, 47, 2, 2, 308, 309, 7, 18, 2, 2, 309, 310, 7, 50, 2, 2, 310,
	311, 7, 82, 2, 2, 311, 312, 5, 14, 8, 2, 312, 313, 7, 83, 2, 2, 313, 314,
	8, 7, 1, 2, 314, 323, 3, 2, 2, 2, 315, 316, 7, 18, 2, 2, 316, 317, 7, 50,
	2, 2, 317, 318, 7, 82, 2, 2, 318, 319, 5, 14, 8, 2, 319, 320, 7, 83, 2,
	2, 320, 321, 8, 7, 1, 2, 321, 323, 3, 2, 2, 2, 322, 307, 3, 2, 2, 2, 322,
	315, 3, 2, 2, 2, 323, 13, 3, 2, 2, 2, 324, 325, 8, 8, 1, 2, 325, 326, 5,
	16, 9, 2, 326, 327, 8, 8, 1, 2, 327, 335, 3, 2, 2, 2, 328, 329, 12, 4,
	2, 2, 329, 330, 7, 62, 2, 2, 330, 331, 5, 16, 9, 2, 331, 332, 8, 8, 1,
	2, 332, 334, 3, 2, 2, 2, 333, 328, 3, 2, 2, 2, 334, 337, 3, 2, 2, 2, 335,
	333, 3, 2, 2, 2, 335, 336, 3, 2, 2, 2, 336, 15, 3, 2, 2, 2, 337, 335, 3,
	2, 2, 2, 338, 339, 7, 51, 2, 2, 339, 340, 7, 59, 2, 2, 340, 341, 5, 32,
	17, 2, 341, 342, 8, 9, 1, 2, 342, 350, 3, 2, 2, 2, 343, 344, 7, 47, 2,
	2, 344, 345, 7, 51, 2, 2, 345, 346, 7, 59, 2, 2, 346, 347, 5, 32, 17, 2,
	347, 348, 8, 9, 1, 2, 348, 350, 3, 2, 2, 2, 349, 338, 3, 2, 2, 2, 349,
	343, 3, 2, 2, 2, 350, 17, 3, 2, 2, 2, 351, 352, 7, 50, 2, 2, 352, 353,
	7, 82, 2, 2, 353, 354, 5, 20, 11, 2, 354, 355, 7, 83, 2, 2, 355, 356, 8,
	10, 1, 2, 356, 19, 3, 2, 2, 2, 357, 358, 8, 11, 1, 2, 358, 359, 5, 22,
	12, 2, 359, 360, 8, 11, 1, 2, 360, 368, 3, 2, 2, 2, 361, 362, 12, 4, 2,
	2, 362, 363, 7, 62, 2, 2, 363, 364, 5, 22, 12, 2, 364, 365, 8, 11, 1, 2,
	365, 367, 3, 2, 2, 2, 366, 361, 3, 2, 2, 2, 367, 370, 3, 2, 2, 2, 368,
	366, 3, 2, 2, 2, 368, 369, 3, 2, 2, 2, 369, 21, 3, 2, 2, 2, 370, 368, 3,
	2, 2, 2, 371, 372, 7, 51, 2, 2, 372, 373, 7, 59, 2, 2, 373, 374, 5, 30,
	16, 2, 374, 375, 8, 12, 1, 2, 375, 23, 3, 2, 2, 2, 376, 377, 7, 47, 2,
	2, 377, 378, 7, 24, 2, 2, 378, 379, 7, 51, 2, 2, 379, 380, 7, 80, 2, 2,
	380, 381, 7, 81, 2, 2, 381, 382, 7, 75, 2, 2, 382, 383, 5, 32, 17, 2, 383,
	384, 5, 4, 3, 2, 384, 385, 8, 13, 1, 2, 385, 449, 3, 2, 2, 2, 386, 387,
	7, 47, 2, 2, 387, 388, 7, 24, 2, 2, 388, 389, 7, 51, 2, 2, 389, 390, 7,
	80, 2, 2, 390, 391, 7, 81, 2, 2, 391, 392, 5, 4, 3, 2, 392, 393, 8, 13,
	1, 2, 393, 449, 3, 2, 2, 2, 394, 395, 7, 24, 2, 2, 395, 396, 7, 51, 2,
	2, 396, 397, 7, 80, 2, 2, 397, 398, 7, 81, 2, 2, 398, 399, 7, 75, 2, 2,
	399, 400, 5, 32, 17, 2, 400, 401, 5, 4, 3, 2, 401, 402, 8, 13, 1, 2, 402,
	449, 3, 2, 2, 2, 403, 404, 7, 24, 2, 2, 404, 405, 7, 51, 2, 2, 405, 406,
	7, 80, 2, 2, 406, 407, 7, 81, 2, 2, 407, 408, 5, 4, 3, 2, 408, 409, 8,
	13, 1, 2, 409, 449, 3, 2, 2, 2, 410, 411, 7, 47, 2, 2, 411, 412, 7, 24,
	2, 2, 412, 413, 7, 51, 2, 2, 413, 414, 7, 80, 2, 2, 414, 415, 5, 82, 42,
	2, 415, 416, 7, 81, 2, 2, 416, 417, 7, 75, 2, 2, 417, 418, 5, 32, 17, 2,
	418, 419, 5, 4, 3, 2, 419, 420, 8, 13, 1, 2, 420, 449, 3, 2, 2, 2, 421,
	422, 7, 47, 2, 2, 422, 423, 7, 24, 2, 2, 423, 424, 7, 51, 2, 2, 424, 425,
	7, 80, 2, 2, 425, 426, 5, 82, 42, 2, 426, 427, 7, 81, 2, 2, 427, 428, 5,
	4, 3, 2, 428, 429, 8, 13, 1, 2, 429, 449, 3, 2, 2, 2, 430, 431, 7, 24,
	2, 2, 431, 432, 7, 51, 2, 2, 432, 433, 7, 80, 2, 2, 433, 434, 5, 82, 42,
	2, 434, 435, 7, 81, 2, 2, 435, 436, 7, 75, 2, 2, 436, 437, 5, 32, 17, 2,
	437, 438, 5, 4, 3, 2, 438, 439, 8, 13, 1, 2, 439, 449, 3, 2, 2, 2, 440,
	441, 7, 24, 2, 2, 441, 442, 7, 51, 2, 2, 442, 443, 7, 80, 2, 2, 443, 444,
	5, 82, 42, 2, 444, 445, 7, 81, 2, 2, 445, 446, 5, 4, 3, 2, 446, 447, 8,
	13, 1, 2, 447, 449, 3, 2, 2, 2, 448, 376, 3, 2, 2, 2, 448, 386, 3, 2, 2,
	2, 448, 394, 3, 2, 2, 2, 448, 403, 3, 2, 2, 2, 448, 410, 3, 2, 2, 2, 448,
	421, 3, 2, 2, 2, 448, 430, 3, 2, 2, 2, 448, 440, 3, 2, 2, 2, 449, 25, 3,
	2, 2, 2, 450, 451, 5, 28, 15, 2, 451, 452, 7, 71, 2, 2, 452, 453, 5, 30,
	16, 2, 453, 454, 8, 14, 1, 2, 454, 461, 3, 2, 2, 2, 455, 456, 5, 28, 15,
	2, 456, 457, 7, 71, 2, 2, 457, 458, 5, 46, 24, 2, 458, 459, 8, 14, 1, 2,
	459, 461, 3, 2, 2, 2, 460, 450, 3, 2, 2, 2, 460, 455, 3, 2, 2, 2, 461,
	27, 3, 2, 2, 2, 462, 463, 7, 51, 2, 2, 463, 464, 5, 104, 53, 2, 464, 465,
	8, 15, 1, 2, 465, 475, 3, 2, 2, 2, 466, 467, 7, 51, 2, 2, 467, 468, 7,
	84, 2, 2, 468, 469, 5, 30, 16, 2, 469, 470, 7, 85, 2, 2, 470, 471, 8, 15,
	1, 2, 471, 475, 3, 2, 2, 2, 472, 473, 7, 51, 2, 2, 473, 475, 8, 15, 1,
	2, 474, 462, 3, 2, 2, 2, 474, 466, 3, 2, 2, 2, 474, 472, 3, 2, 2, 2, 475,
	29, 3, 2, 2, 2, 476, 477, 8, 16, 1, 2, 477, 478, 9, 2, 2, 2, 478, 479,
	5, 30, 16, 32, 479, 480, 8, 16, 1, 2, 480, 523, 3, 2, 2, 2, 481, 482, 7,
	80, 2, 2, 482, 483, 5, 30, 16, 2, 483, 484, 7, 81, 2, 2, 484, 485, 8, 16,
	1, 2, 485, 523, 3, 2, 2, 2, 486, 487, 7, 80, 2, 2, 487, 488, 5, 30, 16,
	2, 488, 489, 7, 13, 2, 2, 489, 490, 5, 32, 17, 2, 490, 491, 7, 81, 2, 2,
	491, 492, 8, 16, 1, 2, 492, 523, 3, 2, 2, 2, 493, 494, 5, 86, 44, 2, 494,
	495, 8, 16, 1, 2, 495, 523, 3, 2, 2, 2, 496, 497, 5, 94, 48, 2, 497, 498,
	8, 16, 1, 2, 498, 523, 3, 2, 2, 2, 499, 500, 5, 98, 50, 2, 500, 501, 8,
	16, 1, 2, 501, 523, 3, 2, 2, 2, 502, 503, 5, 100, 51, 2, 503, 504, 8, 16,
	1, 2, 504, 523, 3, 2, 2, 2, 505, 506, 5, 18, 10, 2, 506, 507, 8, 16, 1,
	2, 507, 523, 3, 2, 2, 2, 508, 509, 7, 51, 2, 2, 509, 523, 8, 16, 1, 2,
	510, 511, 7, 21, 2, 2, 511, 523, 8, 16, 1, 2, 512, 513, 7, 22, 2, 2, 513,
	523, 8, 16, 1, 2, 514, 515, 7, 88, 2, 2, 515, 523, 8, 16, 1, 2, 516, 517,
	7, 49, 2, 2, 517, 523, 8, 16, 1, 2, 518, 519, 7, 48, 2, 2, 519, 523, 8,
	16, 1, 2, 520, 521, 7, 86, 2, 2, 521, 523, 8, 16, 1, 2, 522, 476, 3, 2,
	2, 2, 522, 481, 3, 2, 2, 2, 522, 486, 3, 2, 2, 2, 522, 493, 3, 2, 2, 2,
	522, 496, 3, 2, 2, 2, 522, 499, 3, 2, 2, 2, 522, 502, 3, 2, 2, 2, 522,
	505, 3, 2, 2, 2, 522, 508, 3, 2, 2, 2, 522, 510, 3, 2, 2, 2, 522, 512,
	3, 2, 2, 2, 522, 514, 3, 2, 2, 2, 522, 516, 3, 2, 2, 2, 522, 518, 3, 2,
	2, 2, 522, 520, 3, 2, 2, 2, 523, 613, 3, 2, 2, 2, 524, 525, 12, 28, 2,
	2, 525, 526, 9, 3, 2, 2, 526, 527, 5, 30, 16, 29, 527, 528, 8, 16, 1, 2,
	528, 612, 3, 2, 2, 2, 529, 530, 12, 27, 2, 2, 530, 531, 9, 4, 2, 2, 531,
	532, 5, 30, 16, 28, 532, 533, 8, 16, 1, 2, 533, 612, 3, 2, 2, 2, 534, 535,
	12, 26, 2, 2, 535, 536, 9, 5, 2, 2, 536, 537, 5, 30, 16, 27, 537, 538,
	8, 16, 1, 2, 538, 612, 3, 2, 2, 2, 539, 540, 12, 25, 2, 2, 540, 541, 9,
	6, 2, 2, 541, 542, 5, 30, 16, 26, 542, 543, 8, 16, 1, 2, 543, 612, 3, 2,
	2, 2, 544, 545, 12, 24, 2, 2, 545, 546, 7, 56, 2, 2, 546, 547, 5, 30, 16,
	25, 547, 548, 8, 16, 1, 2, 548, 612, 3, 2, 2, 2, 549, 550, 12, 23, 2, 2,
	550, 551, 7, 54, 2, 2, 551, 552, 5, 30, 16, 24, 552, 553, 8, 16, 1, 2,
	553, 612, 3, 2, 2, 2, 554, 555, 12, 31, 2, 2, 555, 556, 7, 61, 2, 2, 556,
	557, 7, 19, 2, 2, 557, 558, 7, 80, 2, 2, 558, 559, 7, 81, 2, 2, 559, 612,
	8, 16, 1, 2, 560, 561, 12, 30, 2, 2, 561, 562, 7, 61, 2, 2, 562, 563, 7,
	26, 2, 2, 563, 564, 7, 80, 2, 2, 564, 565, 7, 81, 2, 2, 565, 612, 8, 16,
	1, 2, 566, 567, 12, 29, 2, 2, 567, 568, 7, 61, 2, 2, 568, 569, 7, 25, 2,
	2, 569, 570, 7, 80, 2, 2, 570, 571, 7, 81, 2, 2, 571, 612, 8, 16, 1, 2,
	572, 573, 12, 15, 2, 2, 573, 574, 5, 104, 53, 2, 574, 575, 8, 16, 1, 2,
	575, 612, 3, 2, 2, 2, 576, 577, 12, 14, 2, 2, 577, 578, 7, 84, 2, 2, 578,
	579, 5, 30, 16, 2, 579, 580, 7, 85, 2, 2, 580, 581, 8, 16, 1, 2, 581, 612,
	3, 2, 2, 2, 582, 583, 12, 13, 2, 2, 583, 584, 7, 61, 2, 2, 584, 585, 7,
	29, 2, 2, 585, 586, 7, 80, 2, 2, 586, 587, 7, 81, 2, 2, 587, 612, 8, 16,
	1, 2, 588, 589, 12, 12, 2, 2, 589, 590, 7, 61, 2, 2, 590, 591, 7, 34, 2,
	2, 591, 592, 7, 80, 2, 2, 592, 593, 7, 81, 2, 2, 593, 612, 8, 16, 1, 2,
	594, 595, 12, 11, 2, 2, 595, 596, 7, 61, 2, 2, 596, 597, 7, 32, 2, 2, 597,
	598, 7, 80, 2, 2, 598, 599, 7, 55, 2, 2, 599, 600, 5, 30, 16, 2, 600, 601,
	7, 81, 2, 2, 601, 602, 8, 16, 1, 2, 602, 612, 3, 2, 2, 2, 603, 604, 12,
	10, 2, 2, 604, 605, 7, 61, 2, 2, 605, 606, 7, 31, 2, 2, 606, 607, 7, 80,
	2, 2, 607, 608, 5, 30, 16, 2, 608, 609, 7, 81, 2, 2, 609, 610, 8, 16, 1,
	2, 610, 612, 3, 2, 2, 2, 611, 524, 3, 2, 2, 2, 611, 529, 3, 2, 2, 2, 611,
	534, 3, 2, 2, 2, 611, 539, 3, 2, 2, 2, 611, 544, 3, 2, 2, 2, 611, 549,
	3, 2, 2, 2, 611, 554, 3, 2, 2, 2, 611, 560, 3, 2, 2, 2, 611, 566, 3, 2,
	2, 2, 611, 572, 3, 2, 2, 2, 611, 576, 3, 2, 2, 2, 611, 582, 3, 2, 2, 2,
	611, 588, 3, 2, 2, 2, 611, 594, 3, 2, 2, 2, 611, 603, 3, 2, 2, 2, 612,
	615, 3, 2, 2, 2, 613, 611, 3, 2, 2, 2, 613, 614, 3, 2, 2, 2, 614, 31, 3,
	2, 2, 2, 615, 613, 3, 2, 2, 2, 616, 617, 7, 3, 2, 2, 617, 631, 8, 17, 1,
	2, 618, 619, 7, 4, 2, 2, 619, 631, 8, 17, 1, 2, 620, 621, 7, 6, 2, 2, 621,
	631, 8, 17, 1, 2, 622, 623, 7, 5, 2, 2, 623, 631, 8, 17, 1, 2, 624, 625,
	7, 7, 2, 2, 625, 631, 8, 17, 1, 2, 626, 627, 7, 8, 2, 2, 627, 631, 8, 17,
	1, 2, 628, 629, 7, 9, 2, 2, 629, 631, 8, 17, 1, 2, 630, 616, 3, 2, 2, 2,
	630, 618, 3, 2, 2, 2, 630, 620, 3, 2, 2, 2, 630, 622, 3, 2, 2, 2, 630,
	624, 3, 2, 2, 2, 630, 626, 3, 2, 2, 2, 630, 628, 3, 2, 2, 2, 631, 33, 3,
	2, 2, 2, 632, 633, 7, 36, 2, 2, 633, 634, 5, 30, 16, 2, 634, 635, 5, 4,
	3, 2, 635, 636, 8, 18, 1, 2, 636, 659, 3, 2, 2, 2, 637, 638, 7, 36, 2,
	2, 638, 639, 5, 30, 16, 2, 639, 640, 5, 4, 3, 2, 640, 641, 7, 37, 2, 2,
	641, 642, 5, 4, 3, 2, 642, 643, 8, 18, 1, 2, 643, 659, 3, 2, 2, 2, 644,
	645, 7, 36, 2, 2, 645, 646, 5, 30, 16, 2, 646, 647, 5, 4, 3, 2, 647, 648,
	5, 36, 19, 2, 648, 649, 8, 18, 1, 2, 649, 659, 3, 2, 2, 2, 650, 651, 7,
	36, 2, 2, 651, 652, 5, 30, 16, 2, 652, 653, 5, 4, 3, 2, 653, 654, 5, 36,
	19, 2, 654, 655, 7, 37, 2, 2, 655, 656, 5, 4, 3, 2, 656, 657, 8, 18, 1,
	2, 657, 659, 3, 2, 2, 2, 658, 632, 3, 2, 2, 2, 658, 637, 3, 2, 2, 2, 658,
	644, 3, 2, 2, 2, 658, 650, 3, 2, 2, 2, 659, 35, 3, 2, 2, 2, 660, 662, 5,
	38, 20, 2, 661, 660, 3, 2, 2, 2, 662, 663, 3, 2, 2, 2, 663, 661, 3, 2,
	2, 2, 663, 664, 3, 2, 2, 2, 664, 665, 3, 2, 2, 2, 665, 666, 8, 19, 1, 2,
	666, 37, 3, 2, 2, 2, 667, 668, 7, 37, 2, 2, 668, 669, 7, 36, 2, 2, 669,
	670, 5, 30, 16, 2, 670, 671, 5, 4, 3, 2, 671, 672, 8, 20, 1, 2, 672, 39,
	3, 2, 2, 2, 673, 674, 7, 36, 2, 2, 674, 675, 5, 30, 16, 2, 675, 676, 5,
	4, 3, 2, 676, 677, 8, 21, 1, 2, 677, 700, 3, 2, 2, 2, 678, 679, 7, 36,
	2, 2, 679, 680, 5, 30, 16, 2, 680, 681, 5, 4, 3, 2, 681, 682, 7, 37, 2,
	2, 682, 683, 5, 4, 3, 2, 683, 684, 8, 21, 1, 2, 684, 700, 3, 2, 2, 2, 685,
	686, 7, 36, 2, 2, 686, 687, 5, 30, 16, 2, 687, 688, 5, 4, 3, 2, 688, 689,
	5, 42, 22, 2, 689, 690, 8, 21, 1, 2, 690, 700, 3, 2, 2, 2, 691, 692, 7,
	36, 2, 2, 692, 693, 5, 30, 16, 2, 693, 694, 5, 4, 3, 2, 694, 695, 5, 42,
	22, 2, 695, 696, 7, 37, 2, 2, 696, 697, 5, 4, 3, 2, 697, 698, 8, 21, 1,
	2, 698, 700, 3, 2, 2, 2, 699, 673, 3, 2, 2, 2, 699, 678, 3, 2, 2, 2, 699,
	685, 3, 2, 2, 2, 699, 691, 3, 2, 2, 2, 700, 41, 3, 2, 2, 2, 701, 703, 5,
	44, 23, 2, 702, 701, 3, 2, 2, 2, 703, 704, 3, 2, 2, 2, 704, 702, 3, 2,
	2, 2, 704, 705, 3, 2, 2, 2, 705, 706, 3, 2, 2, 2, 706, 707, 8, 22, 1, 2,
	707, 43, 3, 2, 2, 2, 708, 709, 7, 37, 2, 2, 709, 710, 7, 36, 2, 2, 710,
	711, 5, 30, 16, 2, 711, 712, 5, 4, 3, 2, 712, 713, 8, 23, 1, 2, 713, 45,
	3, 2, 2, 2, 714, 715, 5, 40, 21, 2, 715, 716, 8, 24, 1, 2, 716, 724, 3,
	2, 2, 2, 717, 718, 5, 56, 29, 2, 718, 719, 8, 24, 1, 2, 719, 724, 3, 2,
	2, 2, 720, 721, 5, 72, 37, 2, 721, 722, 8, 24, 1, 2, 722, 724, 3, 2, 2,
	2, 723, 714, 3, 2, 2, 2, 723, 717, 3, 2, 2, 2, 723, 720, 3, 2, 2, 2, 724,
	47, 3, 2, 2, 2, 725, 726, 7, 38, 2, 2, 726, 727, 5, 30, 16, 2, 727, 728,
	7, 82, 2, 2, 728, 729, 5, 50, 26, 2, 729, 730, 7, 83, 2, 2, 730, 731, 8,
	25, 1, 2, 731, 49, 3, 2, 2, 2, 732, 734, 5, 52, 27, 2, 733, 732, 3, 2,
	2, 2, 734, 735, 3, 2, 2, 2, 735, 733, 3, 2, 2, 2, 735, 736, 3, 2, 2, 2,
	736, 737, 3, 2, 2, 2, 737, 738, 8, 26, 1, 2, 738, 51, 3, 2, 2, 2, 739,
	740, 5, 54, 28, 2, 740, 741, 7, 69, 2, 2, 741, 742, 5, 4, 3, 2, 742, 743,
	7, 62, 2, 2, 743, 744, 8, 27, 1, 2, 744, 53, 3, 2, 2, 2, 745, 746, 8, 28,
	1, 2, 746, 747, 5, 30, 16, 2, 747, 748, 8, 28, 1, 2, 748, 752, 3, 2, 2,
	2, 749, 750, 7, 52, 2, 2, 750, 752, 8, 28, 1, 2, 751, 745, 3, 2, 2, 2,
	751, 749, 3, 2, 2, 2, 752, 760, 3, 2, 2, 2, 753, 754, 12, 5, 2, 2, 754,
	755, 7, 53, 2, 2, 755, 756, 5, 30, 16, 2, 756, 757, 8, 28, 1, 2, 757, 759,
	3, 2, 2, 2, 758, 753, 3, 2, 2, 2, 759, 762, 3, 2, 2, 2, 760, 758, 3, 2,
	2, 2, 760, 761, 3, 2, 2, 2, 761, 55, 3, 2, 2, 2, 762, 760, 3, 2, 2, 2,
	763, 764, 7, 38, 2, 2, 764, 765, 5, 30, 16, 2, 765, 766, 7, 82, 2, 2, 766,
	767, 5, 58, 30, 2, 767, 768, 7, 83, 2, 2, 768, 769, 8, 29, 1, 2, 769, 57,
	3, 2, 2, 2, 770, 772, 5, 60, 31, 2, 771, 770, 3, 2, 2, 2, 772, 773, 3,
	2, 2, 2, 773, 771, 3, 2, 2, 2, 773, 774, 3, 2, 2, 2, 774, 775, 3, 2, 2,
	2, 775, 776, 8, 30, 1, 2, 776, 59, 3, 2, 2, 2, 777, 778, 5, 62, 32, 2,
	778, 779, 7, 69, 2, 2, 779, 780, 5, 4, 3, 2, 780, 781, 7, 62, 2, 2, 781,
	782, 8, 31, 1, 2, 782, 61, 3, 2, 2, 2, 783, 784, 8, 32, 1, 2, 784, 785,
	5, 30, 16, 2, 785, 786, 8, 32, 1, 2, 786, 790, 3, 2, 2, 2, 787, 788, 7,
	52, 2, 2, 788, 790, 8, 32, 1, 2, 789, 783, 3, 2, 2, 2, 789, 787, 3, 2,
	2, 2, 790, 798, 3, 2, 2, 2, 791, 792, 12, 5, 2, 2, 792, 793, 7, 53, 2,
	2, 793, 794, 5, 30, 16, 2, 794, 795, 8, 32, 1, 2, 795, 797, 3, 2, 2, 2,
	796, 791, 3, 2, 2, 2, 797, 800, 3, 2, 2, 2, 798, 796, 3, 2, 2, 2, 798,
	799, 3, 2, 2, 2, 799, 63, 3, 2, 2, 2, 800, 798, 3, 2, 2, 2, 801, 802, 7,
	43, 2, 2, 802, 808, 8, 33, 1, 2, 803, 804, 7, 43, 2, 2, 804, 805, 5, 30,
	16, 2, 805, 806, 8, 33, 1, 2, 806, 808, 3, 2, 2, 2, 807, 801, 3, 2, 2,
	2, 807, 803, 3, 2, 2, 2, 808, 65, 3, 2, 2, 2, 809, 810, 7, 44, 2, 2, 810,
	816, 8, 34, 1, 2, 811, 812, 7, 44, 2, 2, 812, 813, 5, 30, 16, 2, 813, 814,
	8, 34, 1, 2, 814, 816, 3, 2, 2, 2, 815, 809, 3, 2, 2, 2, 815, 811, 3, 2,
	2, 2, 816, 67, 3, 2, 2, 2, 817, 818, 7, 45, 2, 2, 818, 819, 8, 35, 1, 2,
	819, 69, 3, 2, 2, 2, 820, 821, 7, 39, 2, 2, 821, 822, 5, 4, 3, 2, 822,
	823, 8, 36, 1, 2, 823, 71, 3, 2, 2, 2, 824, 825, 7, 39, 2, 2, 825, 826,
	5, 4, 3, 2, 826, 827, 8, 37, 1, 2, 827, 73, 3, 2, 2, 2, 828, 829, 7, 23,
	2, 2, 829, 830, 7, 80, 2, 2, 830, 831, 5, 30, 16, 2, 831, 832, 7, 81, 2,
	2, 832, 833, 8, 38, 1, 2, 833, 75, 3, 2, 2, 2, 834, 835, 7, 23, 2, 2, 835,
	836, 7, 80, 2, 2, 836, 837, 7, 86, 2, 2, 837, 838, 7, 62, 2, 2, 838, 839,
	5, 78, 40, 2, 839, 840, 7, 81, 2, 2, 840, 841, 8, 39, 1, 2, 841, 77, 3,
	2, 2, 2, 842, 843, 8, 40, 1, 2, 843, 844, 5, 30, 16, 2, 844, 845, 8, 40,
	1, 2, 845, 853, 3, 2, 2, 2, 846, 847, 12, 4, 2, 2, 847, 848, 7, 62, 2,
	2, 848, 849, 5, 30, 16, 2, 849, 850, 8, 40, 1, 2, 850, 852, 3, 2, 2, 2,
	851, 846, 3, 2, 2, 2, 852, 855, 3, 2, 2, 2, 853, 851, 3, 2, 2, 2, 853,
	854, 3, 2, 2, 2, 854, 79, 3, 2, 2, 2, 855, 853, 3, 2, 2, 2, 856, 857, 7,
	40, 2, 2, 857, 858, 5, 30, 16, 2, 858, 859, 5, 4, 3, 2, 859, 860, 8, 41,
	1, 2, 860, 81, 3, 2, 2, 2, 861, 862, 8, 42, 1, 2, 862, 863, 5, 84, 43,
	2, 863, 864, 8, 42, 1, 2, 864, 872, 3, 2, 2, 2, 865, 866, 12, 4, 2, 2,
	866, 867, 7, 62, 2, 2, 867, 868, 5, 84, 43, 2, 868, 869, 8, 42, 1, 2, 869,
	871, 3, 2, 2, 2, 870, 865, 3, 2, 2, 2, 871, 874, 3, 2, 2, 2, 872, 870,
	3, 2, 2, 2, 872, 873, 3, 2, 2, 2, 873, 83, 3, 2, 2, 2, 874, 872, 3, 2,
	2, 2, 875, 876, 7, 16, 2, 2, 876, 877, 7, 51, 2, 2, 877, 878, 7, 59, 2,
	2, 878, 879, 5, 32, 17, 2, 879, 880, 8, 43, 1, 2, 880, 906, 3, 2, 2, 2,
	881, 882, 7, 51, 2, 2, 882, 883, 7, 59, 2, 2, 883, 884, 5, 32, 17, 2, 884,
	885, 8, 43, 1, 2, 885, 906, 3, 2, 2, 2, 886, 887, 7, 51, 2, 2, 887, 888,
	7, 59, 2, 2, 888, 889, 7, 55, 2, 2, 889, 890, 7, 16, 2, 2, 890, 891, 7,
	84, 2, 2, 891, 892, 5, 32, 17, 2, 892, 893, 7, 85, 2, 2, 893, 894, 8, 43,
	1, 2, 894, 906, 3, 2, 2, 2, 895, 896, 7, 51, 2, 2, 896, 897, 7, 59, 2,
	2, 897, 898, 7, 55, 2, 2, 898, 899, 7, 16, 2, 2, 899, 900, 7, 14, 2, 2,
	900, 901, 7, 67, 2, 2, 901, 902, 5, 32, 17, 2, 902, 903, 7, 65, 2, 2, 903,
	904, 8, 43, 1, 2, 904, 906, 3, 2, 2, 2, 905, 875, 3, 2, 2, 2, 905, 881,
	3, 2, 2, 2, 905, 886, 3, 2, 2, 2, 905, 895, 3, 2, 2, 2, 906, 85, 3, 2,
	2, 2, 907, 908, 7, 51, 2, 2, 908, 909, 7, 80, 2, 2, 909, 910, 5, 88, 45,
	2, 910, 911, 7, 81, 2, 2, 911, 912, 8, 44, 1, 2, 912, 918, 3, 2, 2, 2,
	913, 914, 7, 51, 2, 2, 914, 915, 7, 80, 2, 2, 915, 916, 7, 81, 2, 2, 916,
	918, 8, 44, 1, 2, 917, 907, 3, 2, 2, 2, 917, 913, 3, 2, 2, 2, 918, 87,
	3, 2, 2, 2, 919, 920, 8, 45, 1, 2, 920, 921, 5, 90, 46, 2, 921, 922, 8,
	45, 1, 2, 922, 930, 3, 2, 2, 2, 923, 924, 12, 4, 2, 2, 924, 925, 7, 62,
	2, 2, 925, 926, 5, 90, 46, 2, 926, 927, 8, 45, 1, 2, 927, 929, 3, 2, 2,
	2, 928, 923, 3, 2, 2, 2, 929, 932, 3, 2, 2, 2, 930, 928, 3, 2, 2, 2, 930,
	931, 3, 2, 2, 2, 931, 89, 3, 2, 2, 2, 932, 930, 3, 2, 2, 2, 933, 934, 5,
	30, 16, 2, 934, 935, 8, 46, 1, 2, 935, 944, 3, 2, 2, 2, 936, 937, 7, 55,
	2, 2, 937, 938, 7, 16, 2, 2, 938, 939, 7, 51, 2, 2, 939, 944, 8, 46, 1,
	2, 940, 941, 7, 55, 2, 2, 941, 942, 7, 51, 2, 2, 942, 944, 8, 46, 1, 2,
	943, 933, 3, 2, 2, 2, 943, 936, 3, 2, 2, 2, 943, 940, 3, 2, 2, 2, 944,
	91, 3, 2, 2, 2, 945, 946, 8, 47, 1, 2, 946, 947, 5, 30, 16, 2, 947, 948,
	8, 47, 1, 2, 948, 956, 3, 2, 2, 2, 949, 950, 12, 4, 2, 2, 950, 951, 7,
	62, 2, 2, 951, 952, 5, 30, 16, 2, 952, 953, 8, 47, 1, 2, 953, 955, 3, 2,
	2, 2, 954, 949, 3, 2, 2, 2, 955, 958, 3, 2, 2, 2, 956, 954, 3, 2, 2, 2,
	956, 957, 3, 2, 2, 2, 957, 93, 3, 2, 2, 2, 958, 956, 3, 2, 2, 2, 959, 960,
	7, 14, 2, 2, 960, 961, 7, 58, 2, 2, 961, 962, 7, 28, 2, 2, 962, 963, 7,
	80, 2, 2, 963, 964, 7, 81, 2, 2, 964, 990, 8, 48, 1, 2, 965, 966, 7, 15,
	2, 2, 966, 967, 7, 78, 2, 2, 967, 968, 7, 84, 2, 2, 968, 969, 5, 92, 47,
	2, 969, 970, 7, 85, 2, 2, 970, 971, 8, 48, 1, 2, 971, 990, 3, 2, 2, 2,
	972, 973, 7, 15, 2, 2, 973, 974, 7, 78, 2, 2, 974, 975, 7, 84, 2, 2, 975,
	976, 5, 30, 16, 2, 976, 977, 7, 63, 2, 2, 977, 978, 5, 30, 16, 2, 978,
	979, 7, 85, 2, 2, 979, 980, 8, 48, 1, 2, 980, 990, 3, 2, 2, 2, 981, 982,
	7, 14, 2, 2, 982, 983, 7, 58, 2, 2, 983, 984, 7, 35, 2, 2, 984, 985, 7,
	80, 2, 2, 985, 986, 5, 30, 16, 2, 986, 987, 7, 81, 2, 2, 987, 988, 8, 48,
	1, 2, 988, 990, 3, 2, 2, 2, 989, 959, 3, 2, 2, 2, 989, 965, 3, 2, 2, 2,
	989, 972, 3, 2, 2, 2, 989, 981, 3, 2, 2, 2, 990, 95, 3, 2, 2, 2, 991, 992,
	5, 30, 16, 2, 992, 993, 7, 61, 2, 2, 993, 994, 7, 30, 2, 2, 994, 995, 7,
	80, 2, 2, 995, 996, 5, 30, 16, 2, 996, 997, 7, 81, 2, 2, 997, 998, 8, 49,
	1, 2, 998, 1010, 3, 2, 2, 2, 999, 1000, 5, 30, 16, 2, 1000, 1001, 7, 61,
	2, 2, 1001, 1002, 7, 33, 2, 2, 1002, 1003, 7, 80, 2, 2, 1003, 1004, 5,
	30, 16, 2, 1004, 1005, 7, 62, 2, 2, 1005, 1006, 5, 30, 16, 2, 1006, 1007,
	7, 81, 2, 2, 1007, 1008, 8, 49, 1, 2, 1008, 1010, 3, 2, 2, 2, 1009, 991,
	3, 2, 2, 2, 1009, 999, 3, 2, 2, 2, 1010, 97, 3, 2, 2, 2, 1011, 1012, 7,
	6, 2, 2, 1012, 1013, 7, 58, 2, 2, 1013, 1014, 7, 12, 2, 2, 1014, 1015,
	7, 80, 2, 2, 1015, 1016, 5, 30, 16, 2, 1016, 1017, 7, 62, 2, 2, 1017, 1018,
	5, 30, 16, 2, 1018, 1019, 7, 81, 2, 2, 1019, 1020, 8, 50, 1, 2, 1020, 1032,
	3, 2, 2, 2, 1021, 1022, 7, 5, 2, 2, 1022, 1023, 7, 58, 2, 2, 1023, 1024,
	7, 11, 2, 2, 1024, 1025, 7, 80, 2, 2, 1025, 1026, 5, 30, 16, 2, 1026, 1027,
	7, 62, 2, 2, 1027, 1028, 5, 30, 16, 2, 1028, 1029, 7, 81, 2, 2, 1029, 1030,
	8, 50, 1, 2, 1030, 1032, 3, 2, 2, 2, 1031, 1011, 3, 2, 2, 2, 1031, 1021,
	3, 2, 2, 2, 1032, 99, 3, 2, 2, 2, 1033, 1034, 7, 84, 2, 2, 1034, 1035,
	5, 92, 47, 2, 1035, 1036, 7, 85, 2, 2, 1036, 1037, 8, 51, 1, 2, 1037, 1046,
	3, 2, 2, 2, 1038, 1039, 7, 84, 2, 2, 1039, 1040, 5, 30, 16, 2, 1040, 1041,
	7, 63, 2, 2, 1041, 1042, 5, 30, 16, 2, 1042, 1043, 7, 85, 2, 2, 1043, 1044,
	8, 51, 1, 2, 1044, 1046, 3, 2, 2, 2, 1045, 1033, 3, 2, 2, 2, 1045, 1038,
	3, 2, 2, 2, 1046, 101, 3, 2, 2, 2, 1047, 1048, 7, 84, 2, 2, 1048, 1049,
	5, 102, 52, 2, 1049, 1050, 7, 63, 2, 2, 1050, 1051, 5, 30, 16, 2, 1051,
	1052, 7, 85, 2, 2, 1052, 1053, 8, 52, 1, 2, 1053, 1062, 3, 2, 2, 2, 1054,
	1055, 7, 84, 2, 2, 1055, 1056, 5, 32, 17, 2, 1056, 1057, 7, 63, 2, 2, 1057,
	1058, 5, 30, 16, 2, 1058, 1059, 7, 85, 2, 2, 1059, 1060, 8, 52, 1, 2, 1060,
	1062, 3, 2, 2, 2, 1061, 1047, 3, 2, 2, 2, 1061, 1054, 3, 2, 2, 2, 1062,
	103, 3, 2, 2, 2, 1063, 1064, 8, 53, 1, 2, 1064, 1065, 7, 84, 2, 2, 1065,
	1066, 5, 30, 16, 2, 1066, 1067, 7, 85, 2, 2, 1067, 1068, 7, 84, 2, 2, 1068,
	1069, 5, 30, 16, 2, 1069, 1070, 7, 85, 2, 2, 1070, 1071, 8, 53, 1, 2, 1071,
	1080, 3, 2, 2, 2, 1072, 1073, 12, 4, 2, 2, 1073, 1074, 7, 84, 2, 2, 1074,
	1075, 5, 30, 16, 2, 1075, 1076, 7, 85, 2, 2, 1076, 1077, 8, 53, 1, 2, 1077,
	1079, 3, 2, 2, 2, 1078, 1072, 3, 2, 2, 2, 1079, 1082, 3, 2, 2, 2, 1080,
	1078, 3, 2, 2, 2, 1080, 1081, 3, 2, 2, 2, 1081, 105, 3, 2, 2, 2, 1082,
	1080, 3, 2, 2, 2, 42, 117, 183, 305, 322, 335, 349, 368, 448, 460, 474,
	522, 611, 613, 630, 658, 663, 699, 704, 723, 735, 751, 760, 773, 789, 798,
	807, 815, 853, 872, 905, 917, 930, 943, 956, 989, 1009, 1031, 1045, 1061,
	1080,
}
var deserializer = antlr.NewATNDeserializer(nil)
var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)

var literalNames = []string{
	"", "'bool'", "'char'", "'f64'", "'i64'", "'&str'", "'String'", "'usize'",
	"'main'", "'powf'", "'pow'", "'as'", "'Vec'", "'vec'", "'mut'", "'let'",
	"'struct'", "'to_string'", "'to_owned'", "'true'", "'false'", "'println!'",
	"'fn'", "'abs'", "'sqrt'", "'clone'", "'new'", "'len'", "'push'", "'remove'",
	"'contains'", "'insert'", "'capacity'", "'with_capacity'", "'if'", "'else'",
	"'match'", "'loop'", "'while'", "'for'", "'in'", "'return'", "'break'",
	"'continue'", "'mod'", "'pub'", "", "", "", "", "'_'", "'|'", "'||'", "'&'",
	"'&&'", "':?'", "'::'", "':'", "'..'", "'.'", "','", "';'", "'>='", "'>'",
	"'<='", "'<'", "'=='", "'=>'", "'!='", "'='", "'%'", "'*'", "'/'", "'->'",
	"'-'", "'+'", "'!'", "'?'", "'('", "')'", "'{'", "'}'", "'['", "']'",
}
var symbolicNames = []string{
	"", "BOOL", "CHAR", "F64", "I64", "STR", "STRING", "USIZE", "MAIN", "POWF",
	"POW", "AS", "VEC", "VEC_M", "MUT", "LET", "STRUCT", "TO_STRING", "TO_OWNED",
	"TRUE", "FALSE", "PRINT", "FN", "ABS", "SQRT", "CLONE", "NEW", "LEN", "PUSH",
	"REMOVE", "CONTAINS", "INSERT", "CAPACITY", "WITH_CAPACITY", "IF", "ELSE",
	"MATCH", "LOOP", "WHILE", "FOR", "IN", "RETURN", "BREAK", "CONTINUE", "MOD",
	"PUB", "NUMERO", "DECIMAL", "ID_CAMEL", "ID", "DEFAULT", "O", "OR", "AMPERSAND",
	"AND", "PRINT_OP_DEBUG", "DOBLE_DOSPUNTOS", "DOSPUNTOS", "RANGO", "PUNTO",
	"COMA", "PUNTOCOMA", "MAYOR_I", "MAYOR", "MENOR_I", "MENOR", "IGUALDAD",
	"CASE", "DISTINTO", "IGUAL", "MODULO", "MULTIPLICACION", "DIVISION", "FN_TIPO_RETORNO",
	"RESTA", "SUMA", "NOT", "PREGUNTA", "PAR_IZQ", "PAR_DER", "LLAVE_IZQ",
	"LLAVE_DER", "CORCHETE_IZQ", "CORCHETE_DER", "CADENA", "ASCII", "CARACTER",
	"WHITESPACE", "COMMENT", "LINE_COMMENT",
}

var ruleNames = []string{
	"inicio", "bloque", "instrucciones", "instruccion", "declaracion", "declaracion_struct_template",
	"atributos_struct_template", "atributo_struct_template", "struct_instancia",
	"atributos_struct_instancia", "atributo_struct_instancia", "declaracion_funcion",
	"asignacion", "accesos_vector_array_asignacion", "expresion", "tipo_dato",
	"control_if", "bloque_else_if", "else_if", "control_if_exp", "bloque_else_if_exp",
	"else_if_exp", "control_expresion", "control_match", "control_case", "cases",
	"case_match", "control_match_exp", "control_case_exp", "cases_exp", "case_match_exp",
	"ireturn", "ibreak", "icontinue", "control_loop", "control_loop_exp", "printNormal",
	"printFormato", "elementosPrint", "control_while", "parametros_funcion",
	"parametro", "llamada_funcion", "parametros_llamada", "parametro_llamada_referencia",
	"elementos_vector", "metodos_iniciar_vector", "metodos_vector", "potencia",
	"array", "dimension_array", "dimension_acceso_array",
}
var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))

func init() {
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

type Nparser struct {
	*antlr.BaseParser
}

func NewNparser(input antlr.TokenStream) *Nparser {
	this := new(Nparser)

	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "Nparser.g4"

	return this
}

// Nparser tokens.
const (
	NparserEOF             = antlr.TokenEOF
	NparserBOOL            = 1
	NparserCHAR            = 2
	NparserF64             = 3
	NparserI64             = 4
	NparserSTR             = 5
	NparserSTRING          = 6
	NparserUSIZE           = 7
	NparserMAIN            = 8
	NparserPOWF            = 9
	NparserPOW             = 10
	NparserAS              = 11
	NparserVEC             = 12
	NparserVEC_M           = 13
	NparserMUT             = 14
	NparserLET             = 15
	NparserSTRUCT          = 16
	NparserTO_STRING       = 17
	NparserTO_OWNED        = 18
	NparserTRUE            = 19
	NparserFALSE           = 20
	NparserPRINT           = 21
	NparserFN              = 22
	NparserABS             = 23
	NparserSQRT            = 24
	NparserCLONE           = 25
	NparserNEW             = 26
	NparserLEN             = 27
	NparserPUSH            = 28
	NparserREMOVE          = 29
	NparserCONTAINS        = 30
	NparserINSERT          = 31
	NparserCAPACITY        = 32
	NparserWITH_CAPACITY   = 33
	NparserIF              = 34
	NparserELSE            = 35
	NparserMATCH           = 36
	NparserLOOP            = 37
	NparserWHILE           = 38
	NparserFOR             = 39
	NparserIN              = 40
	NparserRETURN          = 41
	NparserBREAK           = 42
	NparserCONTINUE        = 43
	NparserMOD             = 44
	NparserPUB             = 45
	NparserNUMERO          = 46
	NparserDECIMAL         = 47
	NparserID_CAMEL        = 48
	NparserID              = 49
	NparserDEFAULT         = 50
	NparserO               = 51
	NparserOR              = 52
	NparserAMPERSAND       = 53
	NparserAND             = 54
	NparserPRINT_OP_DEBUG  = 55
	NparserDOBLE_DOSPUNTOS = 56
	NparserDOSPUNTOS       = 57
	NparserRANGO           = 58
	NparserPUNTO           = 59
	NparserCOMA            = 60
	NparserPUNTOCOMA       = 61
	NparserMAYOR_I         = 62
	NparserMAYOR           = 63
	NparserMENOR_I         = 64
	NparserMENOR           = 65
	NparserIGUALDAD        = 66
	NparserCASE            = 67
	NparserDISTINTO        = 68
	NparserIGUAL           = 69
	NparserMODULO          = 70
	NparserMULTIPLICACION  = 71
	NparserDIVISION        = 72
	NparserFN_TIPO_RETORNO = 73
	NparserRESTA           = 74
	NparserSUMA            = 75
	NparserNOT             = 76
	NparserPREGUNTA        = 77
	NparserPAR_IZQ         = 78
	NparserPAR_DER         = 79
	NparserLLAVE_IZQ       = 80
	NparserLLAVE_DER       = 81
	NparserCORCHETE_IZQ    = 82
	NparserCORCHETE_DER    = 83
	NparserCADENA          = 84
	NparserASCII           = 85
	NparserCARACTER        = 86
	NparserWHITESPACE      = 87
	NparserCOMMENT         = 88
	NparserLINE_COMMENT    = 89
)

// Nparser rules.
const (
	NparserRULE_inicio                          = 0
	NparserRULE_bloque                          = 1
	NparserRULE_instrucciones                   = 2
	NparserRULE_instruccion                     = 3
	NparserRULE_declaracion                     = 4
	NparserRULE_declaracion_struct_template     = 5
	NparserRULE_atributos_struct_template       = 6
	NparserRULE_atributo_struct_template        = 7
	NparserRULE_struct_instancia                = 8
	NparserRULE_atributos_struct_instancia      = 9
	NparserRULE_atributo_struct_instancia       = 10
	NparserRULE_declaracion_funcion             = 11
	NparserRULE_asignacion                      = 12
	NparserRULE_accesos_vector_array_asignacion = 13
	NparserRULE_expresion                       = 14
	NparserRULE_tipo_dato                       = 15
	NparserRULE_control_if                      = 16
	NparserRULE_bloque_else_if                  = 17
	NparserRULE_else_if                         = 18
	NparserRULE_control_if_exp                  = 19
	NparserRULE_bloque_else_if_exp              = 20
	NparserRULE_else_if_exp                     = 21
	NparserRULE_control_expresion               = 22
	NparserRULE_control_match                   = 23
	NparserRULE_control_case                    = 24
	NparserRULE_cases                           = 25
	NparserRULE_case_match                      = 26
	NparserRULE_control_match_exp               = 27
	NparserRULE_control_case_exp                = 28
	NparserRULE_cases_exp                       = 29
	NparserRULE_case_match_exp                  = 30
	NparserRULE_ireturn                         = 31
	NparserRULE_ibreak                          = 32
	NparserRULE_icontinue                       = 33
	NparserRULE_control_loop                    = 34
	NparserRULE_control_loop_exp                = 35
	NparserRULE_printNormal                     = 36
	NparserRULE_printFormato                    = 37
	NparserRULE_elementosPrint                  = 38
	NparserRULE_control_while                   = 39
	NparserRULE_parametros_funcion              = 40
	NparserRULE_parametro                       = 41
	NparserRULE_llamada_funcion                 = 42
	NparserRULE_parametros_llamada              = 43
	NparserRULE_parametro_llamada_referencia    = 44
	NparserRULE_elementos_vector                = 45
	NparserRULE_metodos_iniciar_vector          = 46
	NparserRULE_metodos_vector                  = 47
	NparserRULE_potencia                        = 48
	NparserRULE_array                           = 49
	NparserRULE_dimension_array                 = 50
	NparserRULE_dimension_acceso_array          = 51
)

// IInicioContext is an interface to support dynamic dispatch.
type IInicioContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_instrucciones returns the _instrucciones rule contexts.
	Get_instrucciones() IInstruccionesContext

	// Set_instrucciones sets the _instrucciones rule contexts.
	Set_instrucciones(IInstruccionesContext)

	// GetLista returns the lista attribute.
	GetLista() *arraylist.List

	// SetLista sets the lista attribute.
	SetLista(*arraylist.List)

	// IsInicioContext differentiates from other interfaces.
	IsInicioContext()
}

type InicioContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	lista          *arraylist.List
	_instrucciones IInstruccionesContext
}

func NewEmptyInicioContext() *InicioContext {
	var p = new(InicioContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_inicio
	return p
}

func (*InicioContext) IsInicioContext() {}

func NewInicioContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InicioContext {
	var p = new(InicioContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_inicio

	return p
}

func (s *InicioContext) GetParser() antlr.Parser { return s.parser }

func (s *InicioContext) Get_instrucciones() IInstruccionesContext { return s._instrucciones }

func (s *InicioContext) Set_instrucciones(v IInstruccionesContext) { s._instrucciones = v }

func (s *InicioContext) GetLista() *arraylist.List { return s.lista }

func (s *InicioContext) SetLista(v *arraylist.List) { s.lista = v }

func (s *InicioContext) Instrucciones() IInstruccionesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstruccionesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInstruccionesContext)
}

func (s *InicioContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InicioContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Inicio() (localctx IInicioContext) {
	localctx = NewInicioContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, NparserRULE_inicio)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(104)

		var _x = p.Instrucciones()

		localctx.(*InicioContext)._instrucciones = _x
	}

	localctx.(*InicioContext).lista = localctx.(*InicioContext).Get_instrucciones().GetList()

	return localctx
}

// IBloqueContext is an interface to support dynamic dispatch.
type IBloqueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_instrucciones returns the _instrucciones rule contexts.
	Get_instrucciones() IInstruccionesContext

	// Set_instrucciones sets the _instrucciones rule contexts.
	Set_instrucciones(IInstruccionesContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsBloqueContext differentiates from other interfaces.
	IsBloqueContext()
}

type BloqueContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	list           *arraylist.List
	_instrucciones IInstruccionesContext
}

func NewEmptyBloqueContext() *BloqueContext {
	var p = new(BloqueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_bloque
	return p
}

func (*BloqueContext) IsBloqueContext() {}

func NewBloqueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BloqueContext {
	var p = new(BloqueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_bloque

	return p
}

func (s *BloqueContext) GetParser() antlr.Parser { return s.parser }

func (s *BloqueContext) Get_instrucciones() IInstruccionesContext { return s._instrucciones }

func (s *BloqueContext) Set_instrucciones(v IInstruccionesContext) { s._instrucciones = v }

func (s *BloqueContext) GetList() *arraylist.List { return s.list }

func (s *BloqueContext) SetList(v *arraylist.List) { s.list = v }

func (s *BloqueContext) LLAVE_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserLLAVE_IZQ, 0)
}

func (s *BloqueContext) Instrucciones() IInstruccionesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstruccionesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInstruccionesContext)
}

func (s *BloqueContext) LLAVE_DER() antlr.TerminalNode {
	return s.GetToken(NparserLLAVE_DER, 0)
}

func (s *BloqueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BloqueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Bloque() (localctx IBloqueContext) {
	localctx = NewBloqueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, NparserRULE_bloque)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(107)
		p.Match(NparserLLAVE_IZQ)
	}
	{
		p.SetState(108)

		var _x = p.Instrucciones()

		localctx.(*BloqueContext)._instrucciones = _x
	}
	{
		p.SetState(109)
		p.Match(NparserLLAVE_DER)
	}

	localctx.(*BloqueContext).list = localctx.(*BloqueContext).Get_instrucciones().GetList()

	return localctx
}

// IInstruccionesContext is an interface to support dynamic dispatch.
type IInstruccionesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_instruccion returns the _instruccion rule contexts.
	Get_instruccion() IInstruccionContext

	// Set_instruccion sets the _instruccion rule contexts.
	Set_instruccion(IInstruccionContext)

	// GetE returns the e rule context list.
	GetE() []IInstruccionContext

	// SetE sets the e rule context list.
	SetE([]IInstruccionContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsInstruccionesContext differentiates from other interfaces.
	IsInstruccionesContext()
}

type InstruccionesContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	list         *arraylist.List
	_instruccion IInstruccionContext
	e            []IInstruccionContext
}

func NewEmptyInstruccionesContext() *InstruccionesContext {
	var p = new(InstruccionesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_instrucciones
	return p
}

func (*InstruccionesContext) IsInstruccionesContext() {}

func NewInstruccionesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstruccionesContext {
	var p = new(InstruccionesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_instrucciones

	return p
}

func (s *InstruccionesContext) GetParser() antlr.Parser { return s.parser }

func (s *InstruccionesContext) Get_instruccion() IInstruccionContext { return s._instruccion }

func (s *InstruccionesContext) Set_instruccion(v IInstruccionContext) { s._instruccion = v }

func (s *InstruccionesContext) GetE() []IInstruccionContext { return s.e }

func (s *InstruccionesContext) SetE(v []IInstruccionContext) { s.e = v }

func (s *InstruccionesContext) GetList() *arraylist.List { return s.list }

func (s *InstruccionesContext) SetList(v *arraylist.List) { s.list = v }

func (s *InstruccionesContext) AllInstruccion() []IInstruccionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInstruccionContext)(nil)).Elem())
	var tst = make([]IInstruccionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInstruccionContext)
		}
	}

	return tst
}

func (s *InstruccionesContext) Instruccion(i int) IInstruccionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstruccionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInstruccionContext)
}

func (s *InstruccionesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstruccionesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Instrucciones() (localctx IInstruccionesContext) {
	localctx = NewInstruccionesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, NparserRULE_instrucciones)

	localctx.(*InstruccionesContext).list = arraylist.New()

	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(115)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<NparserF64)|(1<<NparserI64)|(1<<NparserVEC)|(1<<NparserVEC_M)|(1<<NparserLET)|(1<<NparserSTRUCT)|(1<<NparserTRUE)|(1<<NparserFALSE)|(1<<NparserPRINT)|(1<<NparserFN))) != 0) || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(NparserIF-34))|(1<<(NparserMATCH-34))|(1<<(NparserLOOP-34))|(1<<(NparserWHILE-34))|(1<<(NparserRETURN-34))|(1<<(NparserBREAK-34))|(1<<(NparserCONTINUE-34))|(1<<(NparserPUB-34))|(1<<(NparserNUMERO-34))|(1<<(NparserDECIMAL-34))|(1<<(NparserID_CAMEL-34))|(1<<(NparserID-34)))) != 0) || (((_la-74)&-(0x1f+1)) == 0 && ((1<<uint((_la-74)))&((1<<(NparserRESTA-74))|(1<<(NparserNOT-74))|(1<<(NparserPAR_IZQ-74))|(1<<(NparserCORCHETE_IZQ-74))|(1<<(NparserCADENA-74))|(1<<(NparserCARACTER-74)))) != 0) {
		{
			p.SetState(112)

			var _x = p.Instruccion()

			localctx.(*InstruccionesContext)._instruccion = _x
		}
		localctx.(*InstruccionesContext).e = append(localctx.(*InstruccionesContext).e, localctx.(*InstruccionesContext)._instruccion)

		p.SetState(117)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	listInt := localctx.(*InstruccionesContext).GetE()
	for _, e := range listInt {
		localctx.(*InstruccionesContext).list.Add(e.GetEx())
	}

	return localctx
}

// IInstruccionContext is an interface to support dynamic dispatch.
type IInstruccionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_llamada_funcion returns the _llamada_funcion rule contexts.
	Get_llamada_funcion() ILlamada_funcionContext

	// Get_asignacion returns the _asignacion rule contexts.
	Get_asignacion() IAsignacionContext

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// Get_declaracion returns the _declaracion rule contexts.
	Get_declaracion() IDeclaracionContext

	// Get_declaracion_funcion returns the _declaracion_funcion rule contexts.
	Get_declaracion_funcion() IDeclaracion_funcionContext

	// Get_control_if returns the _control_if rule contexts.
	Get_control_if() IControl_ifContext

	// Get_control_match returns the _control_match rule contexts.
	Get_control_match() IControl_matchContext

	// Get_control_loop returns the _control_loop rule contexts.
	Get_control_loop() IControl_loopContext

	// Get_control_while returns the _control_while rule contexts.
	Get_control_while() IControl_whileContext

	// Get_ibreak returns the _ibreak rule contexts.
	Get_ibreak() IIbreakContext

	// Get_icontinue returns the _icontinue rule contexts.
	Get_icontinue() IIcontinueContext

	// Get_ireturn returns the _ireturn rule contexts.
	Get_ireturn() IIreturnContext

	// Get_printNormal returns the _printNormal rule contexts.
	Get_printNormal() IPrintNormalContext

	// Get_printFormato returns the _printFormato rule contexts.
	Get_printFormato() IPrintFormatoContext

	// Get_metodos_vector returns the _metodos_vector rule contexts.
	Get_metodos_vector() IMetodos_vectorContext

	// Get_declaracion_struct_template returns the _declaracion_struct_template rule contexts.
	Get_declaracion_struct_template() IDeclaracion_struct_templateContext

	// Set_llamada_funcion sets the _llamada_funcion rule contexts.
	Set_llamada_funcion(ILlamada_funcionContext)

	// Set_asignacion sets the _asignacion rule contexts.
	Set_asignacion(IAsignacionContext)

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// Set_declaracion sets the _declaracion rule contexts.
	Set_declaracion(IDeclaracionContext)

	// Set_declaracion_funcion sets the _declaracion_funcion rule contexts.
	Set_declaracion_funcion(IDeclaracion_funcionContext)

	// Set_control_if sets the _control_if rule contexts.
	Set_control_if(IControl_ifContext)

	// Set_control_match sets the _control_match rule contexts.
	Set_control_match(IControl_matchContext)

	// Set_control_loop sets the _control_loop rule contexts.
	Set_control_loop(IControl_loopContext)

	// Set_control_while sets the _control_while rule contexts.
	Set_control_while(IControl_whileContext)

	// Set_ibreak sets the _ibreak rule contexts.
	Set_ibreak(IIbreakContext)

	// Set_icontinue sets the _icontinue rule contexts.
	Set_icontinue(IIcontinueContext)

	// Set_ireturn sets the _ireturn rule contexts.
	Set_ireturn(IIreturnContext)

	// Set_printNormal sets the _printNormal rule contexts.
	Set_printNormal(IPrintNormalContext)

	// Set_printFormato sets the _printFormato rule contexts.
	Set_printFormato(IPrintFormatoContext)

	// Set_metodos_vector sets the _metodos_vector rule contexts.
	Set_metodos_vector(IMetodos_vectorContext)

	// Set_declaracion_struct_template sets the _declaracion_struct_template rule contexts.
	Set_declaracion_struct_template(IDeclaracion_struct_templateContext)

	// GetEx returns the ex attribute.
	GetEx() interface{}

	// SetEx sets the ex attribute.
	SetEx(interface{})

	// IsInstruccionContext differentiates from other interfaces.
	IsInstruccionContext()
}

type InstruccionContext struct {
	*antlr.BaseParserRuleContext
	parser                       antlr.Parser
	ex                           interface{}
	_llamada_funcion             ILlamada_funcionContext
	_asignacion                  IAsignacionContext
	_expresion                   IExpresionContext
	_declaracion                 IDeclaracionContext
	_declaracion_funcion         IDeclaracion_funcionContext
	_control_if                  IControl_ifContext
	_control_match               IControl_matchContext
	_control_loop                IControl_loopContext
	_control_while               IControl_whileContext
	_ibreak                      IIbreakContext
	_icontinue                   IIcontinueContext
	_ireturn                     IIreturnContext
	_printNormal                 IPrintNormalContext
	_printFormato                IPrintFormatoContext
	_metodos_vector              IMetodos_vectorContext
	_declaracion_struct_template IDeclaracion_struct_templateContext
}

func NewEmptyInstruccionContext() *InstruccionContext {
	var p = new(InstruccionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_instruccion
	return p
}

func (*InstruccionContext) IsInstruccionContext() {}

func NewInstruccionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstruccionContext {
	var p = new(InstruccionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_instruccion

	return p
}

func (s *InstruccionContext) GetParser() antlr.Parser { return s.parser }

func (s *InstruccionContext) Get_llamada_funcion() ILlamada_funcionContext { return s._llamada_funcion }

func (s *InstruccionContext) Get_asignacion() IAsignacionContext { return s._asignacion }

func (s *InstruccionContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *InstruccionContext) Get_declaracion() IDeclaracionContext { return s._declaracion }

func (s *InstruccionContext) Get_declaracion_funcion() IDeclaracion_funcionContext {
	return s._declaracion_funcion
}

func (s *InstruccionContext) Get_control_if() IControl_ifContext { return s._control_if }

func (s *InstruccionContext) Get_control_match() IControl_matchContext { return s._control_match }

func (s *InstruccionContext) Get_control_loop() IControl_loopContext { return s._control_loop }

func (s *InstruccionContext) Get_control_while() IControl_whileContext { return s._control_while }

func (s *InstruccionContext) Get_ibreak() IIbreakContext { return s._ibreak }

func (s *InstruccionContext) Get_icontinue() IIcontinueContext { return s._icontinue }

func (s *InstruccionContext) Get_ireturn() IIreturnContext { return s._ireturn }

func (s *InstruccionContext) Get_printNormal() IPrintNormalContext { return s._printNormal }

func (s *InstruccionContext) Get_printFormato() IPrintFormatoContext { return s._printFormato }

func (s *InstruccionContext) Get_metodos_vector() IMetodos_vectorContext { return s._metodos_vector }

func (s *InstruccionContext) Get_declaracion_struct_template() IDeclaracion_struct_templateContext {
	return s._declaracion_struct_template
}

func (s *InstruccionContext) Set_llamada_funcion(v ILlamada_funcionContext) { s._llamada_funcion = v }

func (s *InstruccionContext) Set_asignacion(v IAsignacionContext) { s._asignacion = v }

func (s *InstruccionContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *InstruccionContext) Set_declaracion(v IDeclaracionContext) { s._declaracion = v }

func (s *InstruccionContext) Set_declaracion_funcion(v IDeclaracion_funcionContext) {
	s._declaracion_funcion = v
}

func (s *InstruccionContext) Set_control_if(v IControl_ifContext) { s._control_if = v }

func (s *InstruccionContext) Set_control_match(v IControl_matchContext) { s._control_match = v }

func (s *InstruccionContext) Set_control_loop(v IControl_loopContext) { s._control_loop = v }

func (s *InstruccionContext) Set_control_while(v IControl_whileContext) { s._control_while = v }

func (s *InstruccionContext) Set_ibreak(v IIbreakContext) { s._ibreak = v }

func (s *InstruccionContext) Set_icontinue(v IIcontinueContext) { s._icontinue = v }

func (s *InstruccionContext) Set_ireturn(v IIreturnContext) { s._ireturn = v }

func (s *InstruccionContext) Set_printNormal(v IPrintNormalContext) { s._printNormal = v }

func (s *InstruccionContext) Set_printFormato(v IPrintFormatoContext) { s._printFormato = v }

func (s *InstruccionContext) Set_metodos_vector(v IMetodos_vectorContext) { s._metodos_vector = v }

func (s *InstruccionContext) Set_declaracion_struct_template(v IDeclaracion_struct_templateContext) {
	s._declaracion_struct_template = v
}

func (s *InstruccionContext) GetEx() interface{} { return s.ex }

func (s *InstruccionContext) SetEx(v interface{}) { s.ex = v }

func (s *InstruccionContext) Llamada_funcion() ILlamada_funcionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILlamada_funcionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILlamada_funcionContext)
}

func (s *InstruccionContext) PUNTOCOMA() antlr.TerminalNode {
	return s.GetToken(NparserPUNTOCOMA, 0)
}

func (s *InstruccionContext) Asignacion() IAsignacionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsignacionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsignacionContext)
}

func (s *InstruccionContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *InstruccionContext) Declaracion() IDeclaracionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaracionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaracionContext)
}

func (s *InstruccionContext) Declaracion_funcion() IDeclaracion_funcionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaracion_funcionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaracion_funcionContext)
}

func (s *InstruccionContext) Control_if() IControl_ifContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_ifContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_ifContext)
}

func (s *InstruccionContext) Control_match() IControl_matchContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_matchContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_matchContext)
}

func (s *InstruccionContext) Control_loop() IControl_loopContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_loopContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_loopContext)
}

func (s *InstruccionContext) Control_while() IControl_whileContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_whileContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_whileContext)
}

func (s *InstruccionContext) Ibreak() IIbreakContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIbreakContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIbreakContext)
}

func (s *InstruccionContext) Icontinue() IIcontinueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIcontinueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIcontinueContext)
}

func (s *InstruccionContext) Ireturn() IIreturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIreturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIreturnContext)
}

func (s *InstruccionContext) PrintNormal() IPrintNormalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrintNormalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrintNormalContext)
}

func (s *InstruccionContext) PrintFormato() IPrintFormatoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrintFormatoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrintFormatoContext)
}

func (s *InstruccionContext) Metodos_vector() IMetodos_vectorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMetodos_vectorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMetodos_vectorContext)
}

func (s *InstruccionContext) Declaracion_struct_template() IDeclaracion_struct_templateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaracion_struct_templateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaracion_struct_templateContext)
}

func (s *InstruccionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstruccionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Instruccion() (localctx IInstruccionContext) {
	localctx = NewInstruccionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, NparserRULE_instruccion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(181)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(120)

			var _x = p.Llamada_funcion()

			localctx.(*InstruccionContext)._llamada_funcion = _x
		}
		{
			p.SetState(121)
			p.Match(NparserPUNTOCOMA)
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_llamada_funcion().GetEx()

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(124)

			var _x = p.Asignacion()

			localctx.(*InstruccionContext)._asignacion = _x
		}
		{
			p.SetState(125)
			p.Match(NparserPUNTOCOMA)
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_asignacion().GetEx()

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(128)

			var _x = p.expresion(0)

			localctx.(*InstruccionContext)._expresion = _x
		}
		{
			p.SetState(129)
			p.Match(NparserPUNTOCOMA)
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_expresion().GetEx()

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(132)

			var _x = p.expresion(0)

			localctx.(*InstruccionContext)._expresion = _x
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_expresion().GetEx()

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(135)

			var _x = p.Declaracion()

			localctx.(*InstruccionContext)._declaracion = _x
		}
		{
			p.SetState(136)
			p.Match(NparserPUNTOCOMA)
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_declaracion().GetEx()

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(139)

			var _x = p.Declaracion_funcion()

			localctx.(*InstruccionContext)._declaracion_funcion = _x
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_declaracion_funcion().GetEx()

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(142)

			var _x = p.Control_if()

			localctx.(*InstruccionContext)._control_if = _x
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_control_if().GetEx()

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(145)

			var _x = p.Control_match()

			localctx.(*InstruccionContext)._control_match = _x
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_control_match().GetEx()

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(148)

			var _x = p.Control_loop()

			localctx.(*InstruccionContext)._control_loop = _x
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_control_loop().GetEx()

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(151)

			var _x = p.Control_while()

			localctx.(*InstruccionContext)._control_while = _x
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_control_while().GetEx()

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(154)

			var _x = p.Ibreak()

			localctx.(*InstruccionContext)._ibreak = _x
		}
		{
			p.SetState(155)
			p.Match(NparserPUNTOCOMA)
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_ibreak().GetEx()

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(158)

			var _x = p.Icontinue()

			localctx.(*InstruccionContext)._icontinue = _x
		}
		{
			p.SetState(159)
			p.Match(NparserPUNTOCOMA)
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_icontinue().GetEx()

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(162)

			var _x = p.Ireturn()

			localctx.(*InstruccionContext)._ireturn = _x
		}
		{
			p.SetState(163)
			p.Match(NparserPUNTOCOMA)
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_ireturn().GetEx()

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(166)

			var _x = p.PrintNormal()

			localctx.(*InstruccionContext)._printNormal = _x
		}
		{
			p.SetState(167)
			p.Match(NparserPUNTOCOMA)
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_printNormal().GetEx()

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(170)

			var _x = p.PrintFormato()

			localctx.(*InstruccionContext)._printFormato = _x
		}
		{
			p.SetState(171)
			p.Match(NparserPUNTOCOMA)
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_printFormato().GetEx()

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(174)

			var _x = p.Metodos_vector()

			localctx.(*InstruccionContext)._metodos_vector = _x
		}
		{
			p.SetState(175)
			p.Match(NparserPUNTOCOMA)
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_metodos_vector().GetEx()

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(178)

			var _x = p.Declaracion_struct_template()

			localctx.(*InstruccionContext)._declaracion_struct_template = _x
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_declaracion_struct_template().GetEx()

	}

	return localctx
}

// IDeclaracionContext is an interface to support dynamic dispatch.
type IDeclaracionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_LET returns the _LET token.
	Get_LET() antlr.Token

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Set_LET sets the _LET token.
	Set_LET(antlr.Token)

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// Get_control_expresion returns the _control_expresion rule contexts.
	Get_control_expresion() IControl_expresionContext

	// Get_tipo_dato returns the _tipo_dato rule contexts.
	Get_tipo_dato() ITipo_datoContext

	// GetDimension returns the dimension rule contexts.
	GetDimension() IDimension_arrayContext

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// Set_control_expresion sets the _control_expresion rule contexts.
	Set_control_expresion(IControl_expresionContext)

	// Set_tipo_dato sets the _tipo_dato rule contexts.
	Set_tipo_dato(ITipo_datoContext)

	// SetDimension sets the dimension rule contexts.
	SetDimension(IDimension_arrayContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsDeclaracionContext differentiates from other interfaces.
	IsDeclaracionContext()
}

type DeclaracionContext struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	ex                 Ast.Instruccion
	_LET               antlr.Token
	_ID                antlr.Token
	_expresion         IExpresionContext
	_control_expresion IControl_expresionContext
	_tipo_dato         ITipo_datoContext
	dimension          IDimension_arrayContext
}

func NewEmptyDeclaracionContext() *DeclaracionContext {
	var p = new(DeclaracionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_declaracion
	return p
}

func (*DeclaracionContext) IsDeclaracionContext() {}

func NewDeclaracionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclaracionContext {
	var p = new(DeclaracionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_declaracion

	return p
}

func (s *DeclaracionContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclaracionContext) Get_LET() antlr.Token { return s._LET }

func (s *DeclaracionContext) Get_ID() antlr.Token { return s._ID }

func (s *DeclaracionContext) Set_LET(v antlr.Token) { s._LET = v }

func (s *DeclaracionContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *DeclaracionContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *DeclaracionContext) Get_control_expresion() IControl_expresionContext {
	return s._control_expresion
}

func (s *DeclaracionContext) Get_tipo_dato() ITipo_datoContext { return s._tipo_dato }

func (s *DeclaracionContext) GetDimension() IDimension_arrayContext { return s.dimension }

func (s *DeclaracionContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *DeclaracionContext) Set_control_expresion(v IControl_expresionContext) {
	s._control_expresion = v
}

func (s *DeclaracionContext) Set_tipo_dato(v ITipo_datoContext) { s._tipo_dato = v }

func (s *DeclaracionContext) SetDimension(v IDimension_arrayContext) { s.dimension = v }

func (s *DeclaracionContext) GetEx() Ast.Instruccion { return s.ex }

func (s *DeclaracionContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *DeclaracionContext) LET() antlr.TerminalNode {
	return s.GetToken(NparserLET, 0)
}

func (s *DeclaracionContext) ID() antlr.TerminalNode {
	return s.GetToken(NparserID, 0)
}

func (s *DeclaracionContext) IGUAL() antlr.TerminalNode {
	return s.GetToken(NparserIGUAL, 0)
}

func (s *DeclaracionContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *DeclaracionContext) Control_expresion() IControl_expresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_expresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_expresionContext)
}

func (s *DeclaracionContext) DOSPUNTOS() antlr.TerminalNode {
	return s.GetToken(NparserDOSPUNTOS, 0)
}

func (s *DeclaracionContext) Tipo_dato() ITipo_datoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipo_datoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipo_datoContext)
}

func (s *DeclaracionContext) MUT() antlr.TerminalNode {
	return s.GetToken(NparserMUT, 0)
}

func (s *DeclaracionContext) VEC() antlr.TerminalNode {
	return s.GetToken(NparserVEC, 0)
}

func (s *DeclaracionContext) MENOR() antlr.TerminalNode {
	return s.GetToken(NparserMENOR, 0)
}

func (s *DeclaracionContext) MAYOR() antlr.TerminalNode {
	return s.GetToken(NparserMAYOR, 0)
}

func (s *DeclaracionContext) Dimension_array() IDimension_arrayContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDimension_arrayContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDimension_arrayContext)
}

func (s *DeclaracionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclaracionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Declaracion() (localctx IDeclaracionContext) {
	localctx = NewDeclaracionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, NparserRULE_declaracion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(303)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 2, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(183)

			var _m = p.Match(NparserLET)

			localctx.(*DeclaracionContext)._LET = _m
		}
		{
			p.SetState(184)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(185)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(186)

			var _x = p.expresion(0)

			localctx.(*DeclaracionContext)._expresion = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetColumn()
			}
		}())
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), Ast.INDEFINIDO,
			false, false, Ast.VOID, localctx.(*DeclaracionContext).Get_expresion().GetEx(), fila, columna)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(189)

			var _m = p.Match(NparserLET)

			localctx.(*DeclaracionContext)._LET = _m
		}
		{
			p.SetState(190)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(191)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(192)

			var _x = p.Control_expresion()

			localctx.(*DeclaracionContext)._control_expresion = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetColumn()
			}
		}())
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), Ast.INDEFINIDO,
			false, false, Ast.VOID, localctx.(*DeclaracionContext).Get_control_expresion().GetEx(), fila, columna)

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(195)

			var _m = p.Match(NparserLET)

			localctx.(*DeclaracionContext)._LET = _m
		}
		{
			p.SetState(196)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(197)
			p.Match(NparserDOSPUNTOS)
		}
		{
			p.SetState(198)

			var _x = p.Tipo_dato()

			localctx.(*DeclaracionContext)._tipo_dato = _x
		}
		{
			p.SetState(199)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(200)

			var _x = p.expresion(0)

			localctx.(*DeclaracionContext)._expresion = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetColumn()
			}
		}())
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), localctx.(*DeclaracionContext).Get_tipo_dato().GetEx(),
			false, false, Ast.VOID, localctx.(*DeclaracionContext).Get_expresion().GetEx(), fila, columna)

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(203)

			var _m = p.Match(NparserLET)

			localctx.(*DeclaracionContext)._LET = _m
		}
		{
			p.SetState(204)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(205)
			p.Match(NparserDOSPUNTOS)
		}
		{
			p.SetState(206)

			var _x = p.Tipo_dato()

			localctx.(*DeclaracionContext)._tipo_dato = _x
		}
		{
			p.SetState(207)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(208)

			var _x = p.Control_expresion()

			localctx.(*DeclaracionContext)._control_expresion = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetColumn()
			}
		}())
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), localctx.(*DeclaracionContext).Get_tipo_dato().GetEx(),
			false, false, Ast.VOID, localctx.(*DeclaracionContext).Get_control_expresion().GetEx(), fila, columna)

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(211)

			var _m = p.Match(NparserLET)

			localctx.(*DeclaracionContext)._LET = _m
		}
		{
			p.SetState(212)
			p.Match(NparserMUT)
		}
		{
			p.SetState(213)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(214)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(215)

			var _x = p.expresion(0)

			localctx.(*DeclaracionContext)._expresion = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetColumn()
			}
		}())
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), Ast.INDEFINIDO,
			true, false, Ast.VOID, localctx.(*DeclaracionContext).Get_expresion().GetEx(), fila, columna)

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(218)
			p.Match(NparserLET)
		}
		{
			p.SetState(219)
			p.Match(NparserMUT)
		}
		{
			p.SetState(220)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(221)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(222)

			var _x = p.Control_expresion()

			localctx.(*DeclaracionContext)._control_expresion = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetColumn()
			}
		}())
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), Ast.INDEFINIDO,
			true, false, Ast.VOID, localctx.(*DeclaracionContext).Get_control_expresion().GetEx(), fila, columna)

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(225)

			var _m = p.Match(NparserLET)

			localctx.(*DeclaracionContext)._LET = _m
		}
		{
			p.SetState(226)
			p.Match(NparserMUT)
		}
		{
			p.SetState(227)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(228)
			p.Match(NparserDOSPUNTOS)
		}
		{
			p.SetState(229)

			var _x = p.Tipo_dato()

			localctx.(*DeclaracionContext)._tipo_dato = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetColumn()
			}
		}())
		valor := expresiones.NewPrimitivo(nil, Ast.NULL, fila, columna)
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), localctx.(*DeclaracionContext).Get_tipo_dato().GetEx(),
			true, false, Ast.VOID, valor, fila, columna)

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(232)

			var _m = p.Match(NparserLET)

			localctx.(*DeclaracionContext)._LET = _m
		}
		{
			p.SetState(233)
			p.Match(NparserMUT)
		}
		{
			p.SetState(234)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(235)
			p.Match(NparserDOSPUNTOS)
		}
		{
			p.SetState(236)

			var _x = p.Tipo_dato()

			localctx.(*DeclaracionContext)._tipo_dato = _x
		}
		{
			p.SetState(237)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(238)

			var _x = p.expresion(0)

			localctx.(*DeclaracionContext)._expresion = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetColumn()
			}
		}())
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), localctx.(*DeclaracionContext).Get_tipo_dato().GetEx(),
			true, false, Ast.VOID, localctx.(*DeclaracionContext).Get_expresion().GetEx(), fila, columna)

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(241)

			var _m = p.Match(NparserLET)

			localctx.(*DeclaracionContext)._LET = _m
		}
		{
			p.SetState(242)
			p.Match(NparserMUT)
		}
		{
			p.SetState(243)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(244)
			p.Match(NparserDOSPUNTOS)
		}
		{
			p.SetState(245)

			var _x = p.Tipo_dato()

			localctx.(*DeclaracionContext)._tipo_dato = _x
		}
		{
			p.SetState(246)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(247)

			var _x = p.Control_expresion()

			localctx.(*DeclaracionContext)._control_expresion = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetColumn()
			}
		}())
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), localctx.(*DeclaracionContext).Get_tipo_dato().GetEx(),
			true, false, Ast.VOID, localctx.(*DeclaracionContext).Get_control_expresion().GetEx(), fila, columna)

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(250)

			var _m = p.Match(NparserLET)

			localctx.(*DeclaracionContext)._LET = _m
		}
		{
			p.SetState(251)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(252)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(253)

			var _x = p.expresion(0)

			localctx.(*DeclaracionContext)._expresion = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetColumn()
			}
		}())
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), Ast.VECTOR, false, false, Ast.VOID, localctx.(*DeclaracionContext).Get_expresion().GetEx(), fila, columna)

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(256)

			var _m = p.Match(NparserLET)

			localctx.(*DeclaracionContext)._LET = _m
		}
		{
			p.SetState(257)
			p.Match(NparserMUT)
		}
		{
			p.SetState(258)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(259)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(260)

			var _x = p.expresion(0)

			localctx.(*DeclaracionContext)._expresion = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetColumn()
			}
		}())
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), Ast.VECTOR, true, false, Ast.VOID, localctx.(*DeclaracionContext).Get_expresion().GetEx(), fila, columna)

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(263)

			var _m = p.Match(NparserLET)

			localctx.(*DeclaracionContext)._LET = _m
		}
		{
			p.SetState(264)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(265)
			p.Match(NparserDOSPUNTOS)
		}
		{
			p.SetState(266)
			p.Match(NparserVEC)
		}
		{
			p.SetState(267)
			p.Match(NparserMENOR)
		}
		{
			p.SetState(268)

			var _x = p.Tipo_dato()

			localctx.(*DeclaracionContext)._tipo_dato = _x
		}
		{
			p.SetState(269)
			p.Match(NparserMAYOR)
		}
		{
			p.SetState(270)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(271)

			var _x = p.expresion(0)

			localctx.(*DeclaracionContext)._expresion = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetColumn()
			}
		}())
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), Ast.VECTOR, false, false, localctx.(*DeclaracionContext).Get_tipo_dato().GetEx(), localctx.(*DeclaracionContext).Get_expresion().GetEx(), fila, columna)

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(274)

			var _m = p.Match(NparserLET)

			localctx.(*DeclaracionContext)._LET = _m
		}
		{
			p.SetState(275)
			p.Match(NparserMUT)
		}
		{
			p.SetState(276)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(277)
			p.Match(NparserDOSPUNTOS)
		}
		{
			p.SetState(278)
			p.Match(NparserVEC)
		}
		{
			p.SetState(279)
			p.Match(NparserMENOR)
		}
		{
			p.SetState(280)

			var _x = p.Tipo_dato()

			localctx.(*DeclaracionContext)._tipo_dato = _x
		}
		{
			p.SetState(281)
			p.Match(NparserMAYOR)
		}
		{
			p.SetState(282)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(283)

			var _x = p.expresion(0)

			localctx.(*DeclaracionContext)._expresion = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetColumn()
			}
		}())
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), Ast.VECTOR, true, false, localctx.(*DeclaracionContext).Get_tipo_dato().GetEx(), localctx.(*DeclaracionContext).Get_expresion().GetEx(), fila, columna)

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(286)

			var _m = p.Match(NparserLET)

			localctx.(*DeclaracionContext)._LET = _m
		}
		{
			p.SetState(287)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(288)
			p.Match(NparserDOSPUNTOS)
		}
		{
			p.SetState(289)

			var _x = p.Dimension_array()

			localctx.(*DeclaracionContext).dimension = _x
		}
		{
			p.SetState(290)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(291)

			var _x = p.expresion(0)

			localctx.(*DeclaracionContext)._expresion = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetColumn()
			}
		}())
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracionArray((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), localctx.(*DeclaracionContext).GetDimension().GetEx(), false, false, localctx.(*DeclaracionContext).Get_expresion().GetEx(), fila, columna)

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(294)

			var _m = p.Match(NparserLET)

			localctx.(*DeclaracionContext)._LET = _m
		}
		{
			p.SetState(295)
			p.Match(NparserMUT)
		}
		{
			p.SetState(296)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(297)
			p.Match(NparserDOSPUNTOS)
		}
		{
			p.SetState(298)

			var _x = p.Dimension_array()

			localctx.(*DeclaracionContext).dimension = _x
		}
		{
			p.SetState(299)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(300)

			var _x = p.expresion(0)

			localctx.(*DeclaracionContext)._expresion = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetColumn()
			}
		}())
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracionArray((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), localctx.(*DeclaracionContext).GetDimension().GetEx(), true, false, localctx.(*DeclaracionContext).Get_expresion().GetEx(), fila, columna)

	}

	return localctx
}

// IDeclaracion_struct_templateContext is an interface to support dynamic dispatch.
type IDeclaracion_struct_templateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetId returns the id token.
	GetId() antlr.Token

	// SetId sets the id token.
	SetId(antlr.Token)

	// GetAtt returns the att rule contexts.
	GetAtt() IAtributos_struct_templateContext

	// SetAtt sets the att rule contexts.
	SetAtt(IAtributos_struct_templateContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsDeclaracion_struct_templateContext differentiates from other interfaces.
	IsDeclaracion_struct_templateContext()
}

type Declaracion_struct_templateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	ex     Ast.Instruccion
	id     antlr.Token
	att    IAtributos_struct_templateContext
}

func NewEmptyDeclaracion_struct_templateContext() *Declaracion_struct_templateContext {
	var p = new(Declaracion_struct_templateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_declaracion_struct_template
	return p
}

func (*Declaracion_struct_templateContext) IsDeclaracion_struct_templateContext() {}

func NewDeclaracion_struct_templateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Declaracion_struct_templateContext {
	var p = new(Declaracion_struct_templateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_declaracion_struct_template

	return p
}

func (s *Declaracion_struct_templateContext) GetParser() antlr.Parser { return s.parser }

func (s *Declaracion_struct_templateContext) GetId() antlr.Token { return s.id }

func (s *Declaracion_struct_templateContext) SetId(v antlr.Token) { s.id = v }

func (s *Declaracion_struct_templateContext) GetAtt() IAtributos_struct_templateContext { return s.att }

func (s *Declaracion_struct_templateContext) SetAtt(v IAtributos_struct_templateContext) { s.att = v }

func (s *Declaracion_struct_templateContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Declaracion_struct_templateContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Declaracion_struct_templateContext) PUB() antlr.TerminalNode {
	return s.GetToken(NparserPUB, 0)
}

func (s *Declaracion_struct_templateContext) STRUCT() antlr.TerminalNode {
	return s.GetToken(NparserSTRUCT, 0)
}

func (s *Declaracion_struct_templateContext) LLAVE_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserLLAVE_IZQ, 0)
}

func (s *Declaracion_struct_templateContext) LLAVE_DER() antlr.TerminalNode {
	return s.GetToken(NparserLLAVE_DER, 0)
}

func (s *Declaracion_struct_templateContext) ID_CAMEL() antlr.TerminalNode {
	return s.GetToken(NparserID_CAMEL, 0)
}

func (s *Declaracion_struct_templateContext) Atributos_struct_template() IAtributos_struct_templateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtributos_struct_templateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtributos_struct_templateContext)
}

func (s *Declaracion_struct_templateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Declaracion_struct_templateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Declaracion_struct_template() (localctx IDeclaracion_struct_templateContext) {
	localctx = NewDeclaracion_struct_templateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, NparserRULE_declaracion_struct_template)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(320)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case NparserPUB:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(305)
			p.Match(NparserPUB)
		}
		{
			p.SetState(306)
			p.Match(NparserSTRUCT)
		}
		{
			p.SetState(307)

			var _m = p.Match(NparserID_CAMEL)

			localctx.(*Declaracion_struct_templateContext).id = _m
		}
		{
			p.SetState(308)
			p.Match(NparserLLAVE_IZQ)
		}
		{
			p.SetState(309)

			var _x = p.atributos_struct_template(0)

			localctx.(*Declaracion_struct_templateContext).att = _x
		}
		{
			p.SetState(310)
			p.Match(NparserLLAVE_DER)
		}

		fila := (func() int {
			if localctx.(*Declaracion_struct_templateContext).GetId() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_struct_templateContext).GetId().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Declaracion_struct_templateContext).GetId() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_struct_templateContext).GetId().GetColumn()
			}
		}())
		//tipo := simbolos.NewTipo(Ast.STRUCT, (func() string { if localctx.(*Declaracion_struct_templateContext).GetId() == nil { return "" } else { return localctx.(*Declaracion_struct_templateContext).GetId().GetText() }}()), fila,columna)
		localctx.(*Declaracion_struct_templateContext).ex = simbolos.NewDeclaracionStructTemplate((func() string {
			if localctx.(*Declaracion_struct_templateContext).GetId() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_struct_templateContext).GetId().GetText()
			}
		}()), localctx.(*Declaracion_struct_templateContext).GetAtt().GetList(), true, fila, columna)

	case NparserSTRUCT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(313)
			p.Match(NparserSTRUCT)
		}
		{
			p.SetState(314)

			var _m = p.Match(NparserID_CAMEL)

			localctx.(*Declaracion_struct_templateContext).id = _m
		}
		{
			p.SetState(315)
			p.Match(NparserLLAVE_IZQ)
		}
		{
			p.SetState(316)

			var _x = p.atributos_struct_template(0)

			localctx.(*Declaracion_struct_templateContext).att = _x
		}
		{
			p.SetState(317)
			p.Match(NparserLLAVE_DER)
		}

		fila := (func() int {
			if localctx.(*Declaracion_struct_templateContext).GetId() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_struct_templateContext).GetId().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Declaracion_struct_templateContext).GetId() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_struct_templateContext).GetId().GetColumn()
			}
		}())
		//tipo := simbolos.NewTipo(Ast.STRUCT, (func() string { if localctx.(*Declaracion_struct_templateContext).GetId() == nil { return "" } else { return localctx.(*Declaracion_struct_templateContext).GetId().GetText() }}()), fila,columna)
		localctx.(*Declaracion_struct_templateContext).ex = simbolos.NewDeclaracionStructTemplate((func() string {
			if localctx.(*Declaracion_struct_templateContext).GetId() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_struct_templateContext).GetId().GetText()
			}
		}()), localctx.(*Declaracion_struct_templateContext).GetAtt().GetList(), false, fila, columna)

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAtributos_struct_templateContext is an interface to support dynamic dispatch.
type IAtributos_struct_templateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLista_elementos returns the lista_elementos rule contexts.
	GetLista_elementos() IAtributos_struct_templateContext

	// GetAtt returns the att rule contexts.
	GetAtt() IAtributo_struct_templateContext

	// SetLista_elementos sets the lista_elementos rule contexts.
	SetLista_elementos(IAtributos_struct_templateContext)

	// SetAtt sets the att rule contexts.
	SetAtt(IAtributo_struct_templateContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsAtributos_struct_templateContext differentiates from other interfaces.
	IsAtributos_struct_templateContext()
}

type Atributos_struct_templateContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	list            *arraylist.List
	lista_elementos IAtributos_struct_templateContext
	att             IAtributo_struct_templateContext
}

func NewEmptyAtributos_struct_templateContext() *Atributos_struct_templateContext {
	var p = new(Atributos_struct_templateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_atributos_struct_template
	return p
}

func (*Atributos_struct_templateContext) IsAtributos_struct_templateContext() {}

func NewAtributos_struct_templateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Atributos_struct_templateContext {
	var p = new(Atributos_struct_templateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_atributos_struct_template

	return p
}

func (s *Atributos_struct_templateContext) GetParser() antlr.Parser { return s.parser }

func (s *Atributos_struct_templateContext) GetLista_elementos() IAtributos_struct_templateContext {
	return s.lista_elementos
}

func (s *Atributos_struct_templateContext) GetAtt() IAtributo_struct_templateContext { return s.att }

func (s *Atributos_struct_templateContext) SetLista_elementos(v IAtributos_struct_templateContext) {
	s.lista_elementos = v
}

func (s *Atributos_struct_templateContext) SetAtt(v IAtributo_struct_templateContext) { s.att = v }

func (s *Atributos_struct_templateContext) GetList() *arraylist.List { return s.list }

func (s *Atributos_struct_templateContext) SetList(v *arraylist.List) { s.list = v }

func (s *Atributos_struct_templateContext) Atributo_struct_template() IAtributo_struct_templateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtributo_struct_templateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtributo_struct_templateContext)
}

func (s *Atributos_struct_templateContext) COMA() antlr.TerminalNode {
	return s.GetToken(NparserCOMA, 0)
}

func (s *Atributos_struct_templateContext) Atributos_struct_template() IAtributos_struct_templateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtributos_struct_templateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtributos_struct_templateContext)
}

func (s *Atributos_struct_templateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Atributos_struct_templateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Atributos_struct_template() (localctx IAtributos_struct_templateContext) {
	return p.atributos_struct_template(0)
}

func (p *Nparser) atributos_struct_template(_p int) (localctx IAtributos_struct_templateContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewAtributos_struct_templateContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IAtributos_struct_templateContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 12
	p.EnterRecursionRule(localctx, 12, NparserRULE_atributos_struct_template, _p)
	localctx.(*Atributos_struct_templateContext).list = arraylist.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(323)

		var _x = p.Atributo_struct_template()

		localctx.(*Atributos_struct_templateContext).att = _x
	}

	localctx.(*Atributos_struct_templateContext).list.Add(localctx.(*Atributos_struct_templateContext).GetAtt().GetEx())

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(333)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewAtributos_struct_templateContext(p, _parentctx, _parentState)
			localctx.(*Atributos_struct_templateContext).lista_elementos = _prevctx
			p.PushNewRecursionContext(localctx, _startState, NparserRULE_atributos_struct_template)
			p.SetState(326)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(327)
				p.Match(NparserCOMA)
			}
			{
				p.SetState(328)

				var _x = p.Atributo_struct_template()

				localctx.(*Atributos_struct_templateContext).att = _x
			}

			localctx.(*Atributos_struct_templateContext).GetLista_elementos().GetList().Add(localctx.(*Atributos_struct_templateContext).GetAtt().GetEx())
			localctx.(*Atributos_struct_templateContext).list = localctx.(*Atributos_struct_templateContext).GetLista_elementos().GetList()

		}
		p.SetState(335)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext())
	}

	return localctx
}

// IAtributo_struct_templateContext is an interface to support dynamic dispatch.
type IAtributo_struct_templateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// Get_tipo_dato returns the _tipo_dato rule contexts.
	Get_tipo_dato() ITipo_datoContext

	// Set_tipo_dato sets the _tipo_dato rule contexts.
	Set_tipo_dato(ITipo_datoContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Expresion

	// SetEx sets the ex attribute.
	SetEx(Ast.Expresion)

	// IsAtributo_struct_templateContext differentiates from other interfaces.
	IsAtributo_struct_templateContext()
}

type Atributo_struct_templateContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	ex         Ast.Expresion
	_ID        antlr.Token
	_tipo_dato ITipo_datoContext
}

func NewEmptyAtributo_struct_templateContext() *Atributo_struct_templateContext {
	var p = new(Atributo_struct_templateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_atributo_struct_template
	return p
}

func (*Atributo_struct_templateContext) IsAtributo_struct_templateContext() {}

func NewAtributo_struct_templateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Atributo_struct_templateContext {
	var p = new(Atributo_struct_templateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_atributo_struct_template

	return p
}

func (s *Atributo_struct_templateContext) GetParser() antlr.Parser { return s.parser }

func (s *Atributo_struct_templateContext) Get_ID() antlr.Token { return s._ID }

func (s *Atributo_struct_templateContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *Atributo_struct_templateContext) Get_tipo_dato() ITipo_datoContext { return s._tipo_dato }

func (s *Atributo_struct_templateContext) Set_tipo_dato(v ITipo_datoContext) { s._tipo_dato = v }

func (s *Atributo_struct_templateContext) GetEx() Ast.Expresion { return s.ex }

func (s *Atributo_struct_templateContext) SetEx(v Ast.Expresion) { s.ex = v }

func (s *Atributo_struct_templateContext) ID() antlr.TerminalNode {
	return s.GetToken(NparserID, 0)
}

func (s *Atributo_struct_templateContext) DOSPUNTOS() antlr.TerminalNode {
	return s.GetToken(NparserDOSPUNTOS, 0)
}

func (s *Atributo_struct_templateContext) Tipo_dato() ITipo_datoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipo_datoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipo_datoContext)
}

func (s *Atributo_struct_templateContext) PUB() antlr.TerminalNode {
	return s.GetToken(NparserPUB, 0)
}

func (s *Atributo_struct_templateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Atributo_struct_templateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Atributo_struct_template() (localctx IAtributo_struct_templateContext) {
	localctx = NewAtributo_struct_templateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, NparserRULE_atributo_struct_template)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(347)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case NparserID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(336)

			var _m = p.Match(NparserID)

			localctx.(*Atributo_struct_templateContext)._ID = _m
		}
		{
			p.SetState(337)
			p.Match(NparserDOSPUNTOS)
		}
		{
			p.SetState(338)

			var _x = p.Tipo_dato()

			localctx.(*Atributo_struct_templateContext)._tipo_dato = _x
		}

		fila := (func() int {
			if localctx.(*Atributo_struct_templateContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Atributo_struct_templateContext).Get_ID().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Atributo_struct_templateContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Atributo_struct_templateContext).Get_ID().GetColumn()
			}
		}())
		localctx.(*Atributo_struct_templateContext).ex = simbolos.NewAtributoTemplate((func() string {
			if localctx.(*Atributo_struct_templateContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Atributo_struct_templateContext).Get_ID().GetText()
			}
		}()), localctx.(*Atributo_struct_templateContext).Get_tipo_dato().GetEx(), false, fila, columna)

	case NparserPUB:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(341)
			p.Match(NparserPUB)
		}
		{
			p.SetState(342)

			var _m = p.Match(NparserID)

			localctx.(*Atributo_struct_templateContext)._ID = _m
		}
		{
			p.SetState(343)
			p.Match(NparserDOSPUNTOS)
		}
		{
			p.SetState(344)

			var _x = p.Tipo_dato()

			localctx.(*Atributo_struct_templateContext)._tipo_dato = _x
		}

		fila := (func() int {
			if localctx.(*Atributo_struct_templateContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Atributo_struct_templateContext).Get_ID().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Atributo_struct_templateContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Atributo_struct_templateContext).Get_ID().GetColumn()
			}
		}())
		localctx.(*Atributo_struct_templateContext).ex = simbolos.NewAtributoTemplate((func() string {
			if localctx.(*Atributo_struct_templateContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Atributo_struct_templateContext).Get_ID().GetText()
			}
		}()), localctx.(*Atributo_struct_templateContext).Get_tipo_dato().GetEx(), true, fila, columna)

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IStruct_instanciaContext is an interface to support dynamic dispatch.
type IStruct_instanciaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetId returns the id token.
	GetId() antlr.Token

	// SetId sets the id token.
	SetId(antlr.Token)

	// GetAtt returns the att rule contexts.
	GetAtt() IAtributos_struct_instanciaContext

	// SetAtt sets the att rule contexts.
	SetAtt(IAtributos_struct_instanciaContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Expresion

	// SetEx sets the ex attribute.
	SetEx(Ast.Expresion)

	// IsStruct_instanciaContext differentiates from other interfaces.
	IsStruct_instanciaContext()
}

type Struct_instanciaContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	ex     Ast.Expresion
	id     antlr.Token
	att    IAtributos_struct_instanciaContext
}

func NewEmptyStruct_instanciaContext() *Struct_instanciaContext {
	var p = new(Struct_instanciaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_struct_instancia
	return p
}

func (*Struct_instanciaContext) IsStruct_instanciaContext() {}

func NewStruct_instanciaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Struct_instanciaContext {
	var p = new(Struct_instanciaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_struct_instancia

	return p
}

func (s *Struct_instanciaContext) GetParser() antlr.Parser { return s.parser }

func (s *Struct_instanciaContext) GetId() antlr.Token { return s.id }

func (s *Struct_instanciaContext) SetId(v antlr.Token) { s.id = v }

func (s *Struct_instanciaContext) GetAtt() IAtributos_struct_instanciaContext { return s.att }

func (s *Struct_instanciaContext) SetAtt(v IAtributos_struct_instanciaContext) { s.att = v }

func (s *Struct_instanciaContext) GetEx() Ast.Expresion { return s.ex }

func (s *Struct_instanciaContext) SetEx(v Ast.Expresion) { s.ex = v }

func (s *Struct_instanciaContext) LLAVE_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserLLAVE_IZQ, 0)
}

func (s *Struct_instanciaContext) LLAVE_DER() antlr.TerminalNode {
	return s.GetToken(NparserLLAVE_DER, 0)
}

func (s *Struct_instanciaContext) ID_CAMEL() antlr.TerminalNode {
	return s.GetToken(NparserID_CAMEL, 0)
}

func (s *Struct_instanciaContext) Atributos_struct_instancia() IAtributos_struct_instanciaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtributos_struct_instanciaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtributos_struct_instanciaContext)
}

func (s *Struct_instanciaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Struct_instanciaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Struct_instancia() (localctx IStruct_instanciaContext) {
	localctx = NewStruct_instanciaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, NparserRULE_struct_instancia)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(349)

		var _m = p.Match(NparserID_CAMEL)

		localctx.(*Struct_instanciaContext).id = _m
	}
	{
		p.SetState(350)
		p.Match(NparserLLAVE_IZQ)
	}
	{
		p.SetState(351)

		var _x = p.atributos_struct_instancia(0)

		localctx.(*Struct_instanciaContext).att = _x
	}
	{
		p.SetState(352)
		p.Match(NparserLLAVE_DER)
	}

	fila := (func() int {
		if localctx.(*Struct_instanciaContext).GetId() == nil {
			return 0
		} else {
			return localctx.(*Struct_instanciaContext).GetId().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*Struct_instanciaContext).GetId() == nil {
			return 0
		} else {
			return localctx.(*Struct_instanciaContext).GetId().GetColumn()
		}
	}())
	tipo := simbolos.NewTipo(Ast.STRUCT, (func() string {
		if localctx.(*Struct_instanciaContext).GetId() == nil {
			return ""
		} else {
			return localctx.(*Struct_instanciaContext).GetId().GetText()
		}
	}()), fila, columna)
	localctx.(*Struct_instanciaContext).ex = simbolos.NewStructInstancia(tipo, localctx.(*Struct_instanciaContext).GetAtt().GetList(), false, fila, columna)

	return localctx
}

// IAtributos_struct_instanciaContext is an interface to support dynamic dispatch.
type IAtributos_struct_instanciaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLista_elementos returns the lista_elementos rule contexts.
	GetLista_elementos() IAtributos_struct_instanciaContext

	// GetAtt2 returns the att2 rule contexts.
	GetAtt2() IAtributo_struct_instanciaContext

	// GetAtt1 returns the att1 rule contexts.
	GetAtt1() IAtributo_struct_instanciaContext

	// SetLista_elementos sets the lista_elementos rule contexts.
	SetLista_elementos(IAtributos_struct_instanciaContext)

	// SetAtt2 sets the att2 rule contexts.
	SetAtt2(IAtributo_struct_instanciaContext)

	// SetAtt1 sets the att1 rule contexts.
	SetAtt1(IAtributo_struct_instanciaContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsAtributos_struct_instanciaContext differentiates from other interfaces.
	IsAtributos_struct_instanciaContext()
}

type Atributos_struct_instanciaContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	list            *arraylist.List
	lista_elementos IAtributos_struct_instanciaContext
	att2            IAtributo_struct_instanciaContext
	att1            IAtributo_struct_instanciaContext
}

func NewEmptyAtributos_struct_instanciaContext() *Atributos_struct_instanciaContext {
	var p = new(Atributos_struct_instanciaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_atributos_struct_instancia
	return p
}

func (*Atributos_struct_instanciaContext) IsAtributos_struct_instanciaContext() {}

func NewAtributos_struct_instanciaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Atributos_struct_instanciaContext {
	var p = new(Atributos_struct_instanciaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_atributos_struct_instancia

	return p
}

func (s *Atributos_struct_instanciaContext) GetParser() antlr.Parser { return s.parser }

func (s *Atributos_struct_instanciaContext) GetLista_elementos() IAtributos_struct_instanciaContext {
	return s.lista_elementos
}

func (s *Atributos_struct_instanciaContext) GetAtt2() IAtributo_struct_instanciaContext {
	return s.att2
}

func (s *Atributos_struct_instanciaContext) GetAtt1() IAtributo_struct_instanciaContext {
	return s.att1
}

func (s *Atributos_struct_instanciaContext) SetLista_elementos(v IAtributos_struct_instanciaContext) {
	s.lista_elementos = v
}

func (s *Atributos_struct_instanciaContext) SetAtt2(v IAtributo_struct_instanciaContext) { s.att2 = v }

func (s *Atributos_struct_instanciaContext) SetAtt1(v IAtributo_struct_instanciaContext) { s.att1 = v }

func (s *Atributos_struct_instanciaContext) GetList() *arraylist.List { return s.list }

func (s *Atributos_struct_instanciaContext) SetList(v *arraylist.List) { s.list = v }

func (s *Atributos_struct_instanciaContext) Atributo_struct_instancia() IAtributo_struct_instanciaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtributo_struct_instanciaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtributo_struct_instanciaContext)
}

func (s *Atributos_struct_instanciaContext) COMA() antlr.TerminalNode {
	return s.GetToken(NparserCOMA, 0)
}

func (s *Atributos_struct_instanciaContext) Atributos_struct_instancia() IAtributos_struct_instanciaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtributos_struct_instanciaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtributos_struct_instanciaContext)
}

func (s *Atributos_struct_instanciaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Atributos_struct_instanciaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Atributos_struct_instancia() (localctx IAtributos_struct_instanciaContext) {
	return p.atributos_struct_instancia(0)
}

func (p *Nparser) atributos_struct_instancia(_p int) (localctx IAtributos_struct_instanciaContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewAtributos_struct_instanciaContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IAtributos_struct_instanciaContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 18
	p.EnterRecursionRule(localctx, 18, NparserRULE_atributos_struct_instancia, _p)
	localctx.(*Atributos_struct_instanciaContext).list = arraylist.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(356)

		var _x = p.Atributo_struct_instancia()

		localctx.(*Atributos_struct_instanciaContext).att2 = _x
	}

	localctx.(*Atributos_struct_instanciaContext).list.Add(localctx.(*Atributos_struct_instanciaContext).GetAtt2().GetEx())

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(366)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 6, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewAtributos_struct_instanciaContext(p, _parentctx, _parentState)
			localctx.(*Atributos_struct_instanciaContext).lista_elementos = _prevctx
			p.PushNewRecursionContext(localctx, _startState, NparserRULE_atributos_struct_instancia)
			p.SetState(359)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(360)
				p.Match(NparserCOMA)
			}
			{
				p.SetState(361)

				var _x = p.Atributo_struct_instancia()

				localctx.(*Atributos_struct_instanciaContext).att1 = _x
			}

			localctx.(*Atributos_struct_instanciaContext).GetLista_elementos().GetList().Add(localctx.(*Atributos_struct_instanciaContext).GetAtt1().GetEx())
			localctx.(*Atributos_struct_instanciaContext).list = localctx.(*Atributos_struct_instanciaContext).GetLista_elementos().GetList()

		}
		p.SetState(368)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 6, p.GetParserRuleContext())
	}

	return localctx
}

// IAtributo_struct_instanciaContext is an interface to support dynamic dispatch.
type IAtributo_struct_instanciaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Expresion

	// SetEx sets the ex attribute.
	SetEx(Ast.Expresion)

	// IsAtributo_struct_instanciaContext differentiates from other interfaces.
	IsAtributo_struct_instanciaContext()
}

type Atributo_struct_instanciaContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	ex         Ast.Expresion
	_ID        antlr.Token
	_expresion IExpresionContext
}

func NewEmptyAtributo_struct_instanciaContext() *Atributo_struct_instanciaContext {
	var p = new(Atributo_struct_instanciaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_atributo_struct_instancia
	return p
}

func (*Atributo_struct_instanciaContext) IsAtributo_struct_instanciaContext() {}

func NewAtributo_struct_instanciaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Atributo_struct_instanciaContext {
	var p = new(Atributo_struct_instanciaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_atributo_struct_instancia

	return p
}

func (s *Atributo_struct_instanciaContext) GetParser() antlr.Parser { return s.parser }

func (s *Atributo_struct_instanciaContext) Get_ID() antlr.Token { return s._ID }

func (s *Atributo_struct_instanciaContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *Atributo_struct_instanciaContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *Atributo_struct_instanciaContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *Atributo_struct_instanciaContext) GetEx() Ast.Expresion { return s.ex }

func (s *Atributo_struct_instanciaContext) SetEx(v Ast.Expresion) { s.ex = v }

func (s *Atributo_struct_instanciaContext) ID() antlr.TerminalNode {
	return s.GetToken(NparserID, 0)
}

func (s *Atributo_struct_instanciaContext) DOSPUNTOS() antlr.TerminalNode {
	return s.GetToken(NparserDOSPUNTOS, 0)
}

func (s *Atributo_struct_instanciaContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Atributo_struct_instanciaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Atributo_struct_instanciaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Atributo_struct_instancia() (localctx IAtributo_struct_instanciaContext) {
	localctx = NewAtributo_struct_instanciaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, NparserRULE_atributo_struct_instancia)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(369)

		var _m = p.Match(NparserID)

		localctx.(*Atributo_struct_instanciaContext)._ID = _m
	}
	{
		p.SetState(370)
		p.Match(NparserDOSPUNTOS)
	}
	{
		p.SetState(371)

		var _x = p.expresion(0)

		localctx.(*Atributo_struct_instanciaContext)._expresion = _x
	}

	fila := (func() int {
		if localctx.(*Atributo_struct_instanciaContext).Get_ID() == nil {
			return 0
		} else {
			return localctx.(*Atributo_struct_instanciaContext).Get_ID().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*Atributo_struct_instanciaContext).Get_ID() == nil {
			return 0
		} else {
			return localctx.(*Atributo_struct_instanciaContext).Get_ID().GetColumn()
		}
	}())
	simbolos.NewAtributo((func() string {
		if localctx.(*Atributo_struct_instanciaContext).Get_ID() == nil {
			return ""
		} else {
			return localctx.(*Atributo_struct_instanciaContext).Get_ID().GetText()
		}
	}()), localctx.(*Atributo_struct_instanciaContext).Get_expresion().GetEx(), false, fila, columna)

	return localctx
}

// IDeclaracion_funcionContext is an interface to support dynamic dispatch.
type IDeclaracion_funcionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_FN returns the _FN token.
	Get_FN() antlr.Token

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Set_FN sets the _FN token.
	Set_FN(antlr.Token)

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// Get_tipo_dato returns the _tipo_dato rule contexts.
	Get_tipo_dato() ITipo_datoContext

	// Get_bloque returns the _bloque rule contexts.
	Get_bloque() IBloqueContext

	// Get_parametros_funcion returns the _parametros_funcion rule contexts.
	Get_parametros_funcion() IParametros_funcionContext

	// Set_tipo_dato sets the _tipo_dato rule contexts.
	Set_tipo_dato(ITipo_datoContext)

	// Set_bloque sets the _bloque rule contexts.
	Set_bloque(IBloqueContext)

	// Set_parametros_funcion sets the _parametros_funcion rule contexts.
	Set_parametros_funcion(IParametros_funcionContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsDeclaracion_funcionContext differentiates from other interfaces.
	IsDeclaracion_funcionContext()
}

type Declaracion_funcionContext struct {
	*antlr.BaseParserRuleContext
	parser              antlr.Parser
	ex                  Ast.Instruccion
	_FN                 antlr.Token
	_ID                 antlr.Token
	_tipo_dato          ITipo_datoContext
	_bloque             IBloqueContext
	_parametros_funcion IParametros_funcionContext
}

func NewEmptyDeclaracion_funcionContext() *Declaracion_funcionContext {
	var p = new(Declaracion_funcionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_declaracion_funcion
	return p
}

func (*Declaracion_funcionContext) IsDeclaracion_funcionContext() {}

func NewDeclaracion_funcionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Declaracion_funcionContext {
	var p = new(Declaracion_funcionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_declaracion_funcion

	return p
}

func (s *Declaracion_funcionContext) GetParser() antlr.Parser { return s.parser }

func (s *Declaracion_funcionContext) Get_FN() antlr.Token { return s._FN }

func (s *Declaracion_funcionContext) Get_ID() antlr.Token { return s._ID }

func (s *Declaracion_funcionContext) Set_FN(v antlr.Token) { s._FN = v }

func (s *Declaracion_funcionContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *Declaracion_funcionContext) Get_tipo_dato() ITipo_datoContext { return s._tipo_dato }

func (s *Declaracion_funcionContext) Get_bloque() IBloqueContext { return s._bloque }

func (s *Declaracion_funcionContext) Get_parametros_funcion() IParametros_funcionContext {
	return s._parametros_funcion
}

func (s *Declaracion_funcionContext) Set_tipo_dato(v ITipo_datoContext) { s._tipo_dato = v }

func (s *Declaracion_funcionContext) Set_bloque(v IBloqueContext) { s._bloque = v }

func (s *Declaracion_funcionContext) Set_parametros_funcion(v IParametros_funcionContext) {
	s._parametros_funcion = v
}

func (s *Declaracion_funcionContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Declaracion_funcionContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Declaracion_funcionContext) PUB() antlr.TerminalNode {
	return s.GetToken(NparserPUB, 0)
}

func (s *Declaracion_funcionContext) FN() antlr.TerminalNode {
	return s.GetToken(NparserFN, 0)
}

func (s *Declaracion_funcionContext) ID() antlr.TerminalNode {
	return s.GetToken(NparserID, 0)
}

func (s *Declaracion_funcionContext) PAR_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserPAR_IZQ, 0)
}

func (s *Declaracion_funcionContext) PAR_DER() antlr.TerminalNode {
	return s.GetToken(NparserPAR_DER, 0)
}

func (s *Declaracion_funcionContext) FN_TIPO_RETORNO() antlr.TerminalNode {
	return s.GetToken(NparserFN_TIPO_RETORNO, 0)
}

func (s *Declaracion_funcionContext) Tipo_dato() ITipo_datoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipo_datoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipo_datoContext)
}

func (s *Declaracion_funcionContext) Bloque() IBloqueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloqueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloqueContext)
}

func (s *Declaracion_funcionContext) Parametros_funcion() IParametros_funcionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParametros_funcionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParametros_funcionContext)
}

func (s *Declaracion_funcionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Declaracion_funcionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Declaracion_funcion() (localctx IDeclaracion_funcionContext) {
	localctx = NewDeclaracion_funcionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, NparserRULE_declaracion_funcion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(446)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 7, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(374)
			p.Match(NparserPUB)
		}
		{
			p.SetState(375)

			var _m = p.Match(NparserFN)

			localctx.(*Declaracion_funcionContext)._FN = _m
		}
		{
			p.SetState(376)

			var _m = p.Match(NparserID)

			localctx.(*Declaracion_funcionContext)._ID = _m
		}
		{
			p.SetState(377)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(378)
			p.Match(NparserPAR_DER)
		}
		{
			p.SetState(379)
			p.Match(NparserFN_TIPO_RETORNO)
		}
		{
			p.SetState(380)

			var _x = p.Tipo_dato()

			localctx.(*Declaracion_funcionContext)._tipo_dato = _x
		}
		{
			p.SetState(381)

			var _x = p.Bloque()

			localctx.(*Declaracion_funcionContext)._bloque = _x
		}

		parametros := arraylist.New()
		fila := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetColumn()
			}
		}())
		funcion := simbolos.NewFuncion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, localctx.(*Declaracion_funcionContext).Get_bloque().GetList(),
			parametros, localctx.(*Declaracion_funcionContext).Get_tipo_dato().GetEx(), true, fila, columna)
		localctx.(*Declaracion_funcionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, false, true, Ast.VOID,
			funcion, fila, columna)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(384)
			p.Match(NparserPUB)
		}
		{
			p.SetState(385)

			var _m = p.Match(NparserFN)

			localctx.(*Declaracion_funcionContext)._FN = _m
		}
		{
			p.SetState(386)

			var _m = p.Match(NparserID)

			localctx.(*Declaracion_funcionContext)._ID = _m
		}
		{
			p.SetState(387)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(388)
			p.Match(NparserPAR_DER)
		}
		{
			p.SetState(389)

			var _x = p.Bloque()

			localctx.(*Declaracion_funcionContext)._bloque = _x
		}

		parametros := arraylist.New()
		fila := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetColumn()
			}
		}())
		funcion := simbolos.NewFuncion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, localctx.(*Declaracion_funcionContext).Get_bloque().GetList(),
			parametros, Ast.VOID, true, fila, columna)
		localctx.(*Declaracion_funcionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, false, true, Ast.VOID,
			funcion, fila, columna)

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(392)

			var _m = p.Match(NparserFN)

			localctx.(*Declaracion_funcionContext)._FN = _m
		}
		{
			p.SetState(393)

			var _m = p.Match(NparserID)

			localctx.(*Declaracion_funcionContext)._ID = _m
		}
		{
			p.SetState(394)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(395)
			p.Match(NparserPAR_DER)
		}
		{
			p.SetState(396)
			p.Match(NparserFN_TIPO_RETORNO)
		}
		{
			p.SetState(397)

			var _x = p.Tipo_dato()

			localctx.(*Declaracion_funcionContext)._tipo_dato = _x
		}
		{
			p.SetState(398)

			var _x = p.Bloque()

			localctx.(*Declaracion_funcionContext)._bloque = _x
		}

		fila := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetColumn()
			}
		}())
		parametros := arraylist.New()
		funcion := simbolos.NewFuncion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, localctx.(*Declaracion_funcionContext).Get_bloque().GetList(),
			parametros, localctx.(*Declaracion_funcionContext).Get_tipo_dato().GetEx(), false, fila, columna)
		localctx.(*Declaracion_funcionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, false, false, Ast.VOID,
			funcion, fila, columna)

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(401)

			var _m = p.Match(NparserFN)

			localctx.(*Declaracion_funcionContext)._FN = _m
		}
		{
			p.SetState(402)

			var _m = p.Match(NparserID)

			localctx.(*Declaracion_funcionContext)._ID = _m
		}
		{
			p.SetState(403)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(404)
			p.Match(NparserPAR_DER)
		}
		{
			p.SetState(405)

			var _x = p.Bloque()

			localctx.(*Declaracion_funcionContext)._bloque = _x
		}

		fila := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetColumn()
			}
		}())
		parametros := arraylist.New()
		funcion := simbolos.NewFuncion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, localctx.(*Declaracion_funcionContext).Get_bloque().GetList(),
			parametros, Ast.VOID, false, fila, columna)
		localctx.(*Declaracion_funcionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, false, false, Ast.VOID,
			funcion, fila, columna)

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(408)
			p.Match(NparserPUB)
		}
		{
			p.SetState(409)

			var _m = p.Match(NparserFN)

			localctx.(*Declaracion_funcionContext)._FN = _m
		}
		{
			p.SetState(410)

			var _m = p.Match(NparserID)

			localctx.(*Declaracion_funcionContext)._ID = _m
		}
		{
			p.SetState(411)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(412)

			var _x = p.parametros_funcion(0)

			localctx.(*Declaracion_funcionContext)._parametros_funcion = _x
		}
		{
			p.SetState(413)
			p.Match(NparserPAR_DER)
		}
		{
			p.SetState(414)
			p.Match(NparserFN_TIPO_RETORNO)
		}
		{
			p.SetState(415)

			var _x = p.Tipo_dato()

			localctx.(*Declaracion_funcionContext)._tipo_dato = _x
		}
		{
			p.SetState(416)

			var _x = p.Bloque()

			localctx.(*Declaracion_funcionContext)._bloque = _x
		}

		fila := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetColumn()
			}
		}())
		funcion := simbolos.NewFuncion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, localctx.(*Declaracion_funcionContext).Get_bloque().GetList(),
			localctx.(*Declaracion_funcionContext).Get_parametros_funcion().GetList(), localctx.(*Declaracion_funcionContext).Get_tipo_dato().GetEx(), true, fila, columna)
		localctx.(*Declaracion_funcionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, false, true, Ast.VOID,
			funcion, fila, columna)

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(419)
			p.Match(NparserPUB)
		}
		{
			p.SetState(420)

			var _m = p.Match(NparserFN)

			localctx.(*Declaracion_funcionContext)._FN = _m
		}
		{
			p.SetState(421)

			var _m = p.Match(NparserID)

			localctx.(*Declaracion_funcionContext)._ID = _m
		}
		{
			p.SetState(422)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(423)

			var _x = p.parametros_funcion(0)

			localctx.(*Declaracion_funcionContext)._parametros_funcion = _x
		}
		{
			p.SetState(424)
			p.Match(NparserPAR_DER)
		}
		{
			p.SetState(425)

			var _x = p.Bloque()

			localctx.(*Declaracion_funcionContext)._bloque = _x
		}

		fila := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetColumn()
			}
		}())
		funcion := simbolos.NewFuncion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, localctx.(*Declaracion_funcionContext).Get_bloque().GetList(),
			localctx.(*Declaracion_funcionContext).Get_parametros_funcion().GetList(), Ast.VOID, true, fila, columna)
		localctx.(*Declaracion_funcionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, false, true, Ast.VOID,
			funcion, fila, columna)

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(428)

			var _m = p.Match(NparserFN)

			localctx.(*Declaracion_funcionContext)._FN = _m
		}
		{
			p.SetState(429)

			var _m = p.Match(NparserID)

			localctx.(*Declaracion_funcionContext)._ID = _m
		}
		{
			p.SetState(430)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(431)

			var _x = p.parametros_funcion(0)

			localctx.(*Declaracion_funcionContext)._parametros_funcion = _x
		}
		{
			p.SetState(432)
			p.Match(NparserPAR_DER)
		}
		{
			p.SetState(433)
			p.Match(NparserFN_TIPO_RETORNO)
		}
		{
			p.SetState(434)

			var _x = p.Tipo_dato()

			localctx.(*Declaracion_funcionContext)._tipo_dato = _x
		}
		{
			p.SetState(435)

			var _x = p.Bloque()

			localctx.(*Declaracion_funcionContext)._bloque = _x
		}

		fila := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetColumn()
			}
		}())
		funcion := simbolos.NewFuncion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, localctx.(*Declaracion_funcionContext).Get_bloque().GetList(),
			localctx.(*Declaracion_funcionContext).Get_parametros_funcion().GetList(), localctx.(*Declaracion_funcionContext).Get_tipo_dato().GetEx(), false, fila, columna)
		localctx.(*Declaracion_funcionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, false, false, Ast.VOID,
			funcion, fila, columna)

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(438)

			var _m = p.Match(NparserFN)

			localctx.(*Declaracion_funcionContext)._FN = _m
		}
		{
			p.SetState(439)

			var _m = p.Match(NparserID)

			localctx.(*Declaracion_funcionContext)._ID = _m
		}
		{
			p.SetState(440)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(441)

			var _x = p.parametros_funcion(0)

			localctx.(*Declaracion_funcionContext)._parametros_funcion = _x
		}
		{
			p.SetState(442)
			p.Match(NparserPAR_DER)
		}
		{
			p.SetState(443)

			var _x = p.Bloque()

			localctx.(*Declaracion_funcionContext)._bloque = _x
		}

		fila := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetColumn()
			}
		}())
		funcion := simbolos.NewFuncion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, localctx.(*Declaracion_funcionContext).Get_bloque().GetList(),
			localctx.(*Declaracion_funcionContext).Get_parametros_funcion().GetList(), Ast.VOID, false, fila, columna)
		localctx.(*Declaracion_funcionContext).ex = instrucciones.NewDeclaracion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, false, false, Ast.VOID,
			funcion, fila, columna)

	}

	return localctx
}

// IAsignacionContext is an interface to support dynamic dispatch.
type IAsignacionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_IGUAL returns the _IGUAL token.
	Get_IGUAL() antlr.Token

	// Set_IGUAL sets the _IGUAL token.
	Set_IGUAL(antlr.Token)

	// GetId returns the id rule contexts.
	GetId() IAccesos_vector_array_asignacionContext

	// GetElemento returns the elemento rule contexts.
	GetElemento() IExpresionContext

	// Get_control_expresion returns the _control_expresion rule contexts.
	Get_control_expresion() IControl_expresionContext

	// SetId sets the id rule contexts.
	SetId(IAccesos_vector_array_asignacionContext)

	// SetElemento sets the elemento rule contexts.
	SetElemento(IExpresionContext)

	// Set_control_expresion sets the _control_expresion rule contexts.
	Set_control_expresion(IControl_expresionContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsAsignacionContext differentiates from other interfaces.
	IsAsignacionContext()
}

type AsignacionContext struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	ex                 Ast.Instruccion
	id                 IAccesos_vector_array_asignacionContext
	_IGUAL             antlr.Token
	elemento           IExpresionContext
	_control_expresion IControl_expresionContext
}

func NewEmptyAsignacionContext() *AsignacionContext {
	var p = new(AsignacionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_asignacion
	return p
}

func (*AsignacionContext) IsAsignacionContext() {}

func NewAsignacionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsignacionContext {
	var p = new(AsignacionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_asignacion

	return p
}

func (s *AsignacionContext) GetParser() antlr.Parser { return s.parser }

func (s *AsignacionContext) Get_IGUAL() antlr.Token { return s._IGUAL }

func (s *AsignacionContext) Set_IGUAL(v antlr.Token) { s._IGUAL = v }

func (s *AsignacionContext) GetId() IAccesos_vector_array_asignacionContext { return s.id }

func (s *AsignacionContext) GetElemento() IExpresionContext { return s.elemento }

func (s *AsignacionContext) Get_control_expresion() IControl_expresionContext {
	return s._control_expresion
}

func (s *AsignacionContext) SetId(v IAccesos_vector_array_asignacionContext) { s.id = v }

func (s *AsignacionContext) SetElemento(v IExpresionContext) { s.elemento = v }

func (s *AsignacionContext) Set_control_expresion(v IControl_expresionContext) {
	s._control_expresion = v
}

func (s *AsignacionContext) GetEx() Ast.Instruccion { return s.ex }

func (s *AsignacionContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *AsignacionContext) IGUAL() antlr.TerminalNode {
	return s.GetToken(NparserIGUAL, 0)
}

func (s *AsignacionContext) Accesos_vector_array_asignacion() IAccesos_vector_array_asignacionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAccesos_vector_array_asignacionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAccesos_vector_array_asignacionContext)
}

func (s *AsignacionContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *AsignacionContext) Control_expresion() IControl_expresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_expresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_expresionContext)
}

func (s *AsignacionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsignacionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Asignacion() (localctx IAsignacionContext) {
	localctx = NewAsignacionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, NparserRULE_asignacion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(458)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 8, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(448)

			var _x = p.Accesos_vector_array_asignacion()

			localctx.(*AsignacionContext).id = _x
		}
		{
			p.SetState(449)

			var _m = p.Match(NparserIGUAL)

			localctx.(*AsignacionContext)._IGUAL = _m
		}
		{
			p.SetState(450)

			var _x = p.expresion(0)

			localctx.(*AsignacionContext).elemento = _x
		}

		fila := (func() int {
			if localctx.(*AsignacionContext).Get_IGUAL() == nil {
				return 0
			} else {
				return localctx.(*AsignacionContext).Get_IGUAL().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*AsignacionContext).Get_IGUAL() == nil {
				return 0
			} else {
				return localctx.(*AsignacionContext).Get_IGUAL().GetColumn()
			}
		}()) - 1
		localctx.(*AsignacionContext).ex = instrucciones.NewAsignacion(localctx.(*AsignacionContext).GetId().GetEx(), localctx.(*AsignacionContext).GetElemento().GetEx(), fila, columna)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(453)

			var _x = p.Accesos_vector_array_asignacion()

			localctx.(*AsignacionContext).id = _x
		}
		{
			p.SetState(454)

			var _m = p.Match(NparserIGUAL)

			localctx.(*AsignacionContext)._IGUAL = _m
		}
		{
			p.SetState(455)

			var _x = p.Control_expresion()

			localctx.(*AsignacionContext)._control_expresion = _x
		}

		fila := (func() int {
			if localctx.(*AsignacionContext).Get_IGUAL() == nil {
				return 0
			} else {
				return localctx.(*AsignacionContext).Get_IGUAL().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*AsignacionContext).Get_IGUAL() == nil {
				return 0
			} else {
				return localctx.(*AsignacionContext).Get_IGUAL().GetColumn()
			}
		}())
		localctx.(*AsignacionContext).ex = instrucciones.NewAsignacion(localctx.(*AsignacionContext).GetId().GetEx(), localctx.(*AsignacionContext).Get_control_expresion().GetEx(), fila, columna)

	}

	return localctx
}

// IAccesos_vector_array_asignacionContext is an interface to support dynamic dispatch.
type IAccesos_vector_array_asignacionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// GetLista returns the lista rule contexts.
	GetLista() IDimension_acceso_arrayContext

	// GetIndex returns the index rule contexts.
	GetIndex() IExpresionContext

	// SetLista sets the lista rule contexts.
	SetLista(IDimension_acceso_arrayContext)

	// SetIndex sets the index rule contexts.
	SetIndex(IExpresionContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Expresion

	// SetEx sets the ex attribute.
	SetEx(Ast.Expresion)

	// IsAccesos_vector_array_asignacionContext differentiates from other interfaces.
	IsAccesos_vector_array_asignacionContext()
}

type Accesos_vector_array_asignacionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	ex     Ast.Expresion
	_ID    antlr.Token
	lista  IDimension_acceso_arrayContext
	index  IExpresionContext
}

func NewEmptyAccesos_vector_array_asignacionContext() *Accesos_vector_array_asignacionContext {
	var p = new(Accesos_vector_array_asignacionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_accesos_vector_array_asignacion
	return p
}

func (*Accesos_vector_array_asignacionContext) IsAccesos_vector_array_asignacionContext() {}

func NewAccesos_vector_array_asignacionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Accesos_vector_array_asignacionContext {
	var p = new(Accesos_vector_array_asignacionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_accesos_vector_array_asignacion

	return p
}

func (s *Accesos_vector_array_asignacionContext) GetParser() antlr.Parser { return s.parser }

func (s *Accesos_vector_array_asignacionContext) Get_ID() antlr.Token { return s._ID }

func (s *Accesos_vector_array_asignacionContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *Accesos_vector_array_asignacionContext) GetLista() IDimension_acceso_arrayContext {
	return s.lista
}

func (s *Accesos_vector_array_asignacionContext) GetIndex() IExpresionContext { return s.index }

func (s *Accesos_vector_array_asignacionContext) SetLista(v IDimension_acceso_arrayContext) {
	s.lista = v
}

func (s *Accesos_vector_array_asignacionContext) SetIndex(v IExpresionContext) { s.index = v }

func (s *Accesos_vector_array_asignacionContext) GetEx() Ast.Expresion { return s.ex }

func (s *Accesos_vector_array_asignacionContext) SetEx(v Ast.Expresion) { s.ex = v }

func (s *Accesos_vector_array_asignacionContext) ID() antlr.TerminalNode {
	return s.GetToken(NparserID, 0)
}

func (s *Accesos_vector_array_asignacionContext) Dimension_acceso_array() IDimension_acceso_arrayContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDimension_acceso_arrayContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDimension_acceso_arrayContext)
}

func (s *Accesos_vector_array_asignacionContext) CORCHETE_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserCORCHETE_IZQ, 0)
}

func (s *Accesos_vector_array_asignacionContext) CORCHETE_DER() antlr.TerminalNode {
	return s.GetToken(NparserCORCHETE_DER, 0)
}

func (s *Accesos_vector_array_asignacionContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Accesos_vector_array_asignacionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Accesos_vector_array_asignacionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Accesos_vector_array_asignacion() (localctx IAccesos_vector_array_asignacionContext) {
	localctx = NewAccesos_vector_array_asignacionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, NparserRULE_accesos_vector_array_asignacion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(472)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 9, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(460)

			var _m = p.Match(NparserID)

			localctx.(*Accesos_vector_array_asignacionContext)._ID = _m
		}
		{
			p.SetState(461)

			var _x = p.dimension_acceso_array(0)

			localctx.(*Accesos_vector_array_asignacionContext).lista = _x
		}

		id := (func() string {
			if localctx.(*Accesos_vector_array_asignacionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Accesos_vector_array_asignacionContext).Get_ID().GetText()
			}
		}())
		fila := (func() int {
			if localctx.(*Accesos_vector_array_asignacionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Accesos_vector_array_asignacionContext).Get_ID().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Accesos_vector_array_asignacionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Accesos_vector_array_asignacionContext).Get_ID().GetColumn()
			}
		}()) - 1
		idE := expresiones.NewIdentificador(id, Ast.IDENTIFICADOR, fila, columna)
		localctx.(*Accesos_vector_array_asignacionContext).ex = fn_array.NewAccesoArray(idE, localctx.(*Accesos_vector_array_asignacionContext).GetLista().GetList(), fila, columna)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(464)

			var _m = p.Match(NparserID)

			localctx.(*Accesos_vector_array_asignacionContext)._ID = _m
		}
		{
			p.SetState(465)
			p.Match(NparserCORCHETE_IZQ)
		}
		{
			p.SetState(466)

			var _x = p.expresion(0)

			localctx.(*Accesos_vector_array_asignacionContext).index = _x
		}
		{
			p.SetState(467)
			p.Match(NparserCORCHETE_DER)
		}

		id := (func() string {
			if localctx.(*Accesos_vector_array_asignacionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Accesos_vector_array_asignacionContext).Get_ID().GetText()
			}
		}())
		fila := (func() int {
			if localctx.(*Accesos_vector_array_asignacionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Accesos_vector_array_asignacionContext).Get_ID().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Accesos_vector_array_asignacionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Accesos_vector_array_asignacionContext).Get_ID().GetColumn()
			}
		}()) - 1
		idE := expresiones.NewIdentificador(id, Ast.IDENTIFICADOR, fila, columna)
		localctx.(*Accesos_vector_array_asignacionContext).ex = fn_vectores.NewAccesoVec(idE, localctx.(*Accesos_vector_array_asignacionContext).GetIndex().GetEx(), Ast.VEC_ACCESO, fila, columna)

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(470)

			var _m = p.Match(NparserID)

			localctx.(*Accesos_vector_array_asignacionContext)._ID = _m
		}

		id := (func() string {
			if localctx.(*Accesos_vector_array_asignacionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Accesos_vector_array_asignacionContext).Get_ID().GetText()
			}
		}())
		fila := (func() int {
			if localctx.(*Accesos_vector_array_asignacionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Accesos_vector_array_asignacionContext).Get_ID().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Accesos_vector_array_asignacionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Accesos_vector_array_asignacionContext).Get_ID().GetColumn()
			}
		}())
		localctx.(*Accesos_vector_array_asignacionContext).ex = expresiones.NewIdentificador(id, Ast.IDENTIFICADOR, fila, columna)

	}

	return localctx
}

// IExpresionContext is an interface to support dynamic dispatch.
type IExpresionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// Get_PAR_IZQ returns the _PAR_IZQ token.
	Get_PAR_IZQ() antlr.Token

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Get_TRUE returns the _TRUE token.
	Get_TRUE() antlr.Token

	// Get_FALSE returns the _FALSE token.
	Get_FALSE() antlr.Token

	// Get_CARACTER returns the _CARACTER token.
	Get_CARACTER() antlr.Token

	// Get_DECIMAL returns the _DECIMAL token.
	Get_DECIMAL() antlr.Token

	// Get_NUMERO returns the _NUMERO token.
	Get_NUMERO() antlr.Token

	// Get_CADENA returns the _CADENA token.
	Get_CADENA() antlr.Token

	// Get_AND returns the _AND token.
	Get_AND() antlr.Token

	// Get_OR returns the _OR token.
	Get_OR() antlr.Token

	// Get_PUNTO returns the _PUNTO token.
	Get_PUNTO() antlr.Token

	// Get_CORCHETE_IZQ returns the _CORCHETE_IZQ token.
	Get_CORCHETE_IZQ() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// Set_PAR_IZQ sets the _PAR_IZQ token.
	Set_PAR_IZQ(antlr.Token)

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// Set_TRUE sets the _TRUE token.
	Set_TRUE(antlr.Token)

	// Set_FALSE sets the _FALSE token.
	Set_FALSE(antlr.Token)

	// Set_CARACTER sets the _CARACTER token.
	Set_CARACTER(antlr.Token)

	// Set_DECIMAL sets the _DECIMAL token.
	Set_DECIMAL(antlr.Token)

	// Set_NUMERO sets the _NUMERO token.
	Set_NUMERO(antlr.Token)

	// Set_CADENA sets the _CADENA token.
	Set_CADENA(antlr.Token)

	// Set_AND sets the _AND token.
	Set_AND(antlr.Token)

	// Set_OR sets the _OR token.
	Set_OR(antlr.Token)

	// Set_PUNTO sets the _PUNTO token.
	Set_PUNTO(antlr.Token)

	// Set_CORCHETE_IZQ sets the _CORCHETE_IZQ token.
	Set_CORCHETE_IZQ(antlr.Token)

	// GetE returns the e rule contexts.
	GetE() IExpresionContext

	// GetOp_izq returns the op_izq rule contexts.
	GetOp_izq() IExpresionContext

	// GetId returns the id rule contexts.
	GetId() IExpresionContext

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// Get_tipo_dato returns the _tipo_dato rule contexts.
	Get_tipo_dato() ITipo_datoContext

	// Get_llamada_funcion returns the _llamada_funcion rule contexts.
	Get_llamada_funcion() ILlamada_funcionContext

	// Get_metodos_iniciar_vector returns the _metodos_iniciar_vector rule contexts.
	Get_metodos_iniciar_vector() IMetodos_iniciar_vectorContext

	// Get_potencia returns the _potencia rule contexts.
	Get_potencia() IPotenciaContext

	// Get_array returns the _array rule contexts.
	Get_array() IArrayContext

	// Get_struct_instancia returns the _struct_instancia rule contexts.
	Get_struct_instancia() IStruct_instanciaContext

	// GetOp_der returns the op_der rule contexts.
	GetOp_der() IExpresionContext

	// GetLista returns the lista rule contexts.
	GetLista() IDimension_acceso_arrayContext

	// GetIndex returns the index rule contexts.
	GetIndex() IExpresionContext

	// GetExp returns the exp rule contexts.
	GetExp() IExpresionContext

	// SetE sets the e rule contexts.
	SetE(IExpresionContext)

	// SetOp_izq sets the op_izq rule contexts.
	SetOp_izq(IExpresionContext)

	// SetId sets the id rule contexts.
	SetId(IExpresionContext)

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// Set_tipo_dato sets the _tipo_dato rule contexts.
	Set_tipo_dato(ITipo_datoContext)

	// Set_llamada_funcion sets the _llamada_funcion rule contexts.
	Set_llamada_funcion(ILlamada_funcionContext)

	// Set_metodos_iniciar_vector sets the _metodos_iniciar_vector rule contexts.
	Set_metodos_iniciar_vector(IMetodos_iniciar_vectorContext)

	// Set_potencia sets the _potencia rule contexts.
	Set_potencia(IPotenciaContext)

	// Set_array sets the _array rule contexts.
	Set_array(IArrayContext)

	// Set_struct_instancia sets the _struct_instancia rule contexts.
	Set_struct_instancia(IStruct_instanciaContext)

	// SetOp_der sets the op_der rule contexts.
	SetOp_der(IExpresionContext)

	// SetLista sets the lista rule contexts.
	SetLista(IDimension_acceso_arrayContext)

	// SetIndex sets the index rule contexts.
	SetIndex(IExpresionContext)

	// SetExp sets the exp rule contexts.
	SetExp(IExpresionContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Expresion

	// SetEx sets the ex attribute.
	SetEx(Ast.Expresion)

	// IsExpresionContext differentiates from other interfaces.
	IsExpresionContext()
}

type ExpresionContext struct {
	*antlr.BaseParserRuleContext
	parser                  antlr.Parser
	ex                      Ast.Expresion
	e                       IExpresionContext
	op_izq                  IExpresionContext
	id                      IExpresionContext
	op                      antlr.Token
	_expresion              IExpresionContext
	_PAR_IZQ                antlr.Token
	_tipo_dato              ITipo_datoContext
	_llamada_funcion        ILlamada_funcionContext
	_metodos_iniciar_vector IMetodos_iniciar_vectorContext
	_potencia               IPotenciaContext
	_array                  IArrayContext
	_struct_instancia       IStruct_instanciaContext
	_ID                     antlr.Token
	_TRUE                   antlr.Token
	_FALSE                  antlr.Token
	_CARACTER               antlr.Token
	_DECIMAL                antlr.Token
	_NUMERO                 antlr.Token
	_CADENA                 antlr.Token
	op_der                  IExpresionContext
	_AND                    antlr.Token
	_OR                     antlr.Token
	_PUNTO                  antlr.Token
	lista                   IDimension_acceso_arrayContext
	_CORCHETE_IZQ           antlr.Token
	index                   IExpresionContext
	exp                     IExpresionContext
}

func NewEmptyExpresionContext() *ExpresionContext {
	var p = new(ExpresionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_expresion
	return p
}

func (*ExpresionContext) IsExpresionContext() {}

func NewExpresionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpresionContext {
	var p = new(ExpresionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_expresion

	return p
}

func (s *ExpresionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpresionContext) GetOp() antlr.Token { return s.op }

func (s *ExpresionContext) Get_PAR_IZQ() antlr.Token { return s._PAR_IZQ }

func (s *ExpresionContext) Get_ID() antlr.Token { return s._ID }

func (s *ExpresionContext) Get_TRUE() antlr.Token { return s._TRUE }

func (s *ExpresionContext) Get_FALSE() antlr.Token { return s._FALSE }

func (s *ExpresionContext) Get_CARACTER() antlr.Token { return s._CARACTER }

func (s *ExpresionContext) Get_DECIMAL() antlr.Token { return s._DECIMAL }

func (s *ExpresionContext) Get_NUMERO() antlr.Token { return s._NUMERO }

func (s *ExpresionContext) Get_CADENA() antlr.Token { return s._CADENA }

func (s *ExpresionContext) Get_AND() antlr.Token { return s._AND }

func (s *ExpresionContext) Get_OR() antlr.Token { return s._OR }

func (s *ExpresionContext) Get_PUNTO() antlr.Token { return s._PUNTO }

func (s *ExpresionContext) Get_CORCHETE_IZQ() antlr.Token { return s._CORCHETE_IZQ }

func (s *ExpresionContext) SetOp(v antlr.Token) { s.op = v }

func (s *ExpresionContext) Set_PAR_IZQ(v antlr.Token) { s._PAR_IZQ = v }

func (s *ExpresionContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *ExpresionContext) Set_TRUE(v antlr.Token) { s._TRUE = v }

func (s *ExpresionContext) Set_FALSE(v antlr.Token) { s._FALSE = v }

func (s *ExpresionContext) Set_CARACTER(v antlr.Token) { s._CARACTER = v }

func (s *ExpresionContext) Set_DECIMAL(v antlr.Token) { s._DECIMAL = v }

func (s *ExpresionContext) Set_NUMERO(v antlr.Token) { s._NUMERO = v }

func (s *ExpresionContext) Set_CADENA(v antlr.Token) { s._CADENA = v }

func (s *ExpresionContext) Set_AND(v antlr.Token) { s._AND = v }

func (s *ExpresionContext) Set_OR(v antlr.Token) { s._OR = v }

func (s *ExpresionContext) Set_PUNTO(v antlr.Token) { s._PUNTO = v }

func (s *ExpresionContext) Set_CORCHETE_IZQ(v antlr.Token) { s._CORCHETE_IZQ = v }

func (s *ExpresionContext) GetE() IExpresionContext { return s.e }

func (s *ExpresionContext) GetOp_izq() IExpresionContext { return s.op_izq }

func (s *ExpresionContext) GetId() IExpresionContext { return s.id }

func (s *ExpresionContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *ExpresionContext) Get_tipo_dato() ITipo_datoContext { return s._tipo_dato }

func (s *ExpresionContext) Get_llamada_funcion() ILlamada_funcionContext { return s._llamada_funcion }

func (s *ExpresionContext) Get_metodos_iniciar_vector() IMetodos_iniciar_vectorContext {
	return s._metodos_iniciar_vector
}

func (s *ExpresionContext) Get_potencia() IPotenciaContext { return s._potencia }

func (s *ExpresionContext) Get_array() IArrayContext { return s._array }

func (s *ExpresionContext) Get_struct_instancia() IStruct_instanciaContext {
	return s._struct_instancia
}

func (s *ExpresionContext) GetOp_der() IExpresionContext { return s.op_der }

func (s *ExpresionContext) GetLista() IDimension_acceso_arrayContext { return s.lista }

func (s *ExpresionContext) GetIndex() IExpresionContext { return s.index }

func (s *ExpresionContext) GetExp() IExpresionContext { return s.exp }

func (s *ExpresionContext) SetE(v IExpresionContext) { s.e = v }

func (s *ExpresionContext) SetOp_izq(v IExpresionContext) { s.op_izq = v }

func (s *ExpresionContext) SetId(v IExpresionContext) { s.id = v }

func (s *ExpresionContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *ExpresionContext) Set_tipo_dato(v ITipo_datoContext) { s._tipo_dato = v }

func (s *ExpresionContext) Set_llamada_funcion(v ILlamada_funcionContext) { s._llamada_funcion = v }

func (s *ExpresionContext) Set_metodos_iniciar_vector(v IMetodos_iniciar_vectorContext) {
	s._metodos_iniciar_vector = v
}

func (s *ExpresionContext) Set_potencia(v IPotenciaContext) { s._potencia = v }

func (s *ExpresionContext) Set_array(v IArrayContext) { s._array = v }

func (s *ExpresionContext) Set_struct_instancia(v IStruct_instanciaContext) { s._struct_instancia = v }

func (s *ExpresionContext) SetOp_der(v IExpresionContext) { s.op_der = v }

func (s *ExpresionContext) SetLista(v IDimension_acceso_arrayContext) { s.lista = v }

func (s *ExpresionContext) SetIndex(v IExpresionContext) { s.index = v }

func (s *ExpresionContext) SetExp(v IExpresionContext) { s.exp = v }

func (s *ExpresionContext) GetEx() Ast.Expresion { return s.ex }

func (s *ExpresionContext) SetEx(v Ast.Expresion) { s.ex = v }

func (s *ExpresionContext) AllExpresion() []IExpresionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpresionContext)(nil)).Elem())
	var tst = make([]IExpresionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpresionContext)
		}
	}

	return tst
}

func (s *ExpresionContext) Expresion(i int) IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *ExpresionContext) RESTA() antlr.TerminalNode {
	return s.GetToken(NparserRESTA, 0)
}

func (s *ExpresionContext) NOT() antlr.TerminalNode {
	return s.GetToken(NparserNOT, 0)
}

func (s *ExpresionContext) PAR_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserPAR_IZQ, 0)
}

func (s *ExpresionContext) PAR_DER() antlr.TerminalNode {
	return s.GetToken(NparserPAR_DER, 0)
}

func (s *ExpresionContext) AS() antlr.TerminalNode {
	return s.GetToken(NparserAS, 0)
}

func (s *ExpresionContext) Tipo_dato() ITipo_datoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipo_datoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipo_datoContext)
}

func (s *ExpresionContext) Llamada_funcion() ILlamada_funcionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILlamada_funcionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILlamada_funcionContext)
}

func (s *ExpresionContext) Metodos_iniciar_vector() IMetodos_iniciar_vectorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMetodos_iniciar_vectorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMetodos_iniciar_vectorContext)
}

func (s *ExpresionContext) Potencia() IPotenciaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPotenciaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPotenciaContext)
}

func (s *ExpresionContext) Array() IArrayContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrayContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrayContext)
}

func (s *ExpresionContext) Struct_instancia() IStruct_instanciaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStruct_instanciaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStruct_instanciaContext)
}

func (s *ExpresionContext) ID() antlr.TerminalNode {
	return s.GetToken(NparserID, 0)
}

func (s *ExpresionContext) TRUE() antlr.TerminalNode {
	return s.GetToken(NparserTRUE, 0)
}

func (s *ExpresionContext) FALSE() antlr.TerminalNode {
	return s.GetToken(NparserFALSE, 0)
}

func (s *ExpresionContext) CARACTER() antlr.TerminalNode {
	return s.GetToken(NparserCARACTER, 0)
}

func (s *ExpresionContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(NparserDECIMAL, 0)
}

func (s *ExpresionContext) NUMERO() antlr.TerminalNode {
	return s.GetToken(NparserNUMERO, 0)
}

func (s *ExpresionContext) CADENA() antlr.TerminalNode {
	return s.GetToken(NparserCADENA, 0)
}

func (s *ExpresionContext) MULTIPLICACION() antlr.TerminalNode {
	return s.GetToken(NparserMULTIPLICACION, 0)
}

func (s *ExpresionContext) DIVISION() antlr.TerminalNode {
	return s.GetToken(NparserDIVISION, 0)
}

func (s *ExpresionContext) MODULO() antlr.TerminalNode {
	return s.GetToken(NparserMODULO, 0)
}

func (s *ExpresionContext) SUMA() antlr.TerminalNode {
	return s.GetToken(NparserSUMA, 0)
}

func (s *ExpresionContext) MAYOR_I() antlr.TerminalNode {
	return s.GetToken(NparserMAYOR_I, 0)
}

func (s *ExpresionContext) MAYOR() antlr.TerminalNode {
	return s.GetToken(NparserMAYOR, 0)
}

func (s *ExpresionContext) MENOR_I() antlr.TerminalNode {
	return s.GetToken(NparserMENOR_I, 0)
}

func (s *ExpresionContext) MENOR() antlr.TerminalNode {
	return s.GetToken(NparserMENOR, 0)
}

func (s *ExpresionContext) IGUALDAD() antlr.TerminalNode {
	return s.GetToken(NparserIGUALDAD, 0)
}

func (s *ExpresionContext) DISTINTO() antlr.TerminalNode {
	return s.GetToken(NparserDISTINTO, 0)
}

func (s *ExpresionContext) AND() antlr.TerminalNode {
	return s.GetToken(NparserAND, 0)
}

func (s *ExpresionContext) OR() antlr.TerminalNode {
	return s.GetToken(NparserOR, 0)
}

func (s *ExpresionContext) PUNTO() antlr.TerminalNode {
	return s.GetToken(NparserPUNTO, 0)
}

func (s *ExpresionContext) TO_STRING() antlr.TerminalNode {
	return s.GetToken(NparserTO_STRING, 0)
}

func (s *ExpresionContext) SQRT() antlr.TerminalNode {
	return s.GetToken(NparserSQRT, 0)
}

func (s *ExpresionContext) ABS() antlr.TerminalNode {
	return s.GetToken(NparserABS, 0)
}

func (s *ExpresionContext) Dimension_acceso_array() IDimension_acceso_arrayContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDimension_acceso_arrayContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDimension_acceso_arrayContext)
}

func (s *ExpresionContext) CORCHETE_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserCORCHETE_IZQ, 0)
}

func (s *ExpresionContext) CORCHETE_DER() antlr.TerminalNode {
	return s.GetToken(NparserCORCHETE_DER, 0)
}

func (s *ExpresionContext) LEN() antlr.TerminalNode {
	return s.GetToken(NparserLEN, 0)
}

func (s *ExpresionContext) CAPACITY() antlr.TerminalNode {
	return s.GetToken(NparserCAPACITY, 0)
}

func (s *ExpresionContext) CONTAINS() antlr.TerminalNode {
	return s.GetToken(NparserCONTAINS, 0)
}

func (s *ExpresionContext) AMPERSAND() antlr.TerminalNode {
	return s.GetToken(NparserAMPERSAND, 0)
}

func (s *ExpresionContext) REMOVE() antlr.TerminalNode {
	return s.GetToken(NparserREMOVE, 0)
}

func (s *ExpresionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpresionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Expresion() (localctx IExpresionContext) {
	return p.expresion(0)
}

func (p *Nparser) expresion(_p int) (localctx IExpresionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpresionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpresionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 28
	p.EnterRecursionRule(localctx, 28, NparserRULE_expresion, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(520)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 10, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(475)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ExpresionContext).op = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == NparserRESTA || _la == NparserNOT) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ExpresionContext).op = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(476)

			var _x = p.expresion(30)

			localctx.(*ExpresionContext).op_izq = _x
			localctx.(*ExpresionContext)._expresion = _x
		}

		fila := (func() int {
			if localctx.(*ExpresionContext).GetOp() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).GetOp().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ExpresionContext).GetOp() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).GetOp().GetColumn()
			}
		}())
		localctx.(*ExpresionContext).ex = expresiones.NewOperation(localctx.(*ExpresionContext).GetOp_izq().GetEx(), (func() string {
			if localctx.(*ExpresionContext).GetOp() == nil {
				return ""
			} else {
				return localctx.(*ExpresionContext).GetOp().GetText()
			}
		}()), nil, true, fila, columna)

	case 2:
		{
			p.SetState(479)

			var _m = p.Match(NparserPAR_IZQ)

			localctx.(*ExpresionContext)._PAR_IZQ = _m
		}
		{
			p.SetState(480)

			var _x = p.expresion(0)

			localctx.(*ExpresionContext)._expresion = _x
		}
		{
			p.SetState(481)
			p.Match(NparserPAR_DER)
		}

		localctx.(*ExpresionContext).ex = localctx.(*ExpresionContext).Get_expresion().GetEx()

	case 3:
		{
			p.SetState(484)

			var _m = p.Match(NparserPAR_IZQ)

			localctx.(*ExpresionContext)._PAR_IZQ = _m
		}
		{
			p.SetState(485)

			var _x = p.expresion(0)

			localctx.(*ExpresionContext)._expresion = _x
		}
		{
			p.SetState(486)
			p.Match(NparserAS)
		}
		{
			p.SetState(487)

			var _x = p.Tipo_dato()

			localctx.(*ExpresionContext)._tipo_dato = _x
		}
		{
			p.SetState(488)
			p.Match(NparserPAR_DER)
		}

		//Cast
		fila := (func() int {
			if localctx.(*ExpresionContext).Get_PAR_IZQ() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_PAR_IZQ().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ExpresionContext).Get_PAR_IZQ() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_PAR_IZQ().GetColumn()
			}
		}())
		localctx.(*ExpresionContext).ex = expresiones.NewCast(localctx.(*ExpresionContext).Get_expresion().GetEx(), Ast.CAST, localctx.(*ExpresionContext).Get_tipo_dato().GetEx(), fila, columna)

	case 4:
		{
			p.SetState(491)

			var _x = p.Llamada_funcion()

			localctx.(*ExpresionContext)._llamada_funcion = _x
		}

		localctx.(*ExpresionContext).ex = localctx.(*ExpresionContext).Get_llamada_funcion().GetEx()

	case 5:
		{
			p.SetState(494)

			var _x = p.Metodos_iniciar_vector()

			localctx.(*ExpresionContext)._metodos_iniciar_vector = _x
		}

		localctx.(*ExpresionContext).ex = localctx.(*ExpresionContext).Get_metodos_iniciar_vector().GetEx()

	case 6:
		{
			p.SetState(497)

			var _x = p.Potencia()

			localctx.(*ExpresionContext)._potencia = _x
		}

		localctx.(*ExpresionContext).ex = localctx.(*ExpresionContext).Get_potencia().GetEx()

	case 7:
		{
			p.SetState(500)

			var _x = p.Array()

			localctx.(*ExpresionContext)._array = _x
		}

		localctx.(*ExpresionContext).ex = localctx.(*ExpresionContext).Get_array().GetEx()

	case 8:
		{
			p.SetState(503)

			var _x = p.Struct_instancia()

			localctx.(*ExpresionContext)._struct_instancia = _x
		}

		localctx.(*ExpresionContext).ex = localctx.(*ExpresionContext).Get_struct_instancia().GetEx()

	case 9:
		{
			p.SetState(506)

			var _m = p.Match(NparserID)

			localctx.(*ExpresionContext)._ID = _m
		}

		id := (func() string {
			if localctx.(*ExpresionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*ExpresionContext).Get_ID().GetText()
			}
		}())
		fila := (func() int {
			if localctx.(*ExpresionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_ID().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ExpresionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_ID().GetColumn()
			}
		}())
		localctx.(*ExpresionContext).ex = expresiones.NewIdentificador(id, Ast.IDENTIFICADOR, fila, columna)

	case 10:
		{
			p.SetState(508)

			var _m = p.Match(NparserTRUE)

			localctx.(*ExpresionContext)._TRUE = _m
		}

		valor := true
		fila := (func() int {
			if localctx.(*ExpresionContext).Get_TRUE() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_TRUE().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ExpresionContext).Get_TRUE() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_TRUE().GetColumn()
			}
		}())
		localctx.(*ExpresionContext).ex = expresiones.NewPrimitivo(valor, Ast.BOOLEAN, fila, columna)

	case 11:
		{
			p.SetState(510)

			var _m = p.Match(NparserFALSE)

			localctx.(*ExpresionContext)._FALSE = _m
		}

		valor := false
		fila := (func() int {
			if localctx.(*ExpresionContext).Get_FALSE() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_FALSE().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ExpresionContext).Get_FALSE() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_FALSE().GetColumn()
			}
		}())
		localctx.(*ExpresionContext).ex = expresiones.NewPrimitivo(valor, Ast.BOOLEAN, fila, columna)

	case 12:
		{
			p.SetState(512)

			var _m = p.Match(NparserCARACTER)

			localctx.(*ExpresionContext)._CARACTER = _m
		}

		valor := (func() string {
			if localctx.(*ExpresionContext).Get_CARACTER() == nil {
				return ""
			} else {
				return localctx.(*ExpresionContext).Get_CARACTER().GetText()
			}
		}())
		valor = valor[1 : len(valor)-1]
		fila := (func() int {
			if localctx.(*ExpresionContext).Get_CARACTER() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_CARACTER().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ExpresionContext).Get_CARACTER() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_CARACTER().GetColumn()
			}
		}())
		localctx.(*ExpresionContext).ex = expresiones.NewPrimitivo(valor, Ast.CHAR, fila, columna)

	case 13:
		{
			p.SetState(514)

			var _m = p.Match(NparserDECIMAL)

			localctx.(*ExpresionContext)._DECIMAL = _m
		}

		valor, err := strconv.ParseFloat((func() string {
			if localctx.(*ExpresionContext).Get_DECIMAL() == nil {
				return ""
			} else {
				return localctx.(*ExpresionContext).Get_DECIMAL().GetText()
			}
		}()), 64)
		if err != nil {
			fmt.Println("Hay un error en el get número")
			fmt.Println(err)
		}
		fila := (func() int {
			if localctx.(*ExpresionContext).Get_DECIMAL() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_DECIMAL().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ExpresionContext).Get_DECIMAL() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_DECIMAL().GetColumn()
			}
		}())
		localctx.(*ExpresionContext).ex = expresiones.NewPrimitivo(valor, Ast.F64, fila, columna)

	case 14:
		{
			p.SetState(516)

			var _m = p.Match(NparserNUMERO)

			localctx.(*ExpresionContext)._NUMERO = _m
		}

		valor, err := strconv.Atoi((func() string {
			if localctx.(*ExpresionContext).Get_NUMERO() == nil {
				return ""
			} else {
				return localctx.(*ExpresionContext).Get_NUMERO().GetText()
			}
		}()))
		if err != nil {
			fmt.Println("Hay un error en el get número")
			fmt.Println(err)
		}
		fila := (func() int {
			if localctx.(*ExpresionContext).Get_NUMERO() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_NUMERO().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ExpresionContext).Get_NUMERO() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_NUMERO().GetColumn()
			}
		}())
		localctx.(*ExpresionContext).ex = expresiones.NewPrimitivo(valor, Ast.I64, fila, columna)

	case 15:
		{
			p.SetState(518)

			var _m = p.Match(NparserCADENA)

			localctx.(*ExpresionContext)._CADENA = _m
		}

		fila := (func() int {
			if localctx.(*ExpresionContext).Get_CADENA() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_CADENA().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ExpresionContext).Get_CADENA() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_CADENA().GetColumn()
			}
		}())
		valor := (func() string {
			if localctx.(*ExpresionContext).Get_CADENA() == nil {
				return ""
			} else {
				return localctx.(*ExpresionContext).Get_CADENA().GetText()
			}
		}())
		valor = valor[1 : len(valor)-1]
		localctx.(*ExpresionContext).ex = expresiones.NewPrimitivo(valor, Ast.STR, fila, columna)

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(611)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(609)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 11, p.GetParserRuleContext()) {
			case 1:
				localctx = NewExpresionContext(p, _parentctx, _parentState)
				localctx.(*ExpresionContext).op_izq = _prevctx
				p.PushNewRecursionContext(localctx, _startState, NparserRULE_expresion)
				p.SetState(522)

				if !(p.Precpred(p.GetParserRuleContext(), 26)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 26)", ""))
				}
				{
					p.SetState(523)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ExpresionContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(((_la-70)&-(0x1f+1)) == 0 && ((1<<uint((_la-70)))&((1<<(NparserMODULO-70))|(1<<(NparserMULTIPLICACION-70))|(1<<(NparserDIVISION-70)))) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ExpresionContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(524)

					var _x = p.expresion(27)

					localctx.(*ExpresionContext).op_der = _x
					localctx.(*ExpresionContext)._expresion = _x
				}

				fila := (func() int {
					if localctx.(*ExpresionContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).GetOp().GetLine()
					}
				}())
				columna := (func() int {
					if localctx.(*ExpresionContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).GetOp().GetColumn()
					}
				}())
				localctx.(*ExpresionContext).ex = expresiones.NewOperation(localctx.(*ExpresionContext).GetOp_izq().GetEx(), (func() string {
					if localctx.(*ExpresionContext).GetOp() == nil {
						return ""
					} else {
						return localctx.(*ExpresionContext).GetOp().GetText()
					}
				}()), localctx.(*ExpresionContext).GetOp_der().GetEx(), false, fila, columna)

			case 2:
				localctx = NewExpresionContext(p, _parentctx, _parentState)
				localctx.(*ExpresionContext).op_izq = _prevctx
				p.PushNewRecursionContext(localctx, _startState, NparserRULE_expresion)
				p.SetState(527)

				if !(p.Precpred(p.GetParserRuleContext(), 25)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 25)", ""))
				}
				{
					p.SetState(528)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ExpresionContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == NparserRESTA || _la == NparserSUMA) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ExpresionContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(529)

					var _x = p.expresion(26)

					localctx.(*ExpresionContext).op_der = _x
					localctx.(*ExpresionContext)._expresion = _x
				}

				fila := (func() int {
					if localctx.(*ExpresionContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).GetOp().GetLine()
					}
				}())
				columna := (func() int {
					if localctx.(*ExpresionContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).GetOp().GetColumn()
					}
				}())
				localctx.(*ExpresionContext).ex = expresiones.NewOperation(localctx.(*ExpresionContext).GetOp_izq().GetEx(), (func() string {
					if localctx.(*ExpresionContext).GetOp() == nil {
						return ""
					} else {
						return localctx.(*ExpresionContext).GetOp().GetText()
					}
				}()), localctx.(*ExpresionContext).GetOp_der().GetEx(), false, fila, columna)

			case 3:
				localctx = NewExpresionContext(p, _parentctx, _parentState)
				localctx.(*ExpresionContext).op_izq = _prevctx
				p.PushNewRecursionContext(localctx, _startState, NparserRULE_expresion)
				p.SetState(532)

				if !(p.Precpred(p.GetParserRuleContext(), 24)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 24)", ""))
				}
				{
					p.SetState(533)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ExpresionContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(((_la-62)&-(0x1f+1)) == 0 && ((1<<uint((_la-62)))&((1<<(NparserMAYOR_I-62))|(1<<(NparserMAYOR-62))|(1<<(NparserMENOR_I-62))|(1<<(NparserMENOR-62))|(1<<(NparserIGUALDAD-62))|(1<<(NparserDISTINTO-62)))) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ExpresionContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(534)

					var _x = p.expresion(25)

					localctx.(*ExpresionContext).op_der = _x
					localctx.(*ExpresionContext)._expresion = _x
				}

				fila := (func() int {
					if localctx.(*ExpresionContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).GetOp().GetLine()
					}
				}())
				columna := (func() int {
					if localctx.(*ExpresionContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).GetOp().GetColumn()
					}
				}())
				localctx.(*ExpresionContext).ex = expresiones.NewOperation(localctx.(*ExpresionContext).GetOp_izq().GetEx(), (func() string {
					if localctx.(*ExpresionContext).GetOp() == nil {
						return ""
					} else {
						return localctx.(*ExpresionContext).GetOp().GetText()
					}
				}()), localctx.(*ExpresionContext).GetOp_der().GetEx(), false, fila, columna)

			case 4:
				localctx = NewExpresionContext(p, _parentctx, _parentState)
				localctx.(*ExpresionContext).op_izq = _prevctx
				p.PushNewRecursionContext(localctx, _startState, NparserRULE_expresion)
				p.SetState(537)

				if !(p.Precpred(p.GetParserRuleContext(), 23)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 23)", ""))
				}
				{
					p.SetState(538)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ExpresionContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == NparserIGUALDAD || _la == NparserDISTINTO) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ExpresionContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(539)

					var _x = p.expresion(24)

					localctx.(*ExpresionContext).op_der = _x
					localctx.(*ExpresionContext)._expresion = _x
				}

				fila := (func() int {
					if localctx.(*ExpresionContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).GetOp().GetLine()
					}
				}())
				columna := (func() int {
					if localctx.(*ExpresionContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).GetOp().GetColumn()
					}
				}())
				localctx.(*ExpresionContext).ex = expresiones.NewOperation(localctx.(*ExpresionContext).GetOp_izq().GetEx(), (func() string {
					if localctx.(*ExpresionContext).GetOp() == nil {
						return ""
					} else {
						return localctx.(*ExpresionContext).GetOp().GetText()
					}
				}()), localctx.(*ExpresionContext).GetOp_der().GetEx(), false, fila, columna)

			case 5:
				localctx = NewExpresionContext(p, _parentctx, _parentState)
				localctx.(*ExpresionContext).op_izq = _prevctx
				p.PushNewRecursionContext(localctx, _startState, NparserRULE_expresion)
				p.SetState(542)

				if !(p.Precpred(p.GetParserRuleContext(), 22)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 22)", ""))
				}
				{
					p.SetState(543)

					var _m = p.Match(NparserAND)

					localctx.(*ExpresionContext)._AND = _m
				}
				{
					p.SetState(544)

					var _x = p.expresion(23)

					localctx.(*ExpresionContext).op_der = _x
					localctx.(*ExpresionContext)._expresion = _x
				}

				fila := (func() int {
					if localctx.(*ExpresionContext).Get_AND() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_AND().GetLine()
					}
				}())
				columna := (func() int {
					if localctx.(*ExpresionContext).Get_AND() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_AND().GetColumn()
					}
				}())
				localctx.(*ExpresionContext).ex = expresiones.NewOperation(localctx.(*ExpresionContext).GetOp_izq().GetEx(), (func() string {
					if localctx.(*ExpresionContext).Get_AND() == nil {
						return ""
					} else {
						return localctx.(*ExpresionContext).Get_AND().GetText()
					}
				}()), localctx.(*ExpresionContext).GetOp_der().GetEx(), false, fila, columna)

			case 6:
				localctx = NewExpresionContext(p, _parentctx, _parentState)
				localctx.(*ExpresionContext).op_izq = _prevctx
				p.PushNewRecursionContext(localctx, _startState, NparserRULE_expresion)
				p.SetState(547)

				if !(p.Precpred(p.GetParserRuleContext(), 21)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 21)", ""))
				}
				{
					p.SetState(548)

					var _m = p.Match(NparserOR)

					localctx.(*ExpresionContext)._OR = _m
				}
				{
					p.SetState(549)

					var _x = p.expresion(22)

					localctx.(*ExpresionContext).op_der = _x
					localctx.(*ExpresionContext)._expresion = _x
				}

				fila := (func() int {
					if localctx.(*ExpresionContext).Get_OR() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_OR().GetLine()
					}
				}())
				columna := (func() int {
					if localctx.(*ExpresionContext).Get_OR() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_OR().GetColumn()
					}
				}())
				localctx.(*ExpresionContext).ex = expresiones.NewOperation(localctx.(*ExpresionContext).GetOp_izq().GetEx(), (func() string {
					if localctx.(*ExpresionContext).Get_OR() == nil {
						return ""
					} else {
						return localctx.(*ExpresionContext).Get_OR().GetText()
					}
				}()), localctx.(*ExpresionContext).GetOp_der().GetEx(), false, fila, columna)

			case 7:
				localctx = NewExpresionContext(p, _parentctx, _parentState)
				localctx.(*ExpresionContext).e = _prevctx
				p.PushNewRecursionContext(localctx, _startState, NparserRULE_expresion)
				p.SetState(552)

				if !(p.Precpred(p.GetParserRuleContext(), 29)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 29)", ""))
				}
				{
					p.SetState(553)

					var _m = p.Match(NparserPUNTO)

					localctx.(*ExpresionContext)._PUNTO = _m
				}
				{
					p.SetState(554)
					p.Match(NparserTO_STRING)
				}
				{
					p.SetState(555)

					var _m = p.Match(NparserPAR_IZQ)

					localctx.(*ExpresionContext)._PAR_IZQ = _m
				}
				{
					p.SetState(556)
					p.Match(NparserPAR_DER)
				}

				fila := (func() int {
					if localctx.(*ExpresionContext).Get_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_PUNTO().GetLine()
					}
				}())
				columna := (func() int {
					if localctx.(*ExpresionContext).Get_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_PUNTO().GetColumn()
					}
				}()) - 1
				localctx.(*ExpresionContext).ex = fn_primitivas.NewToString(Ast.LLAMADA_FUNCION, localctx.(*ExpresionContext).GetE().GetEx(), fila, columna)

			case 8:
				localctx = NewExpresionContext(p, _parentctx, _parentState)
				localctx.(*ExpresionContext).e = _prevctx
				p.PushNewRecursionContext(localctx, _startState, NparserRULE_expresion)
				p.SetState(558)

				if !(p.Precpred(p.GetParserRuleContext(), 28)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 28)", ""))
				}
				{
					p.SetState(559)

					var _m = p.Match(NparserPUNTO)

					localctx.(*ExpresionContext)._PUNTO = _m
				}
				{
					p.SetState(560)
					p.Match(NparserSQRT)
				}
				{
					p.SetState(561)

					var _m = p.Match(NparserPAR_IZQ)

					localctx.(*ExpresionContext)._PAR_IZQ = _m
				}
				{
					p.SetState(562)
					p.Match(NparserPAR_DER)
				}

				fila := (func() int {
					if localctx.(*ExpresionContext).Get_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_PUNTO().GetLine()
					}
				}())
				columna := (func() int {
					if localctx.(*ExpresionContext).Get_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_PUNTO().GetColumn()
					}
				}()) - 1
				localctx.(*ExpresionContext).ex = fn_primitivas.NewSqrt(Ast.LLAMADA_FUNCION, localctx.(*ExpresionContext).GetE().GetEx(), fila, columna)

			case 9:
				localctx = NewExpresionContext(p, _parentctx, _parentState)
				localctx.(*ExpresionContext).e = _prevctx
				p.PushNewRecursionContext(localctx, _startState, NparserRULE_expresion)
				p.SetState(564)

				if !(p.Precpred(p.GetParserRuleContext(), 27)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 27)", ""))
				}
				{
					p.SetState(565)

					var _m = p.Match(NparserPUNTO)

					localctx.(*ExpresionContext)._PUNTO = _m
				}
				{
					p.SetState(566)
					p.Match(NparserABS)
				}
				{
					p.SetState(567)

					var _m = p.Match(NparserPAR_IZQ)

					localctx.(*ExpresionContext)._PAR_IZQ = _m
				}
				{
					p.SetState(568)
					p.Match(NparserPAR_DER)
				}

				fila := (func() int {
					if localctx.(*ExpresionContext).Get_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_PUNTO().GetLine()
					}
				}())
				columna := (func() int {
					if localctx.(*ExpresionContext).Get_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_PUNTO().GetColumn()
					}
				}()) - 1
				localctx.(*ExpresionContext).ex = fn_primitivas.NewAbs(Ast.LLAMADA_FUNCION, localctx.(*ExpresionContext).GetE().GetEx(), fila, columna)

			case 10:
				localctx = NewExpresionContext(p, _parentctx, _parentState)
				localctx.(*ExpresionContext).id = _prevctx
				p.PushNewRecursionContext(localctx, _startState, NparserRULE_expresion)
				p.SetState(570)

				if !(p.Precpred(p.GetParserRuleContext(), 13)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 13)", ""))
				}
				{
					p.SetState(571)

					var _x = p.dimension_acceso_array(0)

					localctx.(*ExpresionContext).lista = _x
				}

				elemento := localctx.(*ExpresionContext).GetId().GetEx()
				fila := elemento.(Ast.Abstracto).GetFila()
				columna := elemento.(Ast.Abstracto).GetColumna() - 1
				localctx.(*ExpresionContext).ex = fn_array.NewAccesoArray(localctx.(*ExpresionContext).GetId().GetEx(), localctx.(*ExpresionContext).GetLista().GetList(), fila, columna)

			case 11:
				localctx = NewExpresionContext(p, _parentctx, _parentState)
				localctx.(*ExpresionContext).id = _prevctx
				p.PushNewRecursionContext(localctx, _startState, NparserRULE_expresion)
				p.SetState(574)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
				}
				{
					p.SetState(575)

					var _m = p.Match(NparserCORCHETE_IZQ)

					localctx.(*ExpresionContext)._CORCHETE_IZQ = _m
				}
				{
					p.SetState(576)

					var _x = p.expresion(0)

					localctx.(*ExpresionContext).index = _x
					localctx.(*ExpresionContext)._expresion = _x
				}
				{
					p.SetState(577)
					p.Match(NparserCORCHETE_DER)
				}

				fila := (func() int {
					if localctx.(*ExpresionContext).Get_CORCHETE_IZQ() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_CORCHETE_IZQ().GetLine()
					}
				}())
				columna := (func() int {
					if localctx.(*ExpresionContext).Get_CORCHETE_IZQ() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_CORCHETE_IZQ().GetColumn()
					}
				}()) - 1
				localctx.(*ExpresionContext).ex = fn_vectores.NewAccesoVec(localctx.(*ExpresionContext).GetId().GetEx(), localctx.(*ExpresionContext).GetIndex().GetEx(), Ast.VEC_ACCESO, fila, columna)

			case 12:
				localctx = NewExpresionContext(p, _parentctx, _parentState)
				localctx.(*ExpresionContext).id = _prevctx
				p.PushNewRecursionContext(localctx, _startState, NparserRULE_expresion)
				p.SetState(580)

				if !(p.Precpred(p.GetParserRuleContext(), 11)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 11)", ""))
				}
				{
					p.SetState(581)

					var _m = p.Match(NparserPUNTO)

					localctx.(*ExpresionContext)._PUNTO = _m
				}
				{
					p.SetState(582)
					p.Match(NparserLEN)
				}
				{
					p.SetState(583)

					var _m = p.Match(NparserPAR_IZQ)

					localctx.(*ExpresionContext)._PAR_IZQ = _m
				}
				{
					p.SetState(584)
					p.Match(NparserPAR_DER)
				}

				fila := (func() int {
					if localctx.(*ExpresionContext).Get_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_PUNTO().GetLine()
					}
				}())
				columna := (func() int {
					if localctx.(*ExpresionContext).Get_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_PUNTO().GetColumn()
					}
				}())
				localctx.(*ExpresionContext).ex = fn_vectores.NewLenVec(localctx.(*ExpresionContext).GetId().GetEx(), Ast.VEC_PUSH, fila, columna)

			case 13:
				localctx = NewExpresionContext(p, _parentctx, _parentState)
				localctx.(*ExpresionContext).id = _prevctx
				p.PushNewRecursionContext(localctx, _startState, NparserRULE_expresion)
				p.SetState(586)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
				}
				{
					p.SetState(587)

					var _m = p.Match(NparserPUNTO)

					localctx.(*ExpresionContext)._PUNTO = _m
				}
				{
					p.SetState(588)
					p.Match(NparserCAPACITY)
				}
				{
					p.SetState(589)

					var _m = p.Match(NparserPAR_IZQ)

					localctx.(*ExpresionContext)._PAR_IZQ = _m
				}
				{
					p.SetState(590)
					p.Match(NparserPAR_DER)
				}

				fila := (func() int {
					if localctx.(*ExpresionContext).Get_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_PUNTO().GetLine()
					}
				}())
				columna := (func() int {
					if localctx.(*ExpresionContext).Get_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_PUNTO().GetColumn()
					}
				}())
				localctx.(*ExpresionContext).ex = fn_vectores.NewCapacityVec(localctx.(*ExpresionContext).GetId().GetEx(), Ast.VEC_CAPACITY, fila, columna)

			case 14:
				localctx = NewExpresionContext(p, _parentctx, _parentState)
				localctx.(*ExpresionContext).id = _prevctx
				p.PushNewRecursionContext(localctx, _startState, NparserRULE_expresion)
				p.SetState(592)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
				}
				{
					p.SetState(593)

					var _m = p.Match(NparserPUNTO)

					localctx.(*ExpresionContext)._PUNTO = _m
				}
				{
					p.SetState(594)
					p.Match(NparserCONTAINS)
				}
				{
					p.SetState(595)

					var _m = p.Match(NparserPAR_IZQ)

					localctx.(*ExpresionContext)._PAR_IZQ = _m
				}
				{
					p.SetState(596)
					p.Match(NparserAMPERSAND)
				}
				{
					p.SetState(597)

					var _x = p.expresion(0)

					localctx.(*ExpresionContext).exp = _x
					localctx.(*ExpresionContext)._expresion = _x
				}
				{
					p.SetState(598)
					p.Match(NparserPAR_DER)
				}

				fila := (func() int {
					if localctx.(*ExpresionContext).Get_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_PUNTO().GetLine()
					}
				}())
				columna := (func() int {
					if localctx.(*ExpresionContext).Get_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_PUNTO().GetColumn()
					}
				}())
				localctx.(*ExpresionContext).ex = fn_vectores.NewContainsVec(localctx.(*ExpresionContext).GetId().GetEx(), localctx.(*ExpresionContext).GetExp().GetEx(), Ast.VEC_CONTAINS, fila, columna)

			case 15:
				localctx = NewExpresionContext(p, _parentctx, _parentState)
				localctx.(*ExpresionContext).id = _prevctx
				p.PushNewRecursionContext(localctx, _startState, NparserRULE_expresion)
				p.SetState(601)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
				}
				{
					p.SetState(602)

					var _m = p.Match(NparserPUNTO)

					localctx.(*ExpresionContext)._PUNTO = _m
				}
				{
					p.SetState(603)
					p.Match(NparserREMOVE)
				}
				{
					p.SetState(604)

					var _m = p.Match(NparserPAR_IZQ)

					localctx.(*ExpresionContext)._PAR_IZQ = _m
				}
				{
					p.SetState(605)

					var _x = p.expresion(0)

					localctx.(*ExpresionContext).index = _x
					localctx.(*ExpresionContext)._expresion = _x
				}
				{
					p.SetState(606)
					p.Match(NparserPAR_DER)
				}

				fila := (func() int {
					if localctx.(*ExpresionContext).Get_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_PUNTO().GetLine()
					}
				}())
				columna := (func() int {
					if localctx.(*ExpresionContext).Get_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_PUNTO().GetColumn()
					}
				}())
				localctx.(*ExpresionContext).ex = fn_vectores.NewRemoveVec(localctx.(*ExpresionContext).GetId().GetEx(), localctx.(*ExpresionContext).GetIndex().GetEx(), Ast.VEC_REMOVE, fila, columna)

			}

		}
		p.SetState(613)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext())
	}

	return localctx
}

// ITipo_datoContext is an interface to support dynamic dispatch.
type ITipo_datoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetEx returns the ex attribute.
	GetEx() Ast.TipoDato

	// SetEx sets the ex attribute.
	SetEx(Ast.TipoDato)

	// IsTipo_datoContext differentiates from other interfaces.
	IsTipo_datoContext()
}

type Tipo_datoContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	ex     Ast.TipoDato
}

func NewEmptyTipo_datoContext() *Tipo_datoContext {
	var p = new(Tipo_datoContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_tipo_dato
	return p
}

func (*Tipo_datoContext) IsTipo_datoContext() {}

func NewTipo_datoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tipo_datoContext {
	var p = new(Tipo_datoContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_tipo_dato

	return p
}

func (s *Tipo_datoContext) GetParser() antlr.Parser { return s.parser }

func (s *Tipo_datoContext) GetEx() Ast.TipoDato { return s.ex }

func (s *Tipo_datoContext) SetEx(v Ast.TipoDato) { s.ex = v }

func (s *Tipo_datoContext) BOOL() antlr.TerminalNode {
	return s.GetToken(NparserBOOL, 0)
}

func (s *Tipo_datoContext) CHAR() antlr.TerminalNode {
	return s.GetToken(NparserCHAR, 0)
}

func (s *Tipo_datoContext) I64() antlr.TerminalNode {
	return s.GetToken(NparserI64, 0)
}

func (s *Tipo_datoContext) F64() antlr.TerminalNode {
	return s.GetToken(NparserF64, 0)
}

func (s *Tipo_datoContext) STR() antlr.TerminalNode {
	return s.GetToken(NparserSTR, 0)
}

func (s *Tipo_datoContext) STRING() antlr.TerminalNode {
	return s.GetToken(NparserSTRING, 0)
}

func (s *Tipo_datoContext) USIZE() antlr.TerminalNode {
	return s.GetToken(NparserUSIZE, 0)
}

func (s *Tipo_datoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tipo_datoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Tipo_dato() (localctx ITipo_datoContext) {
	localctx = NewTipo_datoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, NparserRULE_tipo_dato)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(628)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case NparserBOOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(614)
			p.Match(NparserBOOL)
		}
		localctx.(*Tipo_datoContext).ex = Ast.BOOLEAN

	case NparserCHAR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(616)
			p.Match(NparserCHAR)
		}
		localctx.(*Tipo_datoContext).ex = Ast.CHAR

	case NparserI64:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(618)
			p.Match(NparserI64)
		}
		localctx.(*Tipo_datoContext).ex = Ast.I64

	case NparserF64:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(620)
			p.Match(NparserF64)
		}
		localctx.(*Tipo_datoContext).ex = Ast.F64

	case NparserSTR:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(622)
			p.Match(NparserSTR)
		}
		localctx.(*Tipo_datoContext).ex = Ast.STR

	case NparserSTRING:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(624)
			p.Match(NparserSTRING)
		}
		localctx.(*Tipo_datoContext).ex = Ast.STRING

	case NparserUSIZE:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(626)
			p.Match(NparserUSIZE)
		}
		localctx.(*Tipo_datoContext).ex = Ast.USIZE

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IControl_ifContext is an interface to support dynamic dispatch.
type IControl_ifContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_IF returns the _IF token.
	Get_IF() antlr.Token

	// Set_IF sets the _IF token.
	Set_IF(antlr.Token)

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// GetBloqueIf returns the bloqueIf rule contexts.
	GetBloqueIf() IBloqueContext

	// GetBloqueElse returns the bloqueElse rule contexts.
	GetBloqueElse() IBloqueContext

	// Get_bloque_else_if returns the _bloque_else_if rule contexts.
	Get_bloque_else_if() IBloque_else_ifContext

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// SetBloqueIf sets the bloqueIf rule contexts.
	SetBloqueIf(IBloqueContext)

	// SetBloqueElse sets the bloqueElse rule contexts.
	SetBloqueElse(IBloqueContext)

	// Set_bloque_else_if sets the _bloque_else_if rule contexts.
	Set_bloque_else_if(IBloque_else_ifContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsControl_ifContext differentiates from other interfaces.
	IsControl_ifContext()
}

type Control_ifContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	ex              Ast.Instruccion
	_IF             antlr.Token
	_expresion      IExpresionContext
	bloqueIf        IBloqueContext
	bloqueElse      IBloqueContext
	_bloque_else_if IBloque_else_ifContext
}

func NewEmptyControl_ifContext() *Control_ifContext {
	var p = new(Control_ifContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_control_if
	return p
}

func (*Control_ifContext) IsControl_ifContext() {}

func NewControl_ifContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Control_ifContext {
	var p = new(Control_ifContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_control_if

	return p
}

func (s *Control_ifContext) GetParser() antlr.Parser { return s.parser }

func (s *Control_ifContext) Get_IF() antlr.Token { return s._IF }

func (s *Control_ifContext) Set_IF(v antlr.Token) { s._IF = v }

func (s *Control_ifContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *Control_ifContext) GetBloqueIf() IBloqueContext { return s.bloqueIf }

func (s *Control_ifContext) GetBloqueElse() IBloqueContext { return s.bloqueElse }

func (s *Control_ifContext) Get_bloque_else_if() IBloque_else_ifContext { return s._bloque_else_if }

func (s *Control_ifContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *Control_ifContext) SetBloqueIf(v IBloqueContext) { s.bloqueIf = v }

func (s *Control_ifContext) SetBloqueElse(v IBloqueContext) { s.bloqueElse = v }

func (s *Control_ifContext) Set_bloque_else_if(v IBloque_else_ifContext) { s._bloque_else_if = v }

func (s *Control_ifContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Control_ifContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Control_ifContext) IF() antlr.TerminalNode {
	return s.GetToken(NparserIF, 0)
}

func (s *Control_ifContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Control_ifContext) AllBloque() []IBloqueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBloqueContext)(nil)).Elem())
	var tst = make([]IBloqueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBloqueContext)
		}
	}

	return tst
}

func (s *Control_ifContext) Bloque(i int) IBloqueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloqueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBloqueContext)
}

func (s *Control_ifContext) ELSE() antlr.TerminalNode {
	return s.GetToken(NparserELSE, 0)
}

func (s *Control_ifContext) Bloque_else_if() IBloque_else_ifContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloque_else_ifContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloque_else_ifContext)
}

func (s *Control_ifContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Control_ifContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Control_if() (localctx IControl_ifContext) {
	localctx = NewControl_ifContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, NparserRULE_control_if)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(656)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 14, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(630)

			var _m = p.Match(NparserIF)

			localctx.(*Control_ifContext)._IF = _m
		}
		{
			p.SetState(631)

			var _x = p.expresion(0)

			localctx.(*Control_ifContext)._expresion = _x
		}
		{
			p.SetState(632)

			var _x = p.Bloque()

			localctx.(*Control_ifContext).bloqueIf = _x
		}

		fila := (func() int {
			if localctx.(*Control_ifContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_ifContext).Get_IF().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Control_ifContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_ifContext).Get_IF().GetColumn()
			}
		}())
		columna++
		lista_null := arraylist.New()
		localctx.(*Control_ifContext).ex = exp_ins.NewIF(localctx.(*Control_ifContext).Get_expresion().GetEx(), localctx.(*Control_ifContext).GetBloqueIf().GetList(), lista_null, Ast.IF, fila, columna, false)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(635)

			var _m = p.Match(NparserIF)

			localctx.(*Control_ifContext)._IF = _m
		}
		{
			p.SetState(636)

			var _x = p.expresion(0)

			localctx.(*Control_ifContext)._expresion = _x
		}
		{
			p.SetState(637)

			var _x = p.Bloque()

			localctx.(*Control_ifContext).bloqueIf = _x
		}
		{
			p.SetState(638)
			p.Match(NparserELSE)
		}
		{
			p.SetState(639)

			var _x = p.Bloque()

			localctx.(*Control_ifContext).bloqueElse = _x
		}

		fila := (func() int {
			if localctx.(*Control_ifContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_ifContext).Get_IF().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Control_ifContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_ifContext).Get_IF().GetColumn()
			}
		}())
		columna++
		lista_entonces := arraylist.New()
		lista_null := arraylist.New()
		Else := exp_ins.NewIF(localctx.(*Control_ifContext).Get_expresion().GetEx(), localctx.(*Control_ifContext).GetBloqueElse().GetList(), lista_null, Ast.ELSE, fila, columna, false)
		lista_entonces.Add(Else)
		localctx.(*Control_ifContext).ex = exp_ins.NewIF(localctx.(*Control_ifContext).Get_expresion().GetEx(), localctx.(*Control_ifContext).GetBloqueIf().GetList(), lista_entonces, Ast.IF, fila, columna, false)

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(642)

			var _m = p.Match(NparserIF)

			localctx.(*Control_ifContext)._IF = _m
		}
		{
			p.SetState(643)

			var _x = p.expresion(0)

			localctx.(*Control_ifContext)._expresion = _x
		}
		{
			p.SetState(644)

			var _x = p.Bloque()

			localctx.(*Control_ifContext).bloqueIf = _x
		}
		{
			p.SetState(645)

			var _x = p.Bloque_else_if()

			localctx.(*Control_ifContext)._bloque_else_if = _x
		}

		fila := (func() int {
			if localctx.(*Control_ifContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_ifContext).Get_IF().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Control_ifContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_ifContext).Get_IF().GetColumn()
			}
		}())
		columna++
		lista_entonces := localctx.(*Control_ifContext).Get_bloque_else_if().GetList()
		localctx.(*Control_ifContext).ex = exp_ins.NewIF(localctx.(*Control_ifContext).Get_expresion().GetEx(), localctx.(*Control_ifContext).GetBloqueIf().GetList(), lista_entonces, Ast.IF, fila, columna, false)

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(648)

			var _m = p.Match(NparserIF)

			localctx.(*Control_ifContext)._IF = _m
		}
		{
			p.SetState(649)

			var _x = p.expresion(0)

			localctx.(*Control_ifContext)._expresion = _x
		}
		{
			p.SetState(650)

			var _x = p.Bloque()

			localctx.(*Control_ifContext).bloqueIf = _x
		}
		{
			p.SetState(651)

			var _x = p.Bloque_else_if()

			localctx.(*Control_ifContext)._bloque_else_if = _x
		}
		{
			p.SetState(652)
			p.Match(NparserELSE)
		}
		{
			p.SetState(653)

			var _x = p.Bloque()

			localctx.(*Control_ifContext).bloqueElse = _x
		}

		fila := (func() int {
			if localctx.(*Control_ifContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_ifContext).Get_IF().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Control_ifContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_ifContext).Get_IF().GetColumn()
			}
		}())
		columna++
		lista_null := arraylist.New()
		Else := exp_ins.NewIF(localctx.(*Control_ifContext).Get_expresion().GetEx(), localctx.(*Control_ifContext).GetBloqueElse().GetList(), lista_null, Ast.ELSE, fila, columna, false)
		lista_entonces := localctx.(*Control_ifContext).Get_bloque_else_if().GetList()
		lista_entonces.Add(Else)
		localctx.(*Control_ifContext).ex = exp_ins.NewIF(localctx.(*Control_ifContext).Get_expresion().GetEx(), localctx.(*Control_ifContext).GetBloqueIf().GetList(), lista_entonces, Ast.IF, fila, columna, false)

	}

	return localctx
}

// IBloque_else_ifContext is an interface to support dynamic dispatch.
type IBloque_else_ifContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_else_if returns the _else_if rule contexts.
	Get_else_if() IElse_ifContext

	// Set_else_if sets the _else_if rule contexts.
	Set_else_if(IElse_ifContext)

	// GetLista returns the lista rule context list.
	GetLista() []IElse_ifContext

	// SetLista sets the lista rule context list.
	SetLista([]IElse_ifContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsBloque_else_ifContext differentiates from other interfaces.
	IsBloque_else_ifContext()
}

type Bloque_else_ifContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	list     *arraylist.List
	_else_if IElse_ifContext
	lista    []IElse_ifContext
}

func NewEmptyBloque_else_ifContext() *Bloque_else_ifContext {
	var p = new(Bloque_else_ifContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_bloque_else_if
	return p
}

func (*Bloque_else_ifContext) IsBloque_else_ifContext() {}

func NewBloque_else_ifContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bloque_else_ifContext {
	var p = new(Bloque_else_ifContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_bloque_else_if

	return p
}

func (s *Bloque_else_ifContext) GetParser() antlr.Parser { return s.parser }

func (s *Bloque_else_ifContext) Get_else_if() IElse_ifContext { return s._else_if }

func (s *Bloque_else_ifContext) Set_else_if(v IElse_ifContext) { s._else_if = v }

func (s *Bloque_else_ifContext) GetLista() []IElse_ifContext { return s.lista }

func (s *Bloque_else_ifContext) SetLista(v []IElse_ifContext) { s.lista = v }

func (s *Bloque_else_ifContext) GetList() *arraylist.List { return s.list }

func (s *Bloque_else_ifContext) SetList(v *arraylist.List) { s.list = v }

func (s *Bloque_else_ifContext) AllElse_if() []IElse_ifContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IElse_ifContext)(nil)).Elem())
	var tst = make([]IElse_ifContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IElse_ifContext)
		}
	}

	return tst
}

func (s *Bloque_else_ifContext) Else_if(i int) IElse_ifContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElse_ifContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IElse_ifContext)
}

func (s *Bloque_else_ifContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bloque_else_ifContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Bloque_else_if() (localctx IBloque_else_ifContext) {
	localctx = NewBloque_else_ifContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, NparserRULE_bloque_else_if)
	localctx.(*Bloque_else_ifContext).list = arraylist.New()

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(659)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(658)

				var _x = p.Else_if()

				localctx.(*Bloque_else_ifContext)._else_if = _x
			}
			localctx.(*Bloque_else_ifContext).lista = append(localctx.(*Bloque_else_ifContext).lista, localctx.(*Bloque_else_ifContext)._else_if)

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(661)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 15, p.GetParserRuleContext())
	}

	listas := localctx.(*Bloque_else_ifContext).GetLista()
	for _, e := range listas {
		localctx.(*Bloque_else_ifContext).list.Add(e.GetEx())
	}

	return localctx
}

// IElse_ifContext is an interface to support dynamic dispatch.
type IElse_ifContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ELSE returns the _ELSE token.
	Get_ELSE() antlr.Token

	// Set_ELSE sets the _ELSE token.
	Set_ELSE(antlr.Token)

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// Get_bloque returns the _bloque rule contexts.
	Get_bloque() IBloqueContext

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// Set_bloque sets the _bloque rule contexts.
	Set_bloque(IBloqueContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsElse_ifContext differentiates from other interfaces.
	IsElse_ifContext()
}

type Else_ifContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	ex         Ast.Instruccion
	_ELSE      antlr.Token
	_expresion IExpresionContext
	_bloque    IBloqueContext
}

func NewEmptyElse_ifContext() *Else_ifContext {
	var p = new(Else_ifContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_else_if
	return p
}

func (*Else_ifContext) IsElse_ifContext() {}

func NewElse_ifContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Else_ifContext {
	var p = new(Else_ifContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_else_if

	return p
}

func (s *Else_ifContext) GetParser() antlr.Parser { return s.parser }

func (s *Else_ifContext) Get_ELSE() antlr.Token { return s._ELSE }

func (s *Else_ifContext) Set_ELSE(v antlr.Token) { s._ELSE = v }

func (s *Else_ifContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *Else_ifContext) Get_bloque() IBloqueContext { return s._bloque }

func (s *Else_ifContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *Else_ifContext) Set_bloque(v IBloqueContext) { s._bloque = v }

func (s *Else_ifContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Else_ifContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Else_ifContext) ELSE() antlr.TerminalNode {
	return s.GetToken(NparserELSE, 0)
}

func (s *Else_ifContext) IF() antlr.TerminalNode {
	return s.GetToken(NparserIF, 0)
}

func (s *Else_ifContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Else_ifContext) Bloque() IBloqueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloqueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloqueContext)
}

func (s *Else_ifContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Else_ifContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Else_if() (localctx IElse_ifContext) {
	localctx = NewElse_ifContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, NparserRULE_else_if)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(665)

		var _m = p.Match(NparserELSE)

		localctx.(*Else_ifContext)._ELSE = _m
	}
	{
		p.SetState(666)
		p.Match(NparserIF)
	}
	{
		p.SetState(667)

		var _x = p.expresion(0)

		localctx.(*Else_ifContext)._expresion = _x
	}
	{
		p.SetState(668)

		var _x = p.Bloque()

		localctx.(*Else_ifContext)._bloque = _x
	}

	fila := (func() int {
		if localctx.(*Else_ifContext).Get_ELSE() == nil {
			return 0
		} else {
			return localctx.(*Else_ifContext).Get_ELSE().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*Else_ifContext).Get_ELSE() == nil {
			return 0
		} else {
			return localctx.(*Else_ifContext).Get_ELSE().GetColumn()
		}
	}())
	columna++
	lista_null := arraylist.New()
	localctx.(*Else_ifContext).ex = exp_ins.NewIF(localctx.(*Else_ifContext).Get_expresion().GetEx(), localctx.(*Else_ifContext).Get_bloque().GetList(), lista_null, Ast.ELSEIF, fila, columna, false)

	return localctx
}

// IControl_if_expContext is an interface to support dynamic dispatch.
type IControl_if_expContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_IF returns the _IF token.
	Get_IF() antlr.Token

	// Set_IF sets the _IF token.
	Set_IF(antlr.Token)

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// GetBloqueIf returns the bloqueIf rule contexts.
	GetBloqueIf() IBloqueContext

	// GetBloqueElse returns the bloqueElse rule contexts.
	GetBloqueElse() IBloqueContext

	// Get_bloque_else_if_exp returns the _bloque_else_if_exp rule contexts.
	Get_bloque_else_if_exp() IBloque_else_if_expContext

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// SetBloqueIf sets the bloqueIf rule contexts.
	SetBloqueIf(IBloqueContext)

	// SetBloqueElse sets the bloqueElse rule contexts.
	SetBloqueElse(IBloqueContext)

	// Set_bloque_else_if_exp sets the _bloque_else_if_exp rule contexts.
	Set_bloque_else_if_exp(IBloque_else_if_expContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsControl_if_expContext differentiates from other interfaces.
	IsControl_if_expContext()
}

type Control_if_expContext struct {
	*antlr.BaseParserRuleContext
	parser              antlr.Parser
	ex                  Ast.Instruccion
	_IF                 antlr.Token
	_expresion          IExpresionContext
	bloqueIf            IBloqueContext
	bloqueElse          IBloqueContext
	_bloque_else_if_exp IBloque_else_if_expContext
}

func NewEmptyControl_if_expContext() *Control_if_expContext {
	var p = new(Control_if_expContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_control_if_exp
	return p
}

func (*Control_if_expContext) IsControl_if_expContext() {}

func NewControl_if_expContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Control_if_expContext {
	var p = new(Control_if_expContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_control_if_exp

	return p
}

func (s *Control_if_expContext) GetParser() antlr.Parser { return s.parser }

func (s *Control_if_expContext) Get_IF() antlr.Token { return s._IF }

func (s *Control_if_expContext) Set_IF(v antlr.Token) { s._IF = v }

func (s *Control_if_expContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *Control_if_expContext) GetBloqueIf() IBloqueContext { return s.bloqueIf }

func (s *Control_if_expContext) GetBloqueElse() IBloqueContext { return s.bloqueElse }

func (s *Control_if_expContext) Get_bloque_else_if_exp() IBloque_else_if_expContext {
	return s._bloque_else_if_exp
}

func (s *Control_if_expContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *Control_if_expContext) SetBloqueIf(v IBloqueContext) { s.bloqueIf = v }

func (s *Control_if_expContext) SetBloqueElse(v IBloqueContext) { s.bloqueElse = v }

func (s *Control_if_expContext) Set_bloque_else_if_exp(v IBloque_else_if_expContext) {
	s._bloque_else_if_exp = v
}

func (s *Control_if_expContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Control_if_expContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Control_if_expContext) IF() antlr.TerminalNode {
	return s.GetToken(NparserIF, 0)
}

func (s *Control_if_expContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Control_if_expContext) AllBloque() []IBloqueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBloqueContext)(nil)).Elem())
	var tst = make([]IBloqueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBloqueContext)
		}
	}

	return tst
}

func (s *Control_if_expContext) Bloque(i int) IBloqueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloqueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBloqueContext)
}

func (s *Control_if_expContext) ELSE() antlr.TerminalNode {
	return s.GetToken(NparserELSE, 0)
}

func (s *Control_if_expContext) Bloque_else_if_exp() IBloque_else_if_expContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloque_else_if_expContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloque_else_if_expContext)
}

func (s *Control_if_expContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Control_if_expContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Control_if_exp() (localctx IControl_if_expContext) {
	localctx = NewControl_if_expContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, NparserRULE_control_if_exp)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(697)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 16, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(671)

			var _m = p.Match(NparserIF)

			localctx.(*Control_if_expContext)._IF = _m
		}
		{
			p.SetState(672)

			var _x = p.expresion(0)

			localctx.(*Control_if_expContext)._expresion = _x
		}
		{
			p.SetState(673)

			var _x = p.Bloque()

			localctx.(*Control_if_expContext).bloqueIf = _x
		}

		fila := (func() int {
			if localctx.(*Control_if_expContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_if_expContext).Get_IF().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Control_if_expContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_if_expContext).Get_IF().GetColumn()
			}
		}())
		columna++
		lista_null := arraylist.New()
		localctx.(*Control_if_expContext).ex = exp_ins.NewIF(localctx.(*Control_if_expContext).Get_expresion().GetEx(), localctx.(*Control_if_expContext).GetBloqueIf().GetList(), lista_null, Ast.IF_EXPRESION, fila, columna, true)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(676)

			var _m = p.Match(NparserIF)

			localctx.(*Control_if_expContext)._IF = _m
		}
		{
			p.SetState(677)

			var _x = p.expresion(0)

			localctx.(*Control_if_expContext)._expresion = _x
		}
		{
			p.SetState(678)

			var _x = p.Bloque()

			localctx.(*Control_if_expContext).bloqueIf = _x
		}
		{
			p.SetState(679)
			p.Match(NparserELSE)
		}
		{
			p.SetState(680)

			var _x = p.Bloque()

			localctx.(*Control_if_expContext).bloqueElse = _x
		}

		fila := (func() int {
			if localctx.(*Control_if_expContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_if_expContext).Get_IF().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Control_if_expContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_if_expContext).Get_IF().GetColumn()
			}
		}())
		columna++
		lista_entonces := arraylist.New()
		lista_null := arraylist.New()
		Else := exp_ins.NewIF(localctx.(*Control_if_expContext).Get_expresion().GetEx(), localctx.(*Control_if_expContext).GetBloqueElse().GetList(), lista_null, Ast.ELSE_EXPRESION, fila, columna, true)
		lista_entonces.Add(Else)
		localctx.(*Control_if_expContext).ex = exp_ins.NewIF(localctx.(*Control_if_expContext).Get_expresion().GetEx(), localctx.(*Control_if_expContext).GetBloqueIf().GetList(), lista_entonces, Ast.IF_EXPRESION, fila, columna, true)

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(683)

			var _m = p.Match(NparserIF)

			localctx.(*Control_if_expContext)._IF = _m
		}
		{
			p.SetState(684)

			var _x = p.expresion(0)

			localctx.(*Control_if_expContext)._expresion = _x
		}
		{
			p.SetState(685)

			var _x = p.Bloque()

			localctx.(*Control_if_expContext).bloqueIf = _x
		}
		{
			p.SetState(686)

			var _x = p.Bloque_else_if_exp()

			localctx.(*Control_if_expContext)._bloque_else_if_exp = _x
		}

		fila := (func() int {
			if localctx.(*Control_if_expContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_if_expContext).Get_IF().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Control_if_expContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_if_expContext).Get_IF().GetColumn()
			}
		}())
		columna++
		lista_entonces := localctx.(*Control_if_expContext).Get_bloque_else_if_exp().GetList()
		localctx.(*Control_if_expContext).ex = exp_ins.NewIF(localctx.(*Control_if_expContext).Get_expresion().GetEx(), localctx.(*Control_if_expContext).GetBloqueIf().GetList(), lista_entonces, Ast.IF_EXPRESION, fila, columna, true)

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(689)

			var _m = p.Match(NparserIF)

			localctx.(*Control_if_expContext)._IF = _m
		}
		{
			p.SetState(690)

			var _x = p.expresion(0)

			localctx.(*Control_if_expContext)._expresion = _x
		}
		{
			p.SetState(691)

			var _x = p.Bloque()

			localctx.(*Control_if_expContext).bloqueIf = _x
		}
		{
			p.SetState(692)

			var _x = p.Bloque_else_if_exp()

			localctx.(*Control_if_expContext)._bloque_else_if_exp = _x
		}
		{
			p.SetState(693)
			p.Match(NparserELSE)
		}
		{
			p.SetState(694)

			var _x = p.Bloque()

			localctx.(*Control_if_expContext).bloqueElse = _x
		}

		fila := (func() int {
			if localctx.(*Control_if_expContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_if_expContext).Get_IF().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Control_if_expContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_if_expContext).Get_IF().GetColumn()
			}
		}())
		columna++
		lista_null := arraylist.New()
		Else := exp_ins.NewIF(localctx.(*Control_if_expContext).Get_expresion().GetEx(), localctx.(*Control_if_expContext).GetBloqueElse().GetList(), lista_null, Ast.ELSE_EXPRESION, fila, columna, true)
		lista_entonces := localctx.(*Control_if_expContext).Get_bloque_else_if_exp().GetList()
		lista_entonces.Add(Else)
		localctx.(*Control_if_expContext).ex = exp_ins.NewIF(localctx.(*Control_if_expContext).Get_expresion().GetEx(), localctx.(*Control_if_expContext).GetBloqueIf().GetList(), lista_entonces, Ast.IF_EXPRESION, fila, columna, true)

	}

	return localctx
}

// IBloque_else_if_expContext is an interface to support dynamic dispatch.
type IBloque_else_if_expContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_else_if_exp returns the _else_if_exp rule contexts.
	Get_else_if_exp() IElse_if_expContext

	// Set_else_if_exp sets the _else_if_exp rule contexts.
	Set_else_if_exp(IElse_if_expContext)

	// GetLista returns the lista rule context list.
	GetLista() []IElse_if_expContext

	// SetLista sets the lista rule context list.
	SetLista([]IElse_if_expContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsBloque_else_if_expContext differentiates from other interfaces.
	IsBloque_else_if_expContext()
}

type Bloque_else_if_expContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	list         *arraylist.List
	_else_if_exp IElse_if_expContext
	lista        []IElse_if_expContext
}

func NewEmptyBloque_else_if_expContext() *Bloque_else_if_expContext {
	var p = new(Bloque_else_if_expContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_bloque_else_if_exp
	return p
}

func (*Bloque_else_if_expContext) IsBloque_else_if_expContext() {}

func NewBloque_else_if_expContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bloque_else_if_expContext {
	var p = new(Bloque_else_if_expContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_bloque_else_if_exp

	return p
}

func (s *Bloque_else_if_expContext) GetParser() antlr.Parser { return s.parser }

func (s *Bloque_else_if_expContext) Get_else_if_exp() IElse_if_expContext { return s._else_if_exp }

func (s *Bloque_else_if_expContext) Set_else_if_exp(v IElse_if_expContext) { s._else_if_exp = v }

func (s *Bloque_else_if_expContext) GetLista() []IElse_if_expContext { return s.lista }

func (s *Bloque_else_if_expContext) SetLista(v []IElse_if_expContext) { s.lista = v }

func (s *Bloque_else_if_expContext) GetList() *arraylist.List { return s.list }

func (s *Bloque_else_if_expContext) SetList(v *arraylist.List) { s.list = v }

func (s *Bloque_else_if_expContext) AllElse_if_exp() []IElse_if_expContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IElse_if_expContext)(nil)).Elem())
	var tst = make([]IElse_if_expContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IElse_if_expContext)
		}
	}

	return tst
}

func (s *Bloque_else_if_expContext) Else_if_exp(i int) IElse_if_expContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElse_if_expContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IElse_if_expContext)
}

func (s *Bloque_else_if_expContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bloque_else_if_expContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Bloque_else_if_exp() (localctx IBloque_else_if_expContext) {
	localctx = NewBloque_else_if_expContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, NparserRULE_bloque_else_if_exp)
	localctx.(*Bloque_else_if_expContext).list = arraylist.New()

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(700)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(699)

				var _x = p.Else_if_exp()

				localctx.(*Bloque_else_if_expContext)._else_if_exp = _x
			}
			localctx.(*Bloque_else_if_expContext).lista = append(localctx.(*Bloque_else_if_expContext).lista, localctx.(*Bloque_else_if_expContext)._else_if_exp)

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(702)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 17, p.GetParserRuleContext())
	}

	listas := localctx.(*Bloque_else_if_expContext).GetLista()
	for _, e := range listas {
		localctx.(*Bloque_else_if_expContext).list.Add(e.GetEx())
	}

	return localctx
}

// IElse_if_expContext is an interface to support dynamic dispatch.
type IElse_if_expContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ELSE returns the _ELSE token.
	Get_ELSE() antlr.Token

	// Set_ELSE sets the _ELSE token.
	Set_ELSE(antlr.Token)

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// Get_bloque returns the _bloque rule contexts.
	Get_bloque() IBloqueContext

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// Set_bloque sets the _bloque rule contexts.
	Set_bloque(IBloqueContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsElse_if_expContext differentiates from other interfaces.
	IsElse_if_expContext()
}

type Else_if_expContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	ex         Ast.Instruccion
	_ELSE      antlr.Token
	_expresion IExpresionContext
	_bloque    IBloqueContext
}

func NewEmptyElse_if_expContext() *Else_if_expContext {
	var p = new(Else_if_expContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_else_if_exp
	return p
}

func (*Else_if_expContext) IsElse_if_expContext() {}

func NewElse_if_expContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Else_if_expContext {
	var p = new(Else_if_expContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_else_if_exp

	return p
}

func (s *Else_if_expContext) GetParser() antlr.Parser { return s.parser }

func (s *Else_if_expContext) Get_ELSE() antlr.Token { return s._ELSE }

func (s *Else_if_expContext) Set_ELSE(v antlr.Token) { s._ELSE = v }

func (s *Else_if_expContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *Else_if_expContext) Get_bloque() IBloqueContext { return s._bloque }

func (s *Else_if_expContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *Else_if_expContext) Set_bloque(v IBloqueContext) { s._bloque = v }

func (s *Else_if_expContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Else_if_expContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Else_if_expContext) ELSE() antlr.TerminalNode {
	return s.GetToken(NparserELSE, 0)
}

func (s *Else_if_expContext) IF() antlr.TerminalNode {
	return s.GetToken(NparserIF, 0)
}

func (s *Else_if_expContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Else_if_expContext) Bloque() IBloqueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloqueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloqueContext)
}

func (s *Else_if_expContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Else_if_expContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Else_if_exp() (localctx IElse_if_expContext) {
	localctx = NewElse_if_expContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, NparserRULE_else_if_exp)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(706)

		var _m = p.Match(NparserELSE)

		localctx.(*Else_if_expContext)._ELSE = _m
	}
	{
		p.SetState(707)
		p.Match(NparserIF)
	}
	{
		p.SetState(708)

		var _x = p.expresion(0)

		localctx.(*Else_if_expContext)._expresion = _x
	}
	{
		p.SetState(709)

		var _x = p.Bloque()

		localctx.(*Else_if_expContext)._bloque = _x
	}

	fila := (func() int {
		if localctx.(*Else_if_expContext).Get_ELSE() == nil {
			return 0
		} else {
			return localctx.(*Else_if_expContext).Get_ELSE().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*Else_if_expContext).Get_ELSE() == nil {
			return 0
		} else {
			return localctx.(*Else_if_expContext).Get_ELSE().GetColumn()
		}
	}())
	columna++
	lista_null := arraylist.New()
	localctx.(*Else_if_expContext).ex = exp_ins.NewIF(localctx.(*Else_if_expContext).Get_expresion().GetEx(), localctx.(*Else_if_expContext).Get_bloque().GetList(), lista_null, Ast.ELSEIF_EXPRESION, fila, columna, true)

	return localctx
}

// IControl_expresionContext is an interface to support dynamic dispatch.
type IControl_expresionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_control_if_exp returns the _control_if_exp rule contexts.
	Get_control_if_exp() IControl_if_expContext

	// Get_control_match_exp returns the _control_match_exp rule contexts.
	Get_control_match_exp() IControl_match_expContext

	// Get_control_loop_exp returns the _control_loop_exp rule contexts.
	Get_control_loop_exp() IControl_loop_expContext

	// Set_control_if_exp sets the _control_if_exp rule contexts.
	Set_control_if_exp(IControl_if_expContext)

	// Set_control_match_exp sets the _control_match_exp rule contexts.
	Set_control_match_exp(IControl_match_expContext)

	// Set_control_loop_exp sets the _control_loop_exp rule contexts.
	Set_control_loop_exp(IControl_loop_expContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsControl_expresionContext differentiates from other interfaces.
	IsControl_expresionContext()
}

type Control_expresionContext struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	ex                 Ast.Instruccion
	_control_if_exp    IControl_if_expContext
	_control_match_exp IControl_match_expContext
	_control_loop_exp  IControl_loop_expContext
}

func NewEmptyControl_expresionContext() *Control_expresionContext {
	var p = new(Control_expresionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_control_expresion
	return p
}

func (*Control_expresionContext) IsControl_expresionContext() {}

func NewControl_expresionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Control_expresionContext {
	var p = new(Control_expresionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_control_expresion

	return p
}

func (s *Control_expresionContext) GetParser() antlr.Parser { return s.parser }

func (s *Control_expresionContext) Get_control_if_exp() IControl_if_expContext {
	return s._control_if_exp
}

func (s *Control_expresionContext) Get_control_match_exp() IControl_match_expContext {
	return s._control_match_exp
}

func (s *Control_expresionContext) Get_control_loop_exp() IControl_loop_expContext {
	return s._control_loop_exp
}

func (s *Control_expresionContext) Set_control_if_exp(v IControl_if_expContext) {
	s._control_if_exp = v
}

func (s *Control_expresionContext) Set_control_match_exp(v IControl_match_expContext) {
	s._control_match_exp = v
}

func (s *Control_expresionContext) Set_control_loop_exp(v IControl_loop_expContext) {
	s._control_loop_exp = v
}

func (s *Control_expresionContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Control_expresionContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Control_expresionContext) Control_if_exp() IControl_if_expContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_if_expContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_if_expContext)
}

func (s *Control_expresionContext) Control_match_exp() IControl_match_expContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_match_expContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_match_expContext)
}

func (s *Control_expresionContext) Control_loop_exp() IControl_loop_expContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_loop_expContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_loop_expContext)
}

func (s *Control_expresionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Control_expresionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Control_expresion() (localctx IControl_expresionContext) {
	localctx = NewControl_expresionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, NparserRULE_control_expresion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(721)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case NparserIF:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(712)

			var _x = p.Control_if_exp()

			localctx.(*Control_expresionContext)._control_if_exp = _x
		}
		localctx.(*Control_expresionContext).ex = localctx.(*Control_expresionContext).Get_control_if_exp().GetEx()

	case NparserMATCH:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(715)

			var _x = p.Control_match_exp()

			localctx.(*Control_expresionContext)._control_match_exp = _x
		}
		localctx.(*Control_expresionContext).ex = localctx.(*Control_expresionContext).Get_control_match_exp().GetEx()

	case NparserLOOP:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(718)

			var _x = p.Control_loop_exp()

			localctx.(*Control_expresionContext)._control_loop_exp = _x
		}
		localctx.(*Control_expresionContext).ex = localctx.(*Control_expresionContext).Get_control_loop_exp().GetEx()

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IControl_matchContext is an interface to support dynamic dispatch.
type IControl_matchContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_MATCH returns the _MATCH token.
	Get_MATCH() antlr.Token

	// Set_MATCH sets the _MATCH token.
	Set_MATCH(antlr.Token)

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// Get_control_case returns the _control_case rule contexts.
	Get_control_case() IControl_caseContext

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// Set_control_case sets the _control_case rule contexts.
	Set_control_case(IControl_caseContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsControl_matchContext differentiates from other interfaces.
	IsControl_matchContext()
}

type Control_matchContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	ex            Ast.Instruccion
	_MATCH        antlr.Token
	_expresion    IExpresionContext
	_control_case IControl_caseContext
}

func NewEmptyControl_matchContext() *Control_matchContext {
	var p = new(Control_matchContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_control_match
	return p
}

func (*Control_matchContext) IsControl_matchContext() {}

func NewControl_matchContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Control_matchContext {
	var p = new(Control_matchContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_control_match

	return p
}

func (s *Control_matchContext) GetParser() antlr.Parser { return s.parser }

func (s *Control_matchContext) Get_MATCH() antlr.Token { return s._MATCH }

func (s *Control_matchContext) Set_MATCH(v antlr.Token) { s._MATCH = v }

func (s *Control_matchContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *Control_matchContext) Get_control_case() IControl_caseContext { return s._control_case }

func (s *Control_matchContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *Control_matchContext) Set_control_case(v IControl_caseContext) { s._control_case = v }

func (s *Control_matchContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Control_matchContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Control_matchContext) MATCH() antlr.TerminalNode {
	return s.GetToken(NparserMATCH, 0)
}

func (s *Control_matchContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Control_matchContext) LLAVE_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserLLAVE_IZQ, 0)
}

func (s *Control_matchContext) Control_case() IControl_caseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_caseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_caseContext)
}

func (s *Control_matchContext) LLAVE_DER() antlr.TerminalNode {
	return s.GetToken(NparserLLAVE_DER, 0)
}

func (s *Control_matchContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Control_matchContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Control_match() (localctx IControl_matchContext) {
	localctx = NewControl_matchContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, NparserRULE_control_match)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(723)

		var _m = p.Match(NparserMATCH)

		localctx.(*Control_matchContext)._MATCH = _m
	}
	{
		p.SetState(724)

		var _x = p.expresion(0)

		localctx.(*Control_matchContext)._expresion = _x
	}
	{
		p.SetState(725)
		p.Match(NparserLLAVE_IZQ)
	}
	{
		p.SetState(726)

		var _x = p.Control_case()

		localctx.(*Control_matchContext)._control_case = _x
	}
	{
		p.SetState(727)
		p.Match(NparserLLAVE_DER)
	}

	fila := (func() int {
		if localctx.(*Control_matchContext).Get_MATCH() == nil {
			return 0
		} else {
			return localctx.(*Control_matchContext).Get_MATCH().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*Control_matchContext).Get_MATCH() == nil {
			return 0
		} else {
			return localctx.(*Control_matchContext).Get_MATCH().GetLine()
		}
	}()) - 1
	localctx.(*Control_matchContext).ex = exp_ins.NewMatch(localctx.(*Control_matchContext).Get_expresion().GetEx(), localctx.(*Control_matchContext).Get_control_case().GetList(), Ast.MATCH, fila, columna)

	return localctx
}

// IControl_caseContext is an interface to support dynamic dispatch.
type IControl_caseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_cases returns the _cases rule contexts.
	Get_cases() ICasesContext

	// Set_cases sets the _cases rule contexts.
	Set_cases(ICasesContext)

	// GetLista returns the lista rule context list.
	GetLista() []ICasesContext

	// SetLista sets the lista rule context list.
	SetLista([]ICasesContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsControl_caseContext differentiates from other interfaces.
	IsControl_caseContext()
}

type Control_caseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	list   *arraylist.List
	_cases ICasesContext
	lista  []ICasesContext
}

func NewEmptyControl_caseContext() *Control_caseContext {
	var p = new(Control_caseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_control_case
	return p
}

func (*Control_caseContext) IsControl_caseContext() {}

func NewControl_caseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Control_caseContext {
	var p = new(Control_caseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_control_case

	return p
}

func (s *Control_caseContext) GetParser() antlr.Parser { return s.parser }

func (s *Control_caseContext) Get_cases() ICasesContext { return s._cases }

func (s *Control_caseContext) Set_cases(v ICasesContext) { s._cases = v }

func (s *Control_caseContext) GetLista() []ICasesContext { return s.lista }

func (s *Control_caseContext) SetLista(v []ICasesContext) { s.lista = v }

func (s *Control_caseContext) GetList() *arraylist.List { return s.list }

func (s *Control_caseContext) SetList(v *arraylist.List) { s.list = v }

func (s *Control_caseContext) AllCases() []ICasesContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICasesContext)(nil)).Elem())
	var tst = make([]ICasesContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICasesContext)
		}
	}

	return tst
}

func (s *Control_caseContext) Cases(i int) ICasesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICasesContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICasesContext)
}

func (s *Control_caseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Control_caseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Control_case() (localctx IControl_caseContext) {
	localctx = NewControl_caseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, NparserRULE_control_case)
	localctx.(*Control_caseContext).list = arraylist.New()
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(731)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<NparserF64)|(1<<NparserI64)|(1<<NparserVEC)|(1<<NparserVEC_M)|(1<<NparserTRUE)|(1<<NparserFALSE))) != 0) || (((_la-46)&-(0x1f+1)) == 0 && ((1<<uint((_la-46)))&((1<<(NparserNUMERO-46))|(1<<(NparserDECIMAL-46))|(1<<(NparserID_CAMEL-46))|(1<<(NparserID-46))|(1<<(NparserDEFAULT-46))|(1<<(NparserRESTA-46))|(1<<(NparserNOT-46)))) != 0) || (((_la-78)&-(0x1f+1)) == 0 && ((1<<uint((_la-78)))&((1<<(NparserPAR_IZQ-78))|(1<<(NparserCORCHETE_IZQ-78))|(1<<(NparserCADENA-78))|(1<<(NparserCARACTER-78)))) != 0) {
		{
			p.SetState(730)

			var _x = p.Cases()

			localctx.(*Control_caseContext)._cases = _x
		}
		localctx.(*Control_caseContext).lista = append(localctx.(*Control_caseContext).lista, localctx.(*Control_caseContext)._cases)

		p.SetState(733)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	listas := localctx.(*Control_caseContext).GetLista()
	for _, e := range listas {
		localctx.(*Control_caseContext).list.Add(e.GetEx())
	}

	return localctx
}

// ICasesContext is an interface to support dynamic dispatch.
type ICasesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_CASE returns the _CASE token.
	Get_CASE() antlr.Token

	// Set_CASE sets the _CASE token.
	Set_CASE(antlr.Token)

	// Get_case_match returns the _case_match rule contexts.
	Get_case_match() ICase_matchContext

	// Get_bloque returns the _bloque rule contexts.
	Get_bloque() IBloqueContext

	// Set_case_match sets the _case_match rule contexts.
	Set_case_match(ICase_matchContext)

	// Set_bloque sets the _bloque rule contexts.
	Set_bloque(IBloqueContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsCasesContext differentiates from other interfaces.
	IsCasesContext()
}

type CasesContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	ex          Ast.Instruccion
	_case_match ICase_matchContext
	_CASE       antlr.Token
	_bloque     IBloqueContext
}

func NewEmptyCasesContext() *CasesContext {
	var p = new(CasesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_cases
	return p
}

func (*CasesContext) IsCasesContext() {}

func NewCasesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CasesContext {
	var p = new(CasesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_cases

	return p
}

func (s *CasesContext) GetParser() antlr.Parser { return s.parser }

func (s *CasesContext) Get_CASE() antlr.Token { return s._CASE }

func (s *CasesContext) Set_CASE(v antlr.Token) { s._CASE = v }

func (s *CasesContext) Get_case_match() ICase_matchContext { return s._case_match }

func (s *CasesContext) Get_bloque() IBloqueContext { return s._bloque }

func (s *CasesContext) Set_case_match(v ICase_matchContext) { s._case_match = v }

func (s *CasesContext) Set_bloque(v IBloqueContext) { s._bloque = v }

func (s *CasesContext) GetEx() Ast.Instruccion { return s.ex }

func (s *CasesContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *CasesContext) Case_match() ICase_matchContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICase_matchContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICase_matchContext)
}

func (s *CasesContext) CASE() antlr.TerminalNode {
	return s.GetToken(NparserCASE, 0)
}

func (s *CasesContext) Bloque() IBloqueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloqueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloqueContext)
}

func (s *CasesContext) COMA() antlr.TerminalNode {
	return s.GetToken(NparserCOMA, 0)
}

func (s *CasesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CasesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Cases() (localctx ICasesContext) {
	localctx = NewCasesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, NparserRULE_cases)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(737)

		var _x = p.case_match(0)

		localctx.(*CasesContext)._case_match = _x
	}
	{
		p.SetState(738)

		var _m = p.Match(NparserCASE)

		localctx.(*CasesContext)._CASE = _m
	}
	{
		p.SetState(739)

		var _x = p.Bloque()

		localctx.(*CasesContext)._bloque = _x
	}
	{
		p.SetState(740)
		p.Match(NparserCOMA)
	}

	fila := (func() int {
		if localctx.(*CasesContext).Get_CASE() == nil {
			return 0
		} else {
			return localctx.(*CasesContext).Get_CASE().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*CasesContext).Get_CASE() == nil {
			return 0
		} else {
			return localctx.(*CasesContext).Get_CASE().GetLine()
		}
	}()) - 1
	//Verificar si lo que vienen es un default
	listaTemp := localctx.(*CasesContext).Get_case_match().GetList()
	_, tipo := listaTemp.GetValue(0).(Ast.Abstracto).GetTipo()
	if tipo == Ast.DEFAULT {
		localctx.(*CasesContext).ex = exp_ins.NewCase(localctx.(*CasesContext).Get_case_match().GetList(), localctx.(*CasesContext).Get_bloque().GetList(), Ast.CASE, fila, columna, true)
	} else {
		localctx.(*CasesContext).ex = exp_ins.NewCase(localctx.(*CasesContext).Get_case_match().GetList(), localctx.(*CasesContext).Get_bloque().GetList(), Ast.CASE, fila, columna, false)
	}

	return localctx
}

// ICase_matchContext is an interface to support dynamic dispatch.
type ICase_matchContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_DEFAULT returns the _DEFAULT token.
	Get_DEFAULT() antlr.Token

	// Set_DEFAULT sets the _DEFAULT token.
	Set_DEFAULT(antlr.Token)

	// GetLista_cases returns the lista_cases rule contexts.
	GetLista_cases() ICase_matchContext

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// SetLista_cases sets the lista_cases rule contexts.
	SetLista_cases(ICase_matchContext)

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsCase_matchContext differentiates from other interfaces.
	IsCase_matchContext()
}

type Case_matchContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	list        *arraylist.List
	lista_cases ICase_matchContext
	_expresion  IExpresionContext
	_DEFAULT    antlr.Token
}

func NewEmptyCase_matchContext() *Case_matchContext {
	var p = new(Case_matchContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_case_match
	return p
}

func (*Case_matchContext) IsCase_matchContext() {}

func NewCase_matchContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Case_matchContext {
	var p = new(Case_matchContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_case_match

	return p
}

func (s *Case_matchContext) GetParser() antlr.Parser { return s.parser }

func (s *Case_matchContext) Get_DEFAULT() antlr.Token { return s._DEFAULT }

func (s *Case_matchContext) Set_DEFAULT(v antlr.Token) { s._DEFAULT = v }

func (s *Case_matchContext) GetLista_cases() ICase_matchContext { return s.lista_cases }

func (s *Case_matchContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *Case_matchContext) SetLista_cases(v ICase_matchContext) { s.lista_cases = v }

func (s *Case_matchContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *Case_matchContext) GetList() *arraylist.List { return s.list }

func (s *Case_matchContext) SetList(v *arraylist.List) { s.list = v }

func (s *Case_matchContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Case_matchContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(NparserDEFAULT, 0)
}

func (s *Case_matchContext) O() antlr.TerminalNode {
	return s.GetToken(NparserO, 0)
}

func (s *Case_matchContext) Case_match() ICase_matchContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICase_matchContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICase_matchContext)
}

func (s *Case_matchContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Case_matchContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Case_match() (localctx ICase_matchContext) {
	return p.case_match(0)
}

func (p *Nparser) case_match(_p int) (localctx ICase_matchContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewCase_matchContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ICase_matchContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 52
	p.EnterRecursionRule(localctx, 52, NparserRULE_case_match, _p)
	localctx.(*Case_matchContext).list = arraylist.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(749)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case NparserF64, NparserI64, NparserVEC, NparserVEC_M, NparserTRUE, NparserFALSE, NparserNUMERO, NparserDECIMAL, NparserID_CAMEL, NparserID, NparserRESTA, NparserNOT, NparserPAR_IZQ, NparserCORCHETE_IZQ, NparserCADENA, NparserCARACTER:
		{
			p.SetState(744)

			var _x = p.expresion(0)

			localctx.(*Case_matchContext)._expresion = _x
		}

		localctx.(*Case_matchContext).list.Add(localctx.(*Case_matchContext).Get_expresion().GetEx())

	case NparserDEFAULT:
		{
			p.SetState(747)

			var _m = p.Match(NparserDEFAULT)

			localctx.(*Case_matchContext)._DEFAULT = _m
		}

		fila := (func() int {
			if localctx.(*Case_matchContext).Get_DEFAULT() == nil {
				return 0
			} else {
				return localctx.(*Case_matchContext).Get_DEFAULT().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Case_matchContext).Get_DEFAULT() == nil {
				return 0
			} else {
				return localctx.(*Case_matchContext).Get_DEFAULT().GetColumn()
			}
		}())
		expresion := expresiones.NewPrimitivo(false, Ast.DEFAULT, fila, columna)
		localctx.(*Case_matchContext).list.Add(expresion)

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(758)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 21, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewCase_matchContext(p, _parentctx, _parentState)
			localctx.(*Case_matchContext).lista_cases = _prevctx
			p.PushNewRecursionContext(localctx, _startState, NparserRULE_case_match)
			p.SetState(751)

			if !(p.Precpred(p.GetParserRuleContext(), 3)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
			}
			{
				p.SetState(752)
				p.Match(NparserO)
			}
			{
				p.SetState(753)

				var _x = p.expresion(0)

				localctx.(*Case_matchContext)._expresion = _x
			}

			localctx.(*Case_matchContext).GetLista_cases().GetList().Add(localctx.(*Case_matchContext).Get_expresion().GetEx())
			localctx.(*Case_matchContext).list = localctx.(*Case_matchContext).GetLista_cases().GetList()

		}
		p.SetState(760)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 21, p.GetParserRuleContext())
	}

	return localctx
}

// IControl_match_expContext is an interface to support dynamic dispatch.
type IControl_match_expContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_MATCH returns the _MATCH token.
	Get_MATCH() antlr.Token

	// Set_MATCH sets the _MATCH token.
	Set_MATCH(antlr.Token)

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// Get_control_case_exp returns the _control_case_exp rule contexts.
	Get_control_case_exp() IControl_case_expContext

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// Set_control_case_exp sets the _control_case_exp rule contexts.
	Set_control_case_exp(IControl_case_expContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsControl_match_expContext differentiates from other interfaces.
	IsControl_match_expContext()
}

type Control_match_expContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	ex                Ast.Instruccion
	_MATCH            antlr.Token
	_expresion        IExpresionContext
	_control_case_exp IControl_case_expContext
}

func NewEmptyControl_match_expContext() *Control_match_expContext {
	var p = new(Control_match_expContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_control_match_exp
	return p
}

func (*Control_match_expContext) IsControl_match_expContext() {}

func NewControl_match_expContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Control_match_expContext {
	var p = new(Control_match_expContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_control_match_exp

	return p
}

func (s *Control_match_expContext) GetParser() antlr.Parser { return s.parser }

func (s *Control_match_expContext) Get_MATCH() antlr.Token { return s._MATCH }

func (s *Control_match_expContext) Set_MATCH(v antlr.Token) { s._MATCH = v }

func (s *Control_match_expContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *Control_match_expContext) Get_control_case_exp() IControl_case_expContext {
	return s._control_case_exp
}

func (s *Control_match_expContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *Control_match_expContext) Set_control_case_exp(v IControl_case_expContext) {
	s._control_case_exp = v
}

func (s *Control_match_expContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Control_match_expContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Control_match_expContext) MATCH() antlr.TerminalNode {
	return s.GetToken(NparserMATCH, 0)
}

func (s *Control_match_expContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Control_match_expContext) LLAVE_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserLLAVE_IZQ, 0)
}

func (s *Control_match_expContext) Control_case_exp() IControl_case_expContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_case_expContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_case_expContext)
}

func (s *Control_match_expContext) LLAVE_DER() antlr.TerminalNode {
	return s.GetToken(NparserLLAVE_DER, 0)
}

func (s *Control_match_expContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Control_match_expContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Control_match_exp() (localctx IControl_match_expContext) {
	localctx = NewControl_match_expContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, NparserRULE_control_match_exp)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(761)

		var _m = p.Match(NparserMATCH)

		localctx.(*Control_match_expContext)._MATCH = _m
	}
	{
		p.SetState(762)

		var _x = p.expresion(0)

		localctx.(*Control_match_expContext)._expresion = _x
	}
	{
		p.SetState(763)
		p.Match(NparserLLAVE_IZQ)
	}
	{
		p.SetState(764)

		var _x = p.Control_case_exp()

		localctx.(*Control_match_expContext)._control_case_exp = _x
	}
	{
		p.SetState(765)
		p.Match(NparserLLAVE_DER)
	}

	fila := (func() int {
		if localctx.(*Control_match_expContext).Get_MATCH() == nil {
			return 0
		} else {
			return localctx.(*Control_match_expContext).Get_MATCH().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*Control_match_expContext).Get_MATCH() == nil {
			return 0
		} else {
			return localctx.(*Control_match_expContext).Get_MATCH().GetLine()
		}
	}()) - 1
	localctx.(*Control_match_expContext).ex = exp_ins.NewMatch(localctx.(*Control_match_expContext).Get_expresion().GetEx(), localctx.(*Control_match_expContext).Get_control_case_exp().GetList(), Ast.MATCH_EXPRESION, fila, columna)

	return localctx
}

// IControl_case_expContext is an interface to support dynamic dispatch.
type IControl_case_expContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_cases_exp returns the _cases_exp rule contexts.
	Get_cases_exp() ICases_expContext

	// Set_cases_exp sets the _cases_exp rule contexts.
	Set_cases_exp(ICases_expContext)

	// GetLista returns the lista rule context list.
	GetLista() []ICases_expContext

	// SetLista sets the lista rule context list.
	SetLista([]ICases_expContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsControl_case_expContext differentiates from other interfaces.
	IsControl_case_expContext()
}

type Control_case_expContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	list       *arraylist.List
	_cases_exp ICases_expContext
	lista      []ICases_expContext
}

func NewEmptyControl_case_expContext() *Control_case_expContext {
	var p = new(Control_case_expContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_control_case_exp
	return p
}

func (*Control_case_expContext) IsControl_case_expContext() {}

func NewControl_case_expContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Control_case_expContext {
	var p = new(Control_case_expContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_control_case_exp

	return p
}

func (s *Control_case_expContext) GetParser() antlr.Parser { return s.parser }

func (s *Control_case_expContext) Get_cases_exp() ICases_expContext { return s._cases_exp }

func (s *Control_case_expContext) Set_cases_exp(v ICases_expContext) { s._cases_exp = v }

func (s *Control_case_expContext) GetLista() []ICases_expContext { return s.lista }

func (s *Control_case_expContext) SetLista(v []ICases_expContext) { s.lista = v }

func (s *Control_case_expContext) GetList() *arraylist.List { return s.list }

func (s *Control_case_expContext) SetList(v *arraylist.List) { s.list = v }

func (s *Control_case_expContext) AllCases_exp() []ICases_expContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICases_expContext)(nil)).Elem())
	var tst = make([]ICases_expContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICases_expContext)
		}
	}

	return tst
}

func (s *Control_case_expContext) Cases_exp(i int) ICases_expContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICases_expContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICases_expContext)
}

func (s *Control_case_expContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Control_case_expContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Control_case_exp() (localctx IControl_case_expContext) {
	localctx = NewControl_case_expContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, NparserRULE_control_case_exp)
	localctx.(*Control_case_expContext).list = arraylist.New()
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(769)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<NparserF64)|(1<<NparserI64)|(1<<NparserVEC)|(1<<NparserVEC_M)|(1<<NparserTRUE)|(1<<NparserFALSE))) != 0) || (((_la-46)&-(0x1f+1)) == 0 && ((1<<uint((_la-46)))&((1<<(NparserNUMERO-46))|(1<<(NparserDECIMAL-46))|(1<<(NparserID_CAMEL-46))|(1<<(NparserID-46))|(1<<(NparserDEFAULT-46))|(1<<(NparserRESTA-46))|(1<<(NparserNOT-46)))) != 0) || (((_la-78)&-(0x1f+1)) == 0 && ((1<<uint((_la-78)))&((1<<(NparserPAR_IZQ-78))|(1<<(NparserCORCHETE_IZQ-78))|(1<<(NparserCADENA-78))|(1<<(NparserCARACTER-78)))) != 0) {
		{
			p.SetState(768)

			var _x = p.Cases_exp()

			localctx.(*Control_case_expContext)._cases_exp = _x
		}
		localctx.(*Control_case_expContext).lista = append(localctx.(*Control_case_expContext).lista, localctx.(*Control_case_expContext)._cases_exp)

		p.SetState(771)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	listas := localctx.(*Control_case_expContext).GetLista()
	for _, e := range listas {
		localctx.(*Control_case_expContext).list.Add(e.GetEx())
	}

	return localctx
}

// ICases_expContext is an interface to support dynamic dispatch.
type ICases_expContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_CASE returns the _CASE token.
	Get_CASE() antlr.Token

	// Set_CASE sets the _CASE token.
	Set_CASE(antlr.Token)

	// Get_case_match_exp returns the _case_match_exp rule contexts.
	Get_case_match_exp() ICase_match_expContext

	// Get_bloque returns the _bloque rule contexts.
	Get_bloque() IBloqueContext

	// Set_case_match_exp sets the _case_match_exp rule contexts.
	Set_case_match_exp(ICase_match_expContext)

	// Set_bloque sets the _bloque rule contexts.
	Set_bloque(IBloqueContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsCases_expContext differentiates from other interfaces.
	IsCases_expContext()
}

type Cases_expContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	ex              Ast.Instruccion
	_case_match_exp ICase_match_expContext
	_CASE           antlr.Token
	_bloque         IBloqueContext
}

func NewEmptyCases_expContext() *Cases_expContext {
	var p = new(Cases_expContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_cases_exp
	return p
}

func (*Cases_expContext) IsCases_expContext() {}

func NewCases_expContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cases_expContext {
	var p = new(Cases_expContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_cases_exp

	return p
}

func (s *Cases_expContext) GetParser() antlr.Parser { return s.parser }

func (s *Cases_expContext) Get_CASE() antlr.Token { return s._CASE }

func (s *Cases_expContext) Set_CASE(v antlr.Token) { s._CASE = v }

func (s *Cases_expContext) Get_case_match_exp() ICase_match_expContext { return s._case_match_exp }

func (s *Cases_expContext) Get_bloque() IBloqueContext { return s._bloque }

func (s *Cases_expContext) Set_case_match_exp(v ICase_match_expContext) { s._case_match_exp = v }

func (s *Cases_expContext) Set_bloque(v IBloqueContext) { s._bloque = v }

func (s *Cases_expContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Cases_expContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Cases_expContext) Case_match_exp() ICase_match_expContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICase_match_expContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICase_match_expContext)
}

func (s *Cases_expContext) CASE() antlr.TerminalNode {
	return s.GetToken(NparserCASE, 0)
}

func (s *Cases_expContext) Bloque() IBloqueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloqueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloqueContext)
}

func (s *Cases_expContext) COMA() antlr.TerminalNode {
	return s.GetToken(NparserCOMA, 0)
}

func (s *Cases_expContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cases_expContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Cases_exp() (localctx ICases_expContext) {
	localctx = NewCases_expContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, NparserRULE_cases_exp)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(775)

		var _x = p.case_match_exp(0)

		localctx.(*Cases_expContext)._case_match_exp = _x
	}
	{
		p.SetState(776)

		var _m = p.Match(NparserCASE)

		localctx.(*Cases_expContext)._CASE = _m
	}
	{
		p.SetState(777)

		var _x = p.Bloque()

		localctx.(*Cases_expContext)._bloque = _x
	}
	{
		p.SetState(778)
		p.Match(NparserCOMA)
	}

	fila := (func() int {
		if localctx.(*Cases_expContext).Get_CASE() == nil {
			return 0
		} else {
			return localctx.(*Cases_expContext).Get_CASE().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*Cases_expContext).Get_CASE() == nil {
			return 0
		} else {
			return localctx.(*Cases_expContext).Get_CASE().GetLine()
		}
	}()) - 1
	//Verificar si lo que vienen es un default
	listaTemp := localctx.(*Cases_expContext).Get_case_match_exp().GetList()
	_, tipo := listaTemp.GetValue(0).(Ast.Abstracto).GetTipo()
	if tipo == Ast.DEFAULT {
		localctx.(*Cases_expContext).ex = exp_ins.NewCase(localctx.(*Cases_expContext).Get_case_match_exp().GetList(), localctx.(*Cases_expContext).Get_bloque().GetList(), Ast.CASE_EXPRESION, fila, columna, true)
	} else {
		localctx.(*Cases_expContext).ex = exp_ins.NewCase(localctx.(*Cases_expContext).Get_case_match_exp().GetList(), localctx.(*Cases_expContext).Get_bloque().GetList(), Ast.CASE_EXPRESION, fila, columna, false)
	}

	return localctx
}

// ICase_match_expContext is an interface to support dynamic dispatch.
type ICase_match_expContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_DEFAULT returns the _DEFAULT token.
	Get_DEFAULT() antlr.Token

	// Set_DEFAULT sets the _DEFAULT token.
	Set_DEFAULT(antlr.Token)

	// GetLista_cases returns the lista_cases rule contexts.
	GetLista_cases() ICase_match_expContext

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// SetLista_cases sets the lista_cases rule contexts.
	SetLista_cases(ICase_match_expContext)

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsCase_match_expContext differentiates from other interfaces.
	IsCase_match_expContext()
}

type Case_match_expContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	list        *arraylist.List
	lista_cases ICase_match_expContext
	_expresion  IExpresionContext
	_DEFAULT    antlr.Token
}

func NewEmptyCase_match_expContext() *Case_match_expContext {
	var p = new(Case_match_expContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_case_match_exp
	return p
}

func (*Case_match_expContext) IsCase_match_expContext() {}

func NewCase_match_expContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Case_match_expContext {
	var p = new(Case_match_expContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_case_match_exp

	return p
}

func (s *Case_match_expContext) GetParser() antlr.Parser { return s.parser }

func (s *Case_match_expContext) Get_DEFAULT() antlr.Token { return s._DEFAULT }

func (s *Case_match_expContext) Set_DEFAULT(v antlr.Token) { s._DEFAULT = v }

func (s *Case_match_expContext) GetLista_cases() ICase_match_expContext { return s.lista_cases }

func (s *Case_match_expContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *Case_match_expContext) SetLista_cases(v ICase_match_expContext) { s.lista_cases = v }

func (s *Case_match_expContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *Case_match_expContext) GetList() *arraylist.List { return s.list }

func (s *Case_match_expContext) SetList(v *arraylist.List) { s.list = v }

func (s *Case_match_expContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Case_match_expContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(NparserDEFAULT, 0)
}

func (s *Case_match_expContext) O() antlr.TerminalNode {
	return s.GetToken(NparserO, 0)
}

func (s *Case_match_expContext) Case_match_exp() ICase_match_expContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICase_match_expContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICase_match_expContext)
}

func (s *Case_match_expContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Case_match_expContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Case_match_exp() (localctx ICase_match_expContext) {
	return p.case_match_exp(0)
}

func (p *Nparser) case_match_exp(_p int) (localctx ICase_match_expContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewCase_match_expContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ICase_match_expContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 60
	p.EnterRecursionRule(localctx, 60, NparserRULE_case_match_exp, _p)
	localctx.(*Case_match_expContext).list = arraylist.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(787)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case NparserF64, NparserI64, NparserVEC, NparserVEC_M, NparserTRUE, NparserFALSE, NparserNUMERO, NparserDECIMAL, NparserID_CAMEL, NparserID, NparserRESTA, NparserNOT, NparserPAR_IZQ, NparserCORCHETE_IZQ, NparserCADENA, NparserCARACTER:
		{
			p.SetState(782)

			var _x = p.expresion(0)

			localctx.(*Case_match_expContext)._expresion = _x
		}

		localctx.(*Case_match_expContext).list.Add(localctx.(*Case_match_expContext).Get_expresion().GetEx())

	case NparserDEFAULT:
		{
			p.SetState(785)

			var _m = p.Match(NparserDEFAULT)

			localctx.(*Case_match_expContext)._DEFAULT = _m
		}

		fila := (func() int {
			if localctx.(*Case_match_expContext).Get_DEFAULT() == nil {
				return 0
			} else {
				return localctx.(*Case_match_expContext).Get_DEFAULT().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Case_match_expContext).Get_DEFAULT() == nil {
				return 0
			} else {
				return localctx.(*Case_match_expContext).Get_DEFAULT().GetColumn()
			}
		}())
		expresion := expresiones.NewPrimitivo(false, Ast.DEFAULT, fila, columna)
		localctx.(*Case_match_expContext).list.Add(expresion)

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(796)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 24, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewCase_match_expContext(p, _parentctx, _parentState)
			localctx.(*Case_match_expContext).lista_cases = _prevctx
			p.PushNewRecursionContext(localctx, _startState, NparserRULE_case_match_exp)
			p.SetState(789)

			if !(p.Precpred(p.GetParserRuleContext(), 3)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
			}
			{
				p.SetState(790)
				p.Match(NparserO)
			}
			{
				p.SetState(791)

				var _x = p.expresion(0)

				localctx.(*Case_match_expContext)._expresion = _x
			}

			localctx.(*Case_match_expContext).GetLista_cases().GetList().Add(localctx.(*Case_match_expContext).Get_expresion().GetEx())
			localctx.(*Case_match_expContext).list = localctx.(*Case_match_expContext).GetLista_cases().GetList()

		}
		p.SetState(798)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 24, p.GetParserRuleContext())
	}

	return localctx
}

// IIreturnContext is an interface to support dynamic dispatch.
type IIreturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_RETURN returns the _RETURN token.
	Get_RETURN() antlr.Token

	// Set_RETURN sets the _RETURN token.
	Set_RETURN(antlr.Token)

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsIreturnContext differentiates from other interfaces.
	IsIreturnContext()
}

type IreturnContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	ex         Ast.Instruccion
	_RETURN    antlr.Token
	_expresion IExpresionContext
}

func NewEmptyIreturnContext() *IreturnContext {
	var p = new(IreturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_ireturn
	return p
}

func (*IreturnContext) IsIreturnContext() {}

func NewIreturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IreturnContext {
	var p = new(IreturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_ireturn

	return p
}

func (s *IreturnContext) GetParser() antlr.Parser { return s.parser }

func (s *IreturnContext) Get_RETURN() antlr.Token { return s._RETURN }

func (s *IreturnContext) Set_RETURN(v antlr.Token) { s._RETURN = v }

func (s *IreturnContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *IreturnContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *IreturnContext) GetEx() Ast.Instruccion { return s.ex }

func (s *IreturnContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *IreturnContext) RETURN() antlr.TerminalNode {
	return s.GetToken(NparserRETURN, 0)
}

func (s *IreturnContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *IreturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IreturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Ireturn() (localctx IIreturnContext) {
	localctx = NewIreturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, NparserRULE_ireturn)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(805)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 25, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(799)

			var _m = p.Match(NparserRETURN)

			localctx.(*IreturnContext)._RETURN = _m
		}

		fila := (func() int {
			if localctx.(*IreturnContext).Get_RETURN() == nil {
				return 0
			} else {
				return localctx.(*IreturnContext).Get_RETURN().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*IreturnContext).Get_RETURN() == nil {
				return 0
			} else {
				return localctx.(*IreturnContext).Get_RETURN().GetColumn()
			}
		}())
		localctx.(*IreturnContext).ex = transferencia.NewReturn(Ast.RETURN, nil, fila, columna)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(801)

			var _m = p.Match(NparserRETURN)

			localctx.(*IreturnContext)._RETURN = _m
		}
		{
			p.SetState(802)

			var _x = p.expresion(0)

			localctx.(*IreturnContext)._expresion = _x
		}

		fila := (func() int {
			if localctx.(*IreturnContext).Get_RETURN() == nil {
				return 0
			} else {
				return localctx.(*IreturnContext).Get_RETURN().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*IreturnContext).Get_RETURN() == nil {
				return 0
			} else {
				return localctx.(*IreturnContext).Get_RETURN().GetColumn()
			}
		}())
		localctx.(*IreturnContext).ex = transferencia.NewReturn(Ast.RETURN_EXPRESION, localctx.(*IreturnContext).Get_expresion().GetEx(), fila, columna)

	}

	return localctx
}

// IIbreakContext is an interface to support dynamic dispatch.
type IIbreakContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_BREAK returns the _BREAK token.
	Get_BREAK() antlr.Token

	// Set_BREAK sets the _BREAK token.
	Set_BREAK(antlr.Token)

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsIbreakContext differentiates from other interfaces.
	IsIbreakContext()
}

type IbreakContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	ex         Ast.Instruccion
	_BREAK     antlr.Token
	_expresion IExpresionContext
}

func NewEmptyIbreakContext() *IbreakContext {
	var p = new(IbreakContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_ibreak
	return p
}

func (*IbreakContext) IsIbreakContext() {}

func NewIbreakContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IbreakContext {
	var p = new(IbreakContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_ibreak

	return p
}

func (s *IbreakContext) GetParser() antlr.Parser { return s.parser }

func (s *IbreakContext) Get_BREAK() antlr.Token { return s._BREAK }

func (s *IbreakContext) Set_BREAK(v antlr.Token) { s._BREAK = v }

func (s *IbreakContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *IbreakContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *IbreakContext) GetEx() Ast.Instruccion { return s.ex }

func (s *IbreakContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *IbreakContext) BREAK() antlr.TerminalNode {
	return s.GetToken(NparserBREAK, 0)
}

func (s *IbreakContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *IbreakContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IbreakContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Ibreak() (localctx IIbreakContext) {
	localctx = NewIbreakContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, NparserRULE_ibreak)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(813)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 26, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(807)

			var _m = p.Match(NparserBREAK)

			localctx.(*IbreakContext)._BREAK = _m
		}

		fila := (func() int {
			if localctx.(*IbreakContext).Get_BREAK() == nil {
				return 0
			} else {
				return localctx.(*IbreakContext).Get_BREAK().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*IbreakContext).Get_BREAK() == nil {
				return 0
			} else {
				return localctx.(*IbreakContext).Get_BREAK().GetColumn()
			}
		}())
		localctx.(*IbreakContext).ex = transferencia.NewBreak(Ast.BREAK, nil, fila, columna)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(809)

			var _m = p.Match(NparserBREAK)

			localctx.(*IbreakContext)._BREAK = _m
		}
		{
			p.SetState(810)

			var _x = p.expresion(0)

			localctx.(*IbreakContext)._expresion = _x
		}

		fila := (func() int {
			if localctx.(*IbreakContext).Get_BREAK() == nil {
				return 0
			} else {
				return localctx.(*IbreakContext).Get_BREAK().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*IbreakContext).Get_BREAK() == nil {
				return 0
			} else {
				return localctx.(*IbreakContext).Get_BREAK().GetColumn()
			}
		}())
		localctx.(*IbreakContext).ex = transferencia.NewBreak(Ast.BREAK_EXPRESION, localctx.(*IbreakContext).Get_expresion().GetEx(), fila, columna)

	}

	return localctx
}

// IIcontinueContext is an interface to support dynamic dispatch.
type IIcontinueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_CONTINUE returns the _CONTINUE token.
	Get_CONTINUE() antlr.Token

	// Set_CONTINUE sets the _CONTINUE token.
	Set_CONTINUE(antlr.Token)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsIcontinueContext differentiates from other interfaces.
	IsIcontinueContext()
}

type IcontinueContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	ex        Ast.Instruccion
	_CONTINUE antlr.Token
}

func NewEmptyIcontinueContext() *IcontinueContext {
	var p = new(IcontinueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_icontinue
	return p
}

func (*IcontinueContext) IsIcontinueContext() {}

func NewIcontinueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IcontinueContext {
	var p = new(IcontinueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_icontinue

	return p
}

func (s *IcontinueContext) GetParser() antlr.Parser { return s.parser }

func (s *IcontinueContext) Get_CONTINUE() antlr.Token { return s._CONTINUE }

func (s *IcontinueContext) Set_CONTINUE(v antlr.Token) { s._CONTINUE = v }

func (s *IcontinueContext) GetEx() Ast.Instruccion { return s.ex }

func (s *IcontinueContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *IcontinueContext) CONTINUE() antlr.TerminalNode {
	return s.GetToken(NparserCONTINUE, 0)
}

func (s *IcontinueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IcontinueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Icontinue() (localctx IIcontinueContext) {
	localctx = NewIcontinueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, NparserRULE_icontinue)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(815)

		var _m = p.Match(NparserCONTINUE)

		localctx.(*IcontinueContext)._CONTINUE = _m
	}

	fila := (func() int {
		if localctx.(*IcontinueContext).Get_CONTINUE() == nil {
			return 0
		} else {
			return localctx.(*IcontinueContext).Get_CONTINUE().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*IcontinueContext).Get_CONTINUE() == nil {
			return 0
		} else {
			return localctx.(*IcontinueContext).Get_CONTINUE().GetColumn()
		}
	}())
	localctx.(*IcontinueContext).ex = transferencia.NewContinue(fila, columna)

	return localctx
}

// IControl_loopContext is an interface to support dynamic dispatch.
type IControl_loopContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_LOOP returns the _LOOP token.
	Get_LOOP() antlr.Token

	// Set_LOOP sets the _LOOP token.
	Set_LOOP(antlr.Token)

	// Get_bloque returns the _bloque rule contexts.
	Get_bloque() IBloqueContext

	// Set_bloque sets the _bloque rule contexts.
	Set_bloque(IBloqueContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsControl_loopContext differentiates from other interfaces.
	IsControl_loopContext()
}

type Control_loopContext struct {
	*antlr.BaseParserRuleContext
	parser  antlr.Parser
	ex      Ast.Instruccion
	_LOOP   antlr.Token
	_bloque IBloqueContext
}

func NewEmptyControl_loopContext() *Control_loopContext {
	var p = new(Control_loopContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_control_loop
	return p
}

func (*Control_loopContext) IsControl_loopContext() {}

func NewControl_loopContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Control_loopContext {
	var p = new(Control_loopContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_control_loop

	return p
}

func (s *Control_loopContext) GetParser() antlr.Parser { return s.parser }

func (s *Control_loopContext) Get_LOOP() antlr.Token { return s._LOOP }

func (s *Control_loopContext) Set_LOOP(v antlr.Token) { s._LOOP = v }

func (s *Control_loopContext) Get_bloque() IBloqueContext { return s._bloque }

func (s *Control_loopContext) Set_bloque(v IBloqueContext) { s._bloque = v }

func (s *Control_loopContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Control_loopContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Control_loopContext) LOOP() antlr.TerminalNode {
	return s.GetToken(NparserLOOP, 0)
}

func (s *Control_loopContext) Bloque() IBloqueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloqueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloqueContext)
}

func (s *Control_loopContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Control_loopContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Control_loop() (localctx IControl_loopContext) {
	localctx = NewControl_loopContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, NparserRULE_control_loop)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(818)

		var _m = p.Match(NparserLOOP)

		localctx.(*Control_loopContext)._LOOP = _m
	}
	{
		p.SetState(819)

		var _x = p.Bloque()

		localctx.(*Control_loopContext)._bloque = _x
	}

	fila := (func() int {
		if localctx.(*Control_loopContext).Get_LOOP() == nil {
			return 0
		} else {
			return localctx.(*Control_loopContext).Get_LOOP().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*Control_loopContext).Get_LOOP() == nil {
			return 0
		} else {
			return localctx.(*Control_loopContext).Get_LOOP().GetColumn()
		}
	}())
	localctx.(*Control_loopContext).ex = bucles.NewLoop(Ast.LOOP, localctx.(*Control_loopContext).Get_bloque().GetList(), fila, columna)

	return localctx
}

// IControl_loop_expContext is an interface to support dynamic dispatch.
type IControl_loop_expContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_LOOP returns the _LOOP token.
	Get_LOOP() antlr.Token

	// Set_LOOP sets the _LOOP token.
	Set_LOOP(antlr.Token)

	// Get_bloque returns the _bloque rule contexts.
	Get_bloque() IBloqueContext

	// Set_bloque sets the _bloque rule contexts.
	Set_bloque(IBloqueContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsControl_loop_expContext differentiates from other interfaces.
	IsControl_loop_expContext()
}

type Control_loop_expContext struct {
	*antlr.BaseParserRuleContext
	parser  antlr.Parser
	ex      Ast.Instruccion
	_LOOP   antlr.Token
	_bloque IBloqueContext
}

func NewEmptyControl_loop_expContext() *Control_loop_expContext {
	var p = new(Control_loop_expContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_control_loop_exp
	return p
}

func (*Control_loop_expContext) IsControl_loop_expContext() {}

func NewControl_loop_expContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Control_loop_expContext {
	var p = new(Control_loop_expContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_control_loop_exp

	return p
}

func (s *Control_loop_expContext) GetParser() antlr.Parser { return s.parser }

func (s *Control_loop_expContext) Get_LOOP() antlr.Token { return s._LOOP }

func (s *Control_loop_expContext) Set_LOOP(v antlr.Token) { s._LOOP = v }

func (s *Control_loop_expContext) Get_bloque() IBloqueContext { return s._bloque }

func (s *Control_loop_expContext) Set_bloque(v IBloqueContext) { s._bloque = v }

func (s *Control_loop_expContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Control_loop_expContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Control_loop_expContext) LOOP() antlr.TerminalNode {
	return s.GetToken(NparserLOOP, 0)
}

func (s *Control_loop_expContext) Bloque() IBloqueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloqueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloqueContext)
}

func (s *Control_loop_expContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Control_loop_expContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Control_loop_exp() (localctx IControl_loop_expContext) {
	localctx = NewControl_loop_expContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, NparserRULE_control_loop_exp)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(822)

		var _m = p.Match(NparserLOOP)

		localctx.(*Control_loop_expContext)._LOOP = _m
	}
	{
		p.SetState(823)

		var _x = p.Bloque()

		localctx.(*Control_loop_expContext)._bloque = _x
	}

	fila := (func() int {
		if localctx.(*Control_loop_expContext).Get_LOOP() == nil {
			return 0
		} else {
			return localctx.(*Control_loop_expContext).Get_LOOP().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*Control_loop_expContext).Get_LOOP() == nil {
			return 0
		} else {
			return localctx.(*Control_loop_expContext).Get_LOOP().GetColumn()
		}
	}())
	localctx.(*Control_loop_expContext).ex = bucles.NewLoop(Ast.LOOP_EXPRESION, localctx.(*Control_loop_expContext).Get_bloque().GetList(), fila, columna)

	return localctx
}

// IPrintNormalContext is an interface to support dynamic dispatch.
type IPrintNormalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_PRINT returns the _PRINT token.
	Get_PRINT() antlr.Token

	// Set_PRINT sets the _PRINT token.
	Set_PRINT(antlr.Token)

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsPrintNormalContext differentiates from other interfaces.
	IsPrintNormalContext()
}

type PrintNormalContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	ex         Ast.Instruccion
	_PRINT     antlr.Token
	_expresion IExpresionContext
}

func NewEmptyPrintNormalContext() *PrintNormalContext {
	var p = new(PrintNormalContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_printNormal
	return p
}

func (*PrintNormalContext) IsPrintNormalContext() {}

func NewPrintNormalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrintNormalContext {
	var p = new(PrintNormalContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_printNormal

	return p
}

func (s *PrintNormalContext) GetParser() antlr.Parser { return s.parser }

func (s *PrintNormalContext) Get_PRINT() antlr.Token { return s._PRINT }

func (s *PrintNormalContext) Set_PRINT(v antlr.Token) { s._PRINT = v }

func (s *PrintNormalContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *PrintNormalContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *PrintNormalContext) GetEx() Ast.Instruccion { return s.ex }

func (s *PrintNormalContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *PrintNormalContext) PRINT() antlr.TerminalNode {
	return s.GetToken(NparserPRINT, 0)
}

func (s *PrintNormalContext) PAR_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserPAR_IZQ, 0)
}

func (s *PrintNormalContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *PrintNormalContext) PAR_DER() antlr.TerminalNode {
	return s.GetToken(NparserPAR_DER, 0)
}

func (s *PrintNormalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrintNormalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) PrintNormal() (localctx IPrintNormalContext) {
	localctx = NewPrintNormalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, NparserRULE_printNormal)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(826)

		var _m = p.Match(NparserPRINT)

		localctx.(*PrintNormalContext)._PRINT = _m
	}
	{
		p.SetState(827)
		p.Match(NparserPAR_IZQ)
	}
	{
		p.SetState(828)

		var _x = p.expresion(0)

		localctx.(*PrintNormalContext)._expresion = _x
	}
	{
		p.SetState(829)
		p.Match(NparserPAR_DER)
	}

	fila := (func() int {
		if localctx.(*PrintNormalContext).Get_PRINT() == nil {
			return 0
		} else {
			return localctx.(*PrintNormalContext).Get_PRINT().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*PrintNormalContext).Get_PRINT() == nil {
			return 0
		} else {
			return localctx.(*PrintNormalContext).Get_PRINT().GetColumn()
		}
	}())
	localctx.(*PrintNormalContext).ex = instrucciones.NewPrint(localctx.(*PrintNormalContext).Get_expresion().GetEx(), Ast.PRINT, fila, columna)

	return localctx
}

// IPrintFormatoContext is an interface to support dynamic dispatch.
type IPrintFormatoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_PRINT returns the _PRINT token.
	Get_PRINT() antlr.Token

	// Get_CADENA returns the _CADENA token.
	Get_CADENA() antlr.Token

	// Set_PRINT sets the _PRINT token.
	Set_PRINT(antlr.Token)

	// Set_CADENA sets the _CADENA token.
	Set_CADENA(antlr.Token)

	// GetExpresiones returns the expresiones rule contexts.
	GetExpresiones() IElementosPrintContext

	// SetExpresiones sets the expresiones rule contexts.
	SetExpresiones(IElementosPrintContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsPrintFormatoContext differentiates from other interfaces.
	IsPrintFormatoContext()
}

type PrintFormatoContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	ex          Ast.Instruccion
	_PRINT      antlr.Token
	_CADENA     antlr.Token
	expresiones IElementosPrintContext
}

func NewEmptyPrintFormatoContext() *PrintFormatoContext {
	var p = new(PrintFormatoContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_printFormato
	return p
}

func (*PrintFormatoContext) IsPrintFormatoContext() {}

func NewPrintFormatoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrintFormatoContext {
	var p = new(PrintFormatoContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_printFormato

	return p
}

func (s *PrintFormatoContext) GetParser() antlr.Parser { return s.parser }

func (s *PrintFormatoContext) Get_PRINT() antlr.Token { return s._PRINT }

func (s *PrintFormatoContext) Get_CADENA() antlr.Token { return s._CADENA }

func (s *PrintFormatoContext) Set_PRINT(v antlr.Token) { s._PRINT = v }

func (s *PrintFormatoContext) Set_CADENA(v antlr.Token) { s._CADENA = v }

func (s *PrintFormatoContext) GetExpresiones() IElementosPrintContext { return s.expresiones }

func (s *PrintFormatoContext) SetExpresiones(v IElementosPrintContext) { s.expresiones = v }

func (s *PrintFormatoContext) GetEx() Ast.Instruccion { return s.ex }

func (s *PrintFormatoContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *PrintFormatoContext) PRINT() antlr.TerminalNode {
	return s.GetToken(NparserPRINT, 0)
}

func (s *PrintFormatoContext) PAR_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserPAR_IZQ, 0)
}

func (s *PrintFormatoContext) CADENA() antlr.TerminalNode {
	return s.GetToken(NparserCADENA, 0)
}

func (s *PrintFormatoContext) COMA() antlr.TerminalNode {
	return s.GetToken(NparserCOMA, 0)
}

func (s *PrintFormatoContext) PAR_DER() antlr.TerminalNode {
	return s.GetToken(NparserPAR_DER, 0)
}

func (s *PrintFormatoContext) ElementosPrint() IElementosPrintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementosPrintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementosPrintContext)
}

func (s *PrintFormatoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrintFormatoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) PrintFormato() (localctx IPrintFormatoContext) {
	localctx = NewPrintFormatoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, NparserRULE_printFormato)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(832)

		var _m = p.Match(NparserPRINT)

		localctx.(*PrintFormatoContext)._PRINT = _m
	}
	{
		p.SetState(833)
		p.Match(NparserPAR_IZQ)
	}
	{
		p.SetState(834)

		var _m = p.Match(NparserCADENA)

		localctx.(*PrintFormatoContext)._CADENA = _m
	}
	{
		p.SetState(835)
		p.Match(NparserCOMA)
	}
	{
		p.SetState(836)

		var _x = p.elementosPrint(0)

		localctx.(*PrintFormatoContext).expresiones = _x
	}
	{
		p.SetState(837)
		p.Match(NparserPAR_DER)
	}

	fila := (func() int {
		if localctx.(*PrintFormatoContext).Get_PRINT() == nil {
			return 0
		} else {
			return localctx.(*PrintFormatoContext).Get_PRINT().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*PrintFormatoContext).Get_PRINT() == nil {
			return 0
		} else {
			return localctx.(*PrintFormatoContext).Get_PRINT().GetColumn()
		}
	}())
	valor := (func() string {
		if localctx.(*PrintFormatoContext).Get_CADENA() == nil {
			return ""
		} else {
			return localctx.(*PrintFormatoContext).Get_CADENA().GetText()
		}
	}())
	valor = valor[1 : len(valor)-1]
	localctx.(*PrintFormatoContext).ex = instrucciones.NewPrintF(localctx.(*PrintFormatoContext).GetExpresiones().GetList(), valor, Ast.PRINTF, fila, columna)

	return localctx
}

// IElementosPrintContext is an interface to support dynamic dispatch.
type IElementosPrintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLista_elementos returns the lista_elementos rule contexts.
	GetLista_elementos() IElementosPrintContext

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// SetLista_elementos sets the lista_elementos rule contexts.
	SetLista_elementos(IElementosPrintContext)

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsElementosPrintContext differentiates from other interfaces.
	IsElementosPrintContext()
}

type ElementosPrintContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	list            *arraylist.List
	lista_elementos IElementosPrintContext
	_expresion      IExpresionContext
}

func NewEmptyElementosPrintContext() *ElementosPrintContext {
	var p = new(ElementosPrintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_elementosPrint
	return p
}

func (*ElementosPrintContext) IsElementosPrintContext() {}

func NewElementosPrintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElementosPrintContext {
	var p = new(ElementosPrintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_elementosPrint

	return p
}

func (s *ElementosPrintContext) GetParser() antlr.Parser { return s.parser }

func (s *ElementosPrintContext) GetLista_elementos() IElementosPrintContext { return s.lista_elementos }

func (s *ElementosPrintContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *ElementosPrintContext) SetLista_elementos(v IElementosPrintContext) { s.lista_elementos = v }

func (s *ElementosPrintContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *ElementosPrintContext) GetList() *arraylist.List { return s.list }

func (s *ElementosPrintContext) SetList(v *arraylist.List) { s.list = v }

func (s *ElementosPrintContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *ElementosPrintContext) COMA() antlr.TerminalNode {
	return s.GetToken(NparserCOMA, 0)
}

func (s *ElementosPrintContext) ElementosPrint() IElementosPrintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementosPrintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementosPrintContext)
}

func (s *ElementosPrintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElementosPrintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) ElementosPrint() (localctx IElementosPrintContext) {
	return p.elementosPrint(0)
}

func (p *Nparser) elementosPrint(_p int) (localctx IElementosPrintContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewElementosPrintContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IElementosPrintContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 76
	p.EnterRecursionRule(localctx, 76, NparserRULE_elementosPrint, _p)
	localctx.(*ElementosPrintContext).list = arraylist.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(841)

		var _x = p.expresion(0)

		localctx.(*ElementosPrintContext)._expresion = _x
	}

	localctx.(*ElementosPrintContext).list.Add(localctx.(*ElementosPrintContext).Get_expresion().GetEx())

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(851)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 27, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewElementosPrintContext(p, _parentctx, _parentState)
			localctx.(*ElementosPrintContext).lista_elementos = _prevctx
			p.PushNewRecursionContext(localctx, _startState, NparserRULE_elementosPrint)
			p.SetState(844)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(845)
				p.Match(NparserCOMA)
			}
			{
				p.SetState(846)

				var _x = p.expresion(0)

				localctx.(*ElementosPrintContext)._expresion = _x
			}

			localctx.(*ElementosPrintContext).GetLista_elementos().GetList().Add(localctx.(*ElementosPrintContext).Get_expresion().GetEx())
			localctx.(*ElementosPrintContext).list = localctx.(*ElementosPrintContext).GetLista_elementos().GetList()

		}
		p.SetState(853)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 27, p.GetParserRuleContext())
	}

	return localctx
}

// IControl_whileContext is an interface to support dynamic dispatch.
type IControl_whileContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_WHILE returns the _WHILE token.
	Get_WHILE() antlr.Token

	// Set_WHILE sets the _WHILE token.
	Set_WHILE(antlr.Token)

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// Get_bloque returns the _bloque rule contexts.
	Get_bloque() IBloqueContext

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// Set_bloque sets the _bloque rule contexts.
	Set_bloque(IBloqueContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsControl_whileContext differentiates from other interfaces.
	IsControl_whileContext()
}

type Control_whileContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	ex         Ast.Instruccion
	_WHILE     antlr.Token
	_expresion IExpresionContext
	_bloque    IBloqueContext
}

func NewEmptyControl_whileContext() *Control_whileContext {
	var p = new(Control_whileContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_control_while
	return p
}

func (*Control_whileContext) IsControl_whileContext() {}

func NewControl_whileContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Control_whileContext {
	var p = new(Control_whileContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_control_while

	return p
}

func (s *Control_whileContext) GetParser() antlr.Parser { return s.parser }

func (s *Control_whileContext) Get_WHILE() antlr.Token { return s._WHILE }

func (s *Control_whileContext) Set_WHILE(v antlr.Token) { s._WHILE = v }

func (s *Control_whileContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *Control_whileContext) Get_bloque() IBloqueContext { return s._bloque }

func (s *Control_whileContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *Control_whileContext) Set_bloque(v IBloqueContext) { s._bloque = v }

func (s *Control_whileContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Control_whileContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Control_whileContext) WHILE() antlr.TerminalNode {
	return s.GetToken(NparserWHILE, 0)
}

func (s *Control_whileContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Control_whileContext) Bloque() IBloqueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloqueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloqueContext)
}

func (s *Control_whileContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Control_whileContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Control_while() (localctx IControl_whileContext) {
	localctx = NewControl_whileContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, NparserRULE_control_while)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(854)

		var _m = p.Match(NparserWHILE)

		localctx.(*Control_whileContext)._WHILE = _m
	}
	{
		p.SetState(855)

		var _x = p.expresion(0)

		localctx.(*Control_whileContext)._expresion = _x
	}
	{
		p.SetState(856)

		var _x = p.Bloque()

		localctx.(*Control_whileContext)._bloque = _x
	}

	fila := (func() int {
		if localctx.(*Control_whileContext).Get_WHILE() == nil {
			return 0
		} else {
			return localctx.(*Control_whileContext).Get_WHILE().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*Control_whileContext).Get_WHILE() == nil {
			return 0
		} else {
			return localctx.(*Control_whileContext).Get_WHILE().GetColumn()
		}
	}())
	localctx.(*Control_whileContext).ex = bucles.NewWhile(Ast.WHILE, localctx.(*Control_whileContext).Get_expresion().GetEx(), localctx.(*Control_whileContext).Get_bloque().GetList(), fila, columna)

	return localctx
}

// IParametros_funcionContext is an interface to support dynamic dispatch.
type IParametros_funcionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLista_elementos returns the lista_elementos rule contexts.
	GetLista_elementos() IParametros_funcionContext

	// Get_parametro returns the _parametro rule contexts.
	Get_parametro() IParametroContext

	// SetLista_elementos sets the lista_elementos rule contexts.
	SetLista_elementos(IParametros_funcionContext)

	// Set_parametro sets the _parametro rule contexts.
	Set_parametro(IParametroContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsParametros_funcionContext differentiates from other interfaces.
	IsParametros_funcionContext()
}

type Parametros_funcionContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	list            *arraylist.List
	lista_elementos IParametros_funcionContext
	_parametro      IParametroContext
}

func NewEmptyParametros_funcionContext() *Parametros_funcionContext {
	var p = new(Parametros_funcionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_parametros_funcion
	return p
}

func (*Parametros_funcionContext) IsParametros_funcionContext() {}

func NewParametros_funcionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Parametros_funcionContext {
	var p = new(Parametros_funcionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_parametros_funcion

	return p
}

func (s *Parametros_funcionContext) GetParser() antlr.Parser { return s.parser }

func (s *Parametros_funcionContext) GetLista_elementos() IParametros_funcionContext {
	return s.lista_elementos
}

func (s *Parametros_funcionContext) Get_parametro() IParametroContext { return s._parametro }

func (s *Parametros_funcionContext) SetLista_elementos(v IParametros_funcionContext) {
	s.lista_elementos = v
}

func (s *Parametros_funcionContext) Set_parametro(v IParametroContext) { s._parametro = v }

func (s *Parametros_funcionContext) GetList() *arraylist.List { return s.list }

func (s *Parametros_funcionContext) SetList(v *arraylist.List) { s.list = v }

func (s *Parametros_funcionContext) Parametro() IParametroContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParametroContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParametroContext)
}

func (s *Parametros_funcionContext) COMA() antlr.TerminalNode {
	return s.GetToken(NparserCOMA, 0)
}

func (s *Parametros_funcionContext) Parametros_funcion() IParametros_funcionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParametros_funcionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParametros_funcionContext)
}

func (s *Parametros_funcionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Parametros_funcionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Parametros_funcion() (localctx IParametros_funcionContext) {
	return p.parametros_funcion(0)
}

func (p *Nparser) parametros_funcion(_p int) (localctx IParametros_funcionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewParametros_funcionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IParametros_funcionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 80
	p.EnterRecursionRule(localctx, 80, NparserRULE_parametros_funcion, _p)
	localctx.(*Parametros_funcionContext).list = arraylist.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(860)

		var _x = p.Parametro()

		localctx.(*Parametros_funcionContext)._parametro = _x
	}

	localctx.(*Parametros_funcionContext).list.Add(localctx.(*Parametros_funcionContext).Get_parametro().GetEx())

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(870)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 28, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewParametros_funcionContext(p, _parentctx, _parentState)
			localctx.(*Parametros_funcionContext).lista_elementos = _prevctx
			p.PushNewRecursionContext(localctx, _startState, NparserRULE_parametros_funcion)
			p.SetState(863)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(864)
				p.Match(NparserCOMA)
			}
			{
				p.SetState(865)

				var _x = p.Parametro()

				localctx.(*Parametros_funcionContext)._parametro = _x
			}

			localctx.(*Parametros_funcionContext).GetLista_elementos().GetList().Add(localctx.(*Parametros_funcionContext).Get_parametro().GetEx())
			localctx.(*Parametros_funcionContext).list = localctx.(*Parametros_funcionContext).GetLista_elementos().GetList()

		}
		p.SetState(872)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 28, p.GetParserRuleContext())
	}

	return localctx
}

// IParametroContext is an interface to support dynamic dispatch.
type IParametroContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_MUT returns the _MUT token.
	Get_MUT() antlr.Token

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Set_MUT sets the _MUT token.
	Set_MUT(antlr.Token)

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// Get_tipo_dato returns the _tipo_dato rule contexts.
	Get_tipo_dato() ITipo_datoContext

	// Set_tipo_dato sets the _tipo_dato rule contexts.
	Set_tipo_dato(ITipo_datoContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Expresion

	// SetEx sets the ex attribute.
	SetEx(Ast.Expresion)

	// IsParametroContext differentiates from other interfaces.
	IsParametroContext()
}

type ParametroContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	ex         Ast.Expresion
	_MUT       antlr.Token
	_ID        antlr.Token
	_tipo_dato ITipo_datoContext
}

func NewEmptyParametroContext() *ParametroContext {
	var p = new(ParametroContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_parametro
	return p
}

func (*ParametroContext) IsParametroContext() {}

func NewParametroContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParametroContext {
	var p = new(ParametroContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_parametro

	return p
}

func (s *ParametroContext) GetParser() antlr.Parser { return s.parser }

func (s *ParametroContext) Get_MUT() antlr.Token { return s._MUT }

func (s *ParametroContext) Get_ID() antlr.Token { return s._ID }

func (s *ParametroContext) Set_MUT(v antlr.Token) { s._MUT = v }

func (s *ParametroContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *ParametroContext) Get_tipo_dato() ITipo_datoContext { return s._tipo_dato }

func (s *ParametroContext) Set_tipo_dato(v ITipo_datoContext) { s._tipo_dato = v }

func (s *ParametroContext) GetEx() Ast.Expresion { return s.ex }

func (s *ParametroContext) SetEx(v Ast.Expresion) { s.ex = v }

func (s *ParametroContext) MUT() antlr.TerminalNode {
	return s.GetToken(NparserMUT, 0)
}

func (s *ParametroContext) ID() antlr.TerminalNode {
	return s.GetToken(NparserID, 0)
}

func (s *ParametroContext) DOSPUNTOS() antlr.TerminalNode {
	return s.GetToken(NparserDOSPUNTOS, 0)
}

func (s *ParametroContext) Tipo_dato() ITipo_datoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipo_datoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipo_datoContext)
}

func (s *ParametroContext) AMPERSAND() antlr.TerminalNode {
	return s.GetToken(NparserAMPERSAND, 0)
}

func (s *ParametroContext) CORCHETE_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserCORCHETE_IZQ, 0)
}

func (s *ParametroContext) CORCHETE_DER() antlr.TerminalNode {
	return s.GetToken(NparserCORCHETE_DER, 0)
}

func (s *ParametroContext) VEC() antlr.TerminalNode {
	return s.GetToken(NparserVEC, 0)
}

func (s *ParametroContext) MENOR() antlr.TerminalNode {
	return s.GetToken(NparserMENOR, 0)
}

func (s *ParametroContext) MAYOR() antlr.TerminalNode {
	return s.GetToken(NparserMAYOR, 0)
}

func (s *ParametroContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParametroContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Parametro() (localctx IParametroContext) {
	localctx = NewParametroContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, NparserRULE_parametro)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(903)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 29, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(873)

			var _m = p.Match(NparserMUT)

			localctx.(*ParametroContext)._MUT = _m
		}
		{
			p.SetState(874)

			var _m = p.Match(NparserID)

			localctx.(*ParametroContext)._ID = _m
		}
		{
			p.SetState(875)
			p.Match(NparserDOSPUNTOS)
		}
		{
			p.SetState(876)

			var _x = p.Tipo_dato()

			localctx.(*ParametroContext)._tipo_dato = _x
		}

		fila := (func() int {
			if localctx.(*ParametroContext).Get_MUT() == nil {
				return 0
			} else {
				return localctx.(*ParametroContext).Get_MUT().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ParametroContext).Get_MUT() == nil {
				return 0
			} else {
				return localctx.(*ParametroContext).Get_MUT().GetColumn()
			}
		}())
		localctx.(*ParametroContext).ex = simbolos.NewParametro((func() string {
			if localctx.(*ParametroContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*ParametroContext).Get_ID().GetText()
			}
		}()), Ast.PARAMETRO, localctx.(*ParametroContext).Get_tipo_dato().GetEx(), true, Ast.NULL, fila, columna)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(879)

			var _m = p.Match(NparserID)

			localctx.(*ParametroContext)._ID = _m
		}
		{
			p.SetState(880)
			p.Match(NparserDOSPUNTOS)
		}
		{
			p.SetState(881)

			var _x = p.Tipo_dato()

			localctx.(*ParametroContext)._tipo_dato = _x
		}

		fila := (func() int {
			if localctx.(*ParametroContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*ParametroContext).Get_ID().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ParametroContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*ParametroContext).Get_ID().GetColumn()
			}
		}())
		localctx.(*ParametroContext).ex = simbolos.NewParametro((func() string {
			if localctx.(*ParametroContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*ParametroContext).Get_ID().GetText()
			}
		}()), Ast.PARAMETRO, localctx.(*ParametroContext).Get_tipo_dato().GetEx(), false, Ast.NULL, fila, columna)

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(884)

			var _m = p.Match(NparserID)

			localctx.(*ParametroContext)._ID = _m
		}
		{
			p.SetState(885)
			p.Match(NparserDOSPUNTOS)
		}
		{
			p.SetState(886)
			p.Match(NparserAMPERSAND)
		}
		{
			p.SetState(887)
			p.Match(NparserMUT)
		}
		{
			p.SetState(888)
			p.Match(NparserCORCHETE_IZQ)
		}
		{
			p.SetState(889)

			var _x = p.Tipo_dato()

			localctx.(*ParametroContext)._tipo_dato = _x
		}
		{
			p.SetState(890)
			p.Match(NparserCORCHETE_DER)
		}

		fila := (func() int {
			if localctx.(*ParametroContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*ParametroContext).Get_ID().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ParametroContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*ParametroContext).Get_ID().GetColumn()
			}
		}())
		localctx.(*ParametroContext).ex = simbolos.NewParametro((func() string {
			if localctx.(*ParametroContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*ParametroContext).Get_ID().GetText()
			}
		}()), Ast.PARAMETRO, Ast.ARRAY, true, localctx.(*ParametroContext).Get_tipo_dato().GetEx(), fila, columna)

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(893)

			var _m = p.Match(NparserID)

			localctx.(*ParametroContext)._ID = _m
		}
		{
			p.SetState(894)
			p.Match(NparserDOSPUNTOS)
		}
		{
			p.SetState(895)
			p.Match(NparserAMPERSAND)
		}
		{
			p.SetState(896)
			p.Match(NparserMUT)
		}
		{
			p.SetState(897)
			p.Match(NparserVEC)
		}
		{
			p.SetState(898)
			p.Match(NparserMENOR)
		}
		{
			p.SetState(899)

			var _x = p.Tipo_dato()

			localctx.(*ParametroContext)._tipo_dato = _x
		}
		{
			p.SetState(900)
			p.Match(NparserMAYOR)
		}

		fila := (func() int {
			if localctx.(*ParametroContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*ParametroContext).Get_ID().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ParametroContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*ParametroContext).Get_ID().GetColumn()
			}
		}())
		localctx.(*ParametroContext).ex = simbolos.NewParametro((func() string {
			if localctx.(*ParametroContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*ParametroContext).Get_ID().GetText()
			}
		}()), Ast.PARAMETRO, Ast.VECTOR, true, localctx.(*ParametroContext).Get_tipo_dato().GetEx(), fila, columna)

	}

	return localctx
}

// ILlamada_funcionContext is an interface to support dynamic dispatch.
type ILlamada_funcionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// Get_parametros_llamada returns the _parametros_llamada rule contexts.
	Get_parametros_llamada() IParametros_llamadaContext

	// Set_parametros_llamada sets the _parametros_llamada rule contexts.
	Set_parametros_llamada(IParametros_llamadaContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Expresion

	// SetEx sets the ex attribute.
	SetEx(Ast.Expresion)

	// IsLlamada_funcionContext differentiates from other interfaces.
	IsLlamada_funcionContext()
}

type Llamada_funcionContext struct {
	*antlr.BaseParserRuleContext
	parser              antlr.Parser
	ex                  Ast.Expresion
	_ID                 antlr.Token
	_parametros_llamada IParametros_llamadaContext
}

func NewEmptyLlamada_funcionContext() *Llamada_funcionContext {
	var p = new(Llamada_funcionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_llamada_funcion
	return p
}

func (*Llamada_funcionContext) IsLlamada_funcionContext() {}

func NewLlamada_funcionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Llamada_funcionContext {
	var p = new(Llamada_funcionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_llamada_funcion

	return p
}

func (s *Llamada_funcionContext) GetParser() antlr.Parser { return s.parser }

func (s *Llamada_funcionContext) Get_ID() antlr.Token { return s._ID }

func (s *Llamada_funcionContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *Llamada_funcionContext) Get_parametros_llamada() IParametros_llamadaContext {
	return s._parametros_llamada
}

func (s *Llamada_funcionContext) Set_parametros_llamada(v IParametros_llamadaContext) {
	s._parametros_llamada = v
}

func (s *Llamada_funcionContext) GetEx() Ast.Expresion { return s.ex }

func (s *Llamada_funcionContext) SetEx(v Ast.Expresion) { s.ex = v }

func (s *Llamada_funcionContext) ID() antlr.TerminalNode {
	return s.GetToken(NparserID, 0)
}

func (s *Llamada_funcionContext) PAR_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserPAR_IZQ, 0)
}

func (s *Llamada_funcionContext) Parametros_llamada() IParametros_llamadaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParametros_llamadaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParametros_llamadaContext)
}

func (s *Llamada_funcionContext) PAR_DER() antlr.TerminalNode {
	return s.GetToken(NparserPAR_DER, 0)
}

func (s *Llamada_funcionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Llamada_funcionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Llamada_funcion() (localctx ILlamada_funcionContext) {
	localctx = NewLlamada_funcionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, NparserRULE_llamada_funcion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(915)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 30, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(905)

			var _m = p.Match(NparserID)

			localctx.(*Llamada_funcionContext)._ID = _m
		}
		{
			p.SetState(906)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(907)

			var _x = p.parametros_llamada(0)

			localctx.(*Llamada_funcionContext)._parametros_llamada = _x
		}
		{
			p.SetState(908)
			p.Match(NparserPAR_DER)
		}

		fila := (func() int {
			if localctx.(*Llamada_funcionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Llamada_funcionContext).Get_ID().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Llamada_funcionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Llamada_funcionContext).Get_ID().GetColumn()
			}
		}())
		id := expresiones.NewIdentificador((func() string {
			if localctx.(*Llamada_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Llamada_funcionContext).Get_ID().GetText()
			}
		}()), Ast.IDENTIFICADOR, fila, columna)
		localctx.(*Llamada_funcionContext).ex = simbolos.NewLlamadaFuncion(id, localctx.(*Llamada_funcionContext).Get_parametros_llamada().GetList(), Ast.LLAMADA_FUNCION, fila, columna)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(911)

			var _m = p.Match(NparserID)

			localctx.(*Llamada_funcionContext)._ID = _m
		}
		{
			p.SetState(912)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(913)
			p.Match(NparserPAR_DER)
		}

		fila := (func() int {
			if localctx.(*Llamada_funcionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Llamada_funcionContext).Get_ID().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Llamada_funcionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Llamada_funcionContext).Get_ID().GetColumn()
			}
		}())
		params := arraylist.New()
		id := expresiones.NewIdentificador((func() string {
			if localctx.(*Llamada_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Llamada_funcionContext).Get_ID().GetText()
			}
		}()), Ast.IDENTIFICADOR, fila, columna)
		localctx.(*Llamada_funcionContext).ex = simbolos.NewLlamadaFuncion(id, params, Ast.LLAMADA_FUNCION, fila, columna)

	}

	return localctx
}

// IParametros_llamadaContext is an interface to support dynamic dispatch.
type IParametros_llamadaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLista_elementos returns the lista_elementos rule contexts.
	GetLista_elementos() IParametros_llamadaContext

	// Get_parametro_llamada_referencia returns the _parametro_llamada_referencia rule contexts.
	Get_parametro_llamada_referencia() IParametro_llamada_referenciaContext

	// SetLista_elementos sets the lista_elementos rule contexts.
	SetLista_elementos(IParametros_llamadaContext)

	// Set_parametro_llamada_referencia sets the _parametro_llamada_referencia rule contexts.
	Set_parametro_llamada_referencia(IParametro_llamada_referenciaContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsParametros_llamadaContext differentiates from other interfaces.
	IsParametros_llamadaContext()
}

type Parametros_llamadaContext struct {
	*antlr.BaseParserRuleContext
	parser                        antlr.Parser
	list                          *arraylist.List
	lista_elementos               IParametros_llamadaContext
	_parametro_llamada_referencia IParametro_llamada_referenciaContext
}

func NewEmptyParametros_llamadaContext() *Parametros_llamadaContext {
	var p = new(Parametros_llamadaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_parametros_llamada
	return p
}

func (*Parametros_llamadaContext) IsParametros_llamadaContext() {}

func NewParametros_llamadaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Parametros_llamadaContext {
	var p = new(Parametros_llamadaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_parametros_llamada

	return p
}

func (s *Parametros_llamadaContext) GetParser() antlr.Parser { return s.parser }

func (s *Parametros_llamadaContext) GetLista_elementos() IParametros_llamadaContext {
	return s.lista_elementos
}

func (s *Parametros_llamadaContext) Get_parametro_llamada_referencia() IParametro_llamada_referenciaContext {
	return s._parametro_llamada_referencia
}

func (s *Parametros_llamadaContext) SetLista_elementos(v IParametros_llamadaContext) {
	s.lista_elementos = v
}

func (s *Parametros_llamadaContext) Set_parametro_llamada_referencia(v IParametro_llamada_referenciaContext) {
	s._parametro_llamada_referencia = v
}

func (s *Parametros_llamadaContext) GetList() *arraylist.List { return s.list }

func (s *Parametros_llamadaContext) SetList(v *arraylist.List) { s.list = v }

func (s *Parametros_llamadaContext) Parametro_llamada_referencia() IParametro_llamada_referenciaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParametro_llamada_referenciaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParametro_llamada_referenciaContext)
}

func (s *Parametros_llamadaContext) COMA() antlr.TerminalNode {
	return s.GetToken(NparserCOMA, 0)
}

func (s *Parametros_llamadaContext) Parametros_llamada() IParametros_llamadaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParametros_llamadaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParametros_llamadaContext)
}

func (s *Parametros_llamadaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Parametros_llamadaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Parametros_llamada() (localctx IParametros_llamadaContext) {
	return p.parametros_llamada(0)
}

func (p *Nparser) parametros_llamada(_p int) (localctx IParametros_llamadaContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewParametros_llamadaContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IParametros_llamadaContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 86
	p.EnterRecursionRule(localctx, 86, NparserRULE_parametros_llamada, _p)
	localctx.(*Parametros_llamadaContext).list = arraylist.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(918)

		var _x = p.Parametro_llamada_referencia()

		localctx.(*Parametros_llamadaContext)._parametro_llamada_referencia = _x
	}

	localctx.(*Parametros_llamadaContext).list.Add(localctx.(*Parametros_llamadaContext).Get_parametro_llamada_referencia().GetEx())

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(928)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 31, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewParametros_llamadaContext(p, _parentctx, _parentState)
			localctx.(*Parametros_llamadaContext).lista_elementos = _prevctx
			p.PushNewRecursionContext(localctx, _startState, NparserRULE_parametros_llamada)
			p.SetState(921)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(922)
				p.Match(NparserCOMA)
			}
			{
				p.SetState(923)

				var _x = p.Parametro_llamada_referencia()

				localctx.(*Parametros_llamadaContext)._parametro_llamada_referencia = _x
			}

			localctx.(*Parametros_llamadaContext).GetLista_elementos().GetList().Add(localctx.(*Parametros_llamadaContext).Get_parametro_llamada_referencia().GetEx())
			localctx.(*Parametros_llamadaContext).list = localctx.(*Parametros_llamadaContext).GetLista_elementos().GetList()

		}
		p.SetState(930)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 31, p.GetParserRuleContext())
	}

	return localctx
}

// IParametro_llamada_referenciaContext is an interface to support dynamic dispatch.
type IParametro_llamada_referenciaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_AMPERSAND returns the _AMPERSAND token.
	Get_AMPERSAND() antlr.Token

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Set_AMPERSAND sets the _AMPERSAND token.
	Set_AMPERSAND(antlr.Token)

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// GetE returns the e rule contexts.
	GetE() IExpresionContext

	// SetE sets the e rule contexts.
	SetE(IExpresionContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Expresion

	// SetEx sets the ex attribute.
	SetEx(Ast.Expresion)

	// IsParametro_llamada_referenciaContext differentiates from other interfaces.
	IsParametro_llamada_referenciaContext()
}

type Parametro_llamada_referenciaContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	ex         Ast.Expresion
	e          IExpresionContext
	_AMPERSAND antlr.Token
	_ID        antlr.Token
}

func NewEmptyParametro_llamada_referenciaContext() *Parametro_llamada_referenciaContext {
	var p = new(Parametro_llamada_referenciaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_parametro_llamada_referencia
	return p
}

func (*Parametro_llamada_referenciaContext) IsParametro_llamada_referenciaContext() {}

func NewParametro_llamada_referenciaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Parametro_llamada_referenciaContext {
	var p = new(Parametro_llamada_referenciaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_parametro_llamada_referencia

	return p
}

func (s *Parametro_llamada_referenciaContext) GetParser() antlr.Parser { return s.parser }

func (s *Parametro_llamada_referenciaContext) Get_AMPERSAND() antlr.Token { return s._AMPERSAND }

func (s *Parametro_llamada_referenciaContext) Get_ID() antlr.Token { return s._ID }

func (s *Parametro_llamada_referenciaContext) Set_AMPERSAND(v antlr.Token) { s._AMPERSAND = v }

func (s *Parametro_llamada_referenciaContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *Parametro_llamada_referenciaContext) GetE() IExpresionContext { return s.e }

func (s *Parametro_llamada_referenciaContext) SetE(v IExpresionContext) { s.e = v }

func (s *Parametro_llamada_referenciaContext) GetEx() Ast.Expresion { return s.ex }

func (s *Parametro_llamada_referenciaContext) SetEx(v Ast.Expresion) { s.ex = v }

func (s *Parametro_llamada_referenciaContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Parametro_llamada_referenciaContext) AMPERSAND() antlr.TerminalNode {
	return s.GetToken(NparserAMPERSAND, 0)
}

func (s *Parametro_llamada_referenciaContext) MUT() antlr.TerminalNode {
	return s.GetToken(NparserMUT, 0)
}

func (s *Parametro_llamada_referenciaContext) ID() antlr.TerminalNode {
	return s.GetToken(NparserID, 0)
}

func (s *Parametro_llamada_referenciaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Parametro_llamada_referenciaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Parametro_llamada_referencia() (localctx IParametro_llamada_referenciaContext) {
	localctx = NewParametro_llamada_referenciaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, NparserRULE_parametro_llamada_referencia)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(941)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 32, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(931)

			var _x = p.expresion(0)

			localctx.(*Parametro_llamada_referenciaContext).e = _x
		}

		temp := localctx.(*Parametro_llamada_referenciaContext).GetE().GetEx()
		fila := temp.(Ast.Abstracto).GetFila()
		columna := temp.(Ast.Abstracto).GetColumna()
		localctx.(*Parametro_llamada_referenciaContext).ex = simbolos.NewValor(localctx.(*Parametro_llamada_referenciaContext).GetE().GetEx(), Ast.VALOR, false, false, fila, columna)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(934)

			var _m = p.Match(NparserAMPERSAND)

			localctx.(*Parametro_llamada_referenciaContext)._AMPERSAND = _m
		}
		{
			p.SetState(935)
			p.Match(NparserMUT)
		}
		{
			p.SetState(936)

			var _m = p.Match(NparserID)

			localctx.(*Parametro_llamada_referenciaContext)._ID = _m
		}

		fila := (func() int {
			if localctx.(*Parametro_llamada_referenciaContext).Get_AMPERSAND() == nil {
				return 0
			} else {
				return localctx.(*Parametro_llamada_referenciaContext).Get_AMPERSAND().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Parametro_llamada_referenciaContext).Get_AMPERSAND() == nil {
				return 0
			} else {
				return localctx.(*Parametro_llamada_referenciaContext).Get_AMPERSAND().GetColumn()
			}
		}())
		id := expresiones.NewIdentificador((func() string {
			if localctx.(*Parametro_llamada_referenciaContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Parametro_llamada_referenciaContext).Get_ID().GetText()
			}
		}()), Ast.IDENTIFICADOR, fila, columna)
		localctx.(*Parametro_llamada_referenciaContext).ex = simbolos.NewValor(id, Ast.VALOR, true, true, fila, columna)

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(938)

			var _m = p.Match(NparserAMPERSAND)

			localctx.(*Parametro_llamada_referenciaContext)._AMPERSAND = _m
		}
		{
			p.SetState(939)

			var _m = p.Match(NparserID)

			localctx.(*Parametro_llamada_referenciaContext)._ID = _m
		}

		fila := (func() int {
			if localctx.(*Parametro_llamada_referenciaContext).Get_AMPERSAND() == nil {
				return 0
			} else {
				return localctx.(*Parametro_llamada_referenciaContext).Get_AMPERSAND().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Parametro_llamada_referenciaContext).Get_AMPERSAND() == nil {
				return 0
			} else {
				return localctx.(*Parametro_llamada_referenciaContext).Get_AMPERSAND().GetColumn()
			}
		}())
		id := expresiones.NewIdentificador((func() string {
			if localctx.(*Parametro_llamada_referenciaContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Parametro_llamada_referenciaContext).Get_ID().GetText()
			}
		}()), Ast.IDENTIFICADOR, fila, columna)
		localctx.(*Parametro_llamada_referenciaContext).ex = simbolos.NewValor(id, Ast.VALOR, true, false, fila, columna)

	}

	return localctx
}

// IElementos_vectorContext is an interface to support dynamic dispatch.
type IElementos_vectorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLista_elementos returns the lista_elementos rule contexts.
	GetLista_elementos() IElementos_vectorContext

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// SetLista_elementos sets the lista_elementos rule contexts.
	SetLista_elementos(IElementos_vectorContext)

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsElementos_vectorContext differentiates from other interfaces.
	IsElementos_vectorContext()
}

type Elementos_vectorContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	list            *arraylist.List
	lista_elementos IElementos_vectorContext
	_expresion      IExpresionContext
}

func NewEmptyElementos_vectorContext() *Elementos_vectorContext {
	var p = new(Elementos_vectorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_elementos_vector
	return p
}

func (*Elementos_vectorContext) IsElementos_vectorContext() {}

func NewElementos_vectorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Elementos_vectorContext {
	var p = new(Elementos_vectorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_elementos_vector

	return p
}

func (s *Elementos_vectorContext) GetParser() antlr.Parser { return s.parser }

func (s *Elementos_vectorContext) GetLista_elementos() IElementos_vectorContext {
	return s.lista_elementos
}

func (s *Elementos_vectorContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *Elementos_vectorContext) SetLista_elementos(v IElementos_vectorContext) {
	s.lista_elementos = v
}

func (s *Elementos_vectorContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *Elementos_vectorContext) GetList() *arraylist.List { return s.list }

func (s *Elementos_vectorContext) SetList(v *arraylist.List) { s.list = v }

func (s *Elementos_vectorContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Elementos_vectorContext) COMA() antlr.TerminalNode {
	return s.GetToken(NparserCOMA, 0)
}

func (s *Elementos_vectorContext) Elementos_vector() IElementos_vectorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementos_vectorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementos_vectorContext)
}

func (s *Elementos_vectorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Elementos_vectorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Elementos_vector() (localctx IElementos_vectorContext) {
	return p.elementos_vector(0)
}

func (p *Nparser) elementos_vector(_p int) (localctx IElementos_vectorContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewElementos_vectorContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IElementos_vectorContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 90
	p.EnterRecursionRule(localctx, 90, NparserRULE_elementos_vector, _p)
	localctx.(*Elementos_vectorContext).list = arraylist.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(944)

		var _x = p.expresion(0)

		localctx.(*Elementos_vectorContext)._expresion = _x
	}

	localctx.(*Elementos_vectorContext).list.Add(localctx.(*Elementos_vectorContext).Get_expresion().GetEx())

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(954)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 33, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewElementos_vectorContext(p, _parentctx, _parentState)
			localctx.(*Elementos_vectorContext).lista_elementos = _prevctx
			p.PushNewRecursionContext(localctx, _startState, NparserRULE_elementos_vector)
			p.SetState(947)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(948)
				p.Match(NparserCOMA)
			}
			{
				p.SetState(949)

				var _x = p.expresion(0)

				localctx.(*Elementos_vectorContext)._expresion = _x
			}

			localctx.(*Elementos_vectorContext).GetLista_elementos().GetList().Add(localctx.(*Elementos_vectorContext).Get_expresion().GetEx())
			localctx.(*Elementos_vectorContext).list = localctx.(*Elementos_vectorContext).GetLista_elementos().GetList()

		}
		p.SetState(956)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 33, p.GetParserRuleContext())
	}

	return localctx
}

// IMetodos_iniciar_vectorContext is an interface to support dynamic dispatch.
type IMetodos_iniciar_vectorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_VEC returns the _VEC token.
	Get_VEC() antlr.Token

	// Get_VEC_M returns the _VEC_M token.
	Get_VEC_M() antlr.Token

	// Set_VEC sets the _VEC token.
	Set_VEC(antlr.Token)

	// Set_VEC_M sets the _VEC_M token.
	Set_VEC_M(antlr.Token)

	// GetE returns the e rule contexts.
	GetE() IElementos_vectorContext

	// Get_elementos_vector returns the _elementos_vector rule contexts.
	Get_elementos_vector() IElementos_vectorContext

	// GetEx1 returns the ex1 rule contexts.
	GetEx1() IExpresionContext

	// GetEx2 returns the ex2 rule contexts.
	GetEx2() IExpresionContext

	// GetCapacity returns the capacity rule contexts.
	GetCapacity() IExpresionContext

	// SetE sets the e rule contexts.
	SetE(IElementos_vectorContext)

	// Set_elementos_vector sets the _elementos_vector rule contexts.
	Set_elementos_vector(IElementos_vectorContext)

	// SetEx1 sets the ex1 rule contexts.
	SetEx1(IExpresionContext)

	// SetEx2 sets the ex2 rule contexts.
	SetEx2(IExpresionContext)

	// SetCapacity sets the capacity rule contexts.
	SetCapacity(IExpresionContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Expresion

	// SetEx sets the ex attribute.
	SetEx(Ast.Expresion)

	// IsMetodos_iniciar_vectorContext differentiates from other interfaces.
	IsMetodos_iniciar_vectorContext()
}

type Metodos_iniciar_vectorContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	ex                Ast.Expresion
	_VEC              antlr.Token
	_VEC_M            antlr.Token
	e                 IElementos_vectorContext
	_elementos_vector IElementos_vectorContext
	ex1               IExpresionContext
	ex2               IExpresionContext
	capacity          IExpresionContext
}

func NewEmptyMetodos_iniciar_vectorContext() *Metodos_iniciar_vectorContext {
	var p = new(Metodos_iniciar_vectorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_metodos_iniciar_vector
	return p
}

func (*Metodos_iniciar_vectorContext) IsMetodos_iniciar_vectorContext() {}

func NewMetodos_iniciar_vectorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Metodos_iniciar_vectorContext {
	var p = new(Metodos_iniciar_vectorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_metodos_iniciar_vector

	return p
}

func (s *Metodos_iniciar_vectorContext) GetParser() antlr.Parser { return s.parser }

func (s *Metodos_iniciar_vectorContext) Get_VEC() antlr.Token { return s._VEC }

func (s *Metodos_iniciar_vectorContext) Get_VEC_M() antlr.Token { return s._VEC_M }

func (s *Metodos_iniciar_vectorContext) Set_VEC(v antlr.Token) { s._VEC = v }

func (s *Metodos_iniciar_vectorContext) Set_VEC_M(v antlr.Token) { s._VEC_M = v }

func (s *Metodos_iniciar_vectorContext) GetE() IElementos_vectorContext { return s.e }

func (s *Metodos_iniciar_vectorContext) Get_elementos_vector() IElementos_vectorContext {
	return s._elementos_vector
}

func (s *Metodos_iniciar_vectorContext) GetEx1() IExpresionContext { return s.ex1 }

func (s *Metodos_iniciar_vectorContext) GetEx2() IExpresionContext { return s.ex2 }

func (s *Metodos_iniciar_vectorContext) GetCapacity() IExpresionContext { return s.capacity }

func (s *Metodos_iniciar_vectorContext) SetE(v IElementos_vectorContext) { s.e = v }

func (s *Metodos_iniciar_vectorContext) Set_elementos_vector(v IElementos_vectorContext) {
	s._elementos_vector = v
}

func (s *Metodos_iniciar_vectorContext) SetEx1(v IExpresionContext) { s.ex1 = v }

func (s *Metodos_iniciar_vectorContext) SetEx2(v IExpresionContext) { s.ex2 = v }

func (s *Metodos_iniciar_vectorContext) SetCapacity(v IExpresionContext) { s.capacity = v }

func (s *Metodos_iniciar_vectorContext) GetEx() Ast.Expresion { return s.ex }

func (s *Metodos_iniciar_vectorContext) SetEx(v Ast.Expresion) { s.ex = v }

func (s *Metodos_iniciar_vectorContext) VEC() antlr.TerminalNode {
	return s.GetToken(NparserVEC, 0)
}

func (s *Metodos_iniciar_vectorContext) DOBLE_DOSPUNTOS() antlr.TerminalNode {
	return s.GetToken(NparserDOBLE_DOSPUNTOS, 0)
}

func (s *Metodos_iniciar_vectorContext) NEW() antlr.TerminalNode {
	return s.GetToken(NparserNEW, 0)
}

func (s *Metodos_iniciar_vectorContext) PAR_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserPAR_IZQ, 0)
}

func (s *Metodos_iniciar_vectorContext) PAR_DER() antlr.TerminalNode {
	return s.GetToken(NparserPAR_DER, 0)
}

func (s *Metodos_iniciar_vectorContext) VEC_M() antlr.TerminalNode {
	return s.GetToken(NparserVEC_M, 0)
}

func (s *Metodos_iniciar_vectorContext) NOT() antlr.TerminalNode {
	return s.GetToken(NparserNOT, 0)
}

func (s *Metodos_iniciar_vectorContext) CORCHETE_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserCORCHETE_IZQ, 0)
}

func (s *Metodos_iniciar_vectorContext) CORCHETE_DER() antlr.TerminalNode {
	return s.GetToken(NparserCORCHETE_DER, 0)
}

func (s *Metodos_iniciar_vectorContext) Elementos_vector() IElementos_vectorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementos_vectorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementos_vectorContext)
}

func (s *Metodos_iniciar_vectorContext) PUNTOCOMA() antlr.TerminalNode {
	return s.GetToken(NparserPUNTOCOMA, 0)
}

func (s *Metodos_iniciar_vectorContext) AllExpresion() []IExpresionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpresionContext)(nil)).Elem())
	var tst = make([]IExpresionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpresionContext)
		}
	}

	return tst
}

func (s *Metodos_iniciar_vectorContext) Expresion(i int) IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Metodos_iniciar_vectorContext) WITH_CAPACITY() antlr.TerminalNode {
	return s.GetToken(NparserWITH_CAPACITY, 0)
}

func (s *Metodos_iniciar_vectorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Metodos_iniciar_vectorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Metodos_iniciar_vector() (localctx IMetodos_iniciar_vectorContext) {
	localctx = NewMetodos_iniciar_vectorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, NparserRULE_metodos_iniciar_vector)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(987)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 34, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(957)

			var _m = p.Match(NparserVEC)

			localctx.(*Metodos_iniciar_vectorContext)._VEC = _m
		}
		{
			p.SetState(958)
			p.Match(NparserDOBLE_DOSPUNTOS)
		}
		{
			p.SetState(959)
			p.Match(NparserNEW)
		}
		{
			p.SetState(960)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(961)
			p.Match(NparserPAR_DER)
		}

		fila := (func() int {
			if localctx.(*Metodos_iniciar_vectorContext).Get_VEC() == nil {
				return 0
			} else {
				return localctx.(*Metodos_iniciar_vectorContext).Get_VEC().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Metodos_iniciar_vectorContext).Get_VEC() == nil {
				return 0
			} else {
				return localctx.(*Metodos_iniciar_vectorContext).Get_VEC().GetColumn()
			}
		}())
		localctx.(*Metodos_iniciar_vectorContext).ex = fn_vectores.NewVecNew(fila, columna)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(963)

			var _m = p.Match(NparserVEC_M)

			localctx.(*Metodos_iniciar_vectorContext)._VEC_M = _m
		}
		{
			p.SetState(964)
			p.Match(NparserNOT)
		}
		{
			p.SetState(965)
			p.Match(NparserCORCHETE_IZQ)
		}
		{
			p.SetState(966)

			var _x = p.elementos_vector(0)

			localctx.(*Metodos_iniciar_vectorContext).e = _x
			localctx.(*Metodos_iniciar_vectorContext)._elementos_vector = _x
		}
		{
			p.SetState(967)
			p.Match(NparserCORCHETE_DER)
		}

		fila := (func() int {
			if localctx.(*Metodos_iniciar_vectorContext).Get_VEC_M() == nil {
				return 0
			} else {
				return localctx.(*Metodos_iniciar_vectorContext).Get_VEC_M().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Metodos_iniciar_vectorContext).Get_VEC_M() == nil {
				return 0
			} else {
				return localctx.(*Metodos_iniciar_vectorContext).Get_VEC_M().GetColumn()
			}
		}())
		//listaTemp := localctx.(*Metodos_iniciar_vectorContext).GetE().GetList()
		localctx.(*Metodos_iniciar_vectorContext).ex = fn_vectores.NewVecElementos(localctx.(*Metodos_iniciar_vectorContext).Get_elementos_vector().GetList(), fila, columna)

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(970)

			var _m = p.Match(NparserVEC_M)

			localctx.(*Metodos_iniciar_vectorContext)._VEC_M = _m
		}
		{
			p.SetState(971)
			p.Match(NparserNOT)
		}
		{
			p.SetState(972)
			p.Match(NparserCORCHETE_IZQ)
		}
		{
			p.SetState(973)

			var _x = p.expresion(0)

			localctx.(*Metodos_iniciar_vectorContext).ex1 = _x
		}
		{
			p.SetState(974)
			p.Match(NparserPUNTOCOMA)
		}
		{
			p.SetState(975)

			var _x = p.expresion(0)

			localctx.(*Metodos_iniciar_vectorContext).ex2 = _x
		}
		{
			p.SetState(976)
			p.Match(NparserCORCHETE_DER)
		}

		fila := (func() int {
			if localctx.(*Metodos_iniciar_vectorContext).Get_VEC_M() == nil {
				return 0
			} else {
				return localctx.(*Metodos_iniciar_vectorContext).Get_VEC_M().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Metodos_iniciar_vectorContext).Get_VEC_M() == nil {
				return 0
			} else {
				return localctx.(*Metodos_iniciar_vectorContext).Get_VEC_M().GetColumn()
			}
		}())
		listaTemp := arraylist.New()
		listaTemp.Add(localctx.(*Metodos_iniciar_vectorContext).GetEx1().GetEx())
		listaTemp.Add(localctx.(*Metodos_iniciar_vectorContext).GetEx2().GetEx())
		localctx.(*Metodos_iniciar_vectorContext).ex = fn_vectores.NewVecFactorial(listaTemp, fila, columna)

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(979)

			var _m = p.Match(NparserVEC)

			localctx.(*Metodos_iniciar_vectorContext)._VEC = _m
		}
		{
			p.SetState(980)
			p.Match(NparserDOBLE_DOSPUNTOS)
		}
		{
			p.SetState(981)
			p.Match(NparserWITH_CAPACITY)
		}
		{
			p.SetState(982)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(983)

			var _x = p.expresion(0)

			localctx.(*Metodos_iniciar_vectorContext).capacity = _x
		}
		{
			p.SetState(984)
			p.Match(NparserPAR_DER)
		}

		fila := (func() int {
			if localctx.(*Metodos_iniciar_vectorContext).Get_VEC() == nil {
				return 0
			} else {
				return localctx.(*Metodos_iniciar_vectorContext).Get_VEC().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Metodos_iniciar_vectorContext).Get_VEC() == nil {
				return 0
			} else {
				return localctx.(*Metodos_iniciar_vectorContext).Get_VEC().GetColumn()
			}
		}())
		localctx.(*Metodos_iniciar_vectorContext).ex = fn_vectores.NewVecWithCapacity(localctx.(*Metodos_iniciar_vectorContext).GetCapacity().GetEx(), fila, columna)

	}

	return localctx
}

// IMetodos_vectorContext is an interface to support dynamic dispatch.
type IMetodos_vectorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_PUNTO returns the _PUNTO token.
	Get_PUNTO() antlr.Token

	// Set_PUNTO sets the _PUNTO token.
	Set_PUNTO(antlr.Token)

	// GetId returns the id rule contexts.
	GetId() IExpresionContext

	// GetExp returns the exp rule contexts.
	GetExp() IExpresionContext

	// GetPos returns the pos rule contexts.
	GetPos() IExpresionContext

	// SetId sets the id rule contexts.
	SetId(IExpresionContext)

	// SetExp sets the exp rule contexts.
	SetExp(IExpresionContext)

	// SetPos sets the pos rule contexts.
	SetPos(IExpresionContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsMetodos_vectorContext differentiates from other interfaces.
	IsMetodos_vectorContext()
}

type Metodos_vectorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	ex     Ast.Instruccion
	id     IExpresionContext
	_PUNTO antlr.Token
	exp    IExpresionContext
	pos    IExpresionContext
}

func NewEmptyMetodos_vectorContext() *Metodos_vectorContext {
	var p = new(Metodos_vectorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_metodos_vector
	return p
}

func (*Metodos_vectorContext) IsMetodos_vectorContext() {}

func NewMetodos_vectorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Metodos_vectorContext {
	var p = new(Metodos_vectorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_metodos_vector

	return p
}

func (s *Metodos_vectorContext) GetParser() antlr.Parser { return s.parser }

func (s *Metodos_vectorContext) Get_PUNTO() antlr.Token { return s._PUNTO }

func (s *Metodos_vectorContext) Set_PUNTO(v antlr.Token) { s._PUNTO = v }

func (s *Metodos_vectorContext) GetId() IExpresionContext { return s.id }

func (s *Metodos_vectorContext) GetExp() IExpresionContext { return s.exp }

func (s *Metodos_vectorContext) GetPos() IExpresionContext { return s.pos }

func (s *Metodos_vectorContext) SetId(v IExpresionContext) { s.id = v }

func (s *Metodos_vectorContext) SetExp(v IExpresionContext) { s.exp = v }

func (s *Metodos_vectorContext) SetPos(v IExpresionContext) { s.pos = v }

func (s *Metodos_vectorContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Metodos_vectorContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Metodos_vectorContext) PUNTO() antlr.TerminalNode {
	return s.GetToken(NparserPUNTO, 0)
}

func (s *Metodos_vectorContext) PUSH() antlr.TerminalNode {
	return s.GetToken(NparserPUSH, 0)
}

func (s *Metodos_vectorContext) PAR_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserPAR_IZQ, 0)
}

func (s *Metodos_vectorContext) PAR_DER() antlr.TerminalNode {
	return s.GetToken(NparserPAR_DER, 0)
}

func (s *Metodos_vectorContext) AllExpresion() []IExpresionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpresionContext)(nil)).Elem())
	var tst = make([]IExpresionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpresionContext)
		}
	}

	return tst
}

func (s *Metodos_vectorContext) Expresion(i int) IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Metodos_vectorContext) INSERT() antlr.TerminalNode {
	return s.GetToken(NparserINSERT, 0)
}

func (s *Metodos_vectorContext) COMA() antlr.TerminalNode {
	return s.GetToken(NparserCOMA, 0)
}

func (s *Metodos_vectorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Metodos_vectorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Metodos_vector() (localctx IMetodos_vectorContext) {
	localctx = NewMetodos_vectorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, NparserRULE_metodos_vector)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1007)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 35, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(989)

			var _x = p.expresion(0)

			localctx.(*Metodos_vectorContext).id = _x
		}
		{
			p.SetState(990)

			var _m = p.Match(NparserPUNTO)

			localctx.(*Metodos_vectorContext)._PUNTO = _m
		}
		{
			p.SetState(991)
			p.Match(NparserPUSH)
		}
		{
			p.SetState(992)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(993)

			var _x = p.expresion(0)

			localctx.(*Metodos_vectorContext).exp = _x
		}
		{
			p.SetState(994)
			p.Match(NparserPAR_DER)
		}

		fila := (func() int {
			if localctx.(*Metodos_vectorContext).Get_PUNTO() == nil {
				return 0
			} else {
				return localctx.(*Metodos_vectorContext).Get_PUNTO().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Metodos_vectorContext).Get_PUNTO() == nil {
				return 0
			} else {
				return localctx.(*Metodos_vectorContext).Get_PUNTO().GetColumn()
			}
		}())
		localctx.(*Metodos_vectorContext).ex = fn_vectores.NewPush(localctx.(*Metodos_vectorContext).GetId().GetEx(), localctx.(*Metodos_vectorContext).GetExp().GetEx(), Ast.VEC_PUSH, fila, columna)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(997)

			var _x = p.expresion(0)

			localctx.(*Metodos_vectorContext).id = _x
		}
		{
			p.SetState(998)

			var _m = p.Match(NparserPUNTO)

			localctx.(*Metodos_vectorContext)._PUNTO = _m
		}
		{
			p.SetState(999)
			p.Match(NparserINSERT)
		}
		{
			p.SetState(1000)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(1001)

			var _x = p.expresion(0)

			localctx.(*Metodos_vectorContext).pos = _x
		}
		{
			p.SetState(1002)
			p.Match(NparserCOMA)
		}
		{
			p.SetState(1003)

			var _x = p.expresion(0)

			localctx.(*Metodos_vectorContext).exp = _x
		}
		{
			p.SetState(1004)
			p.Match(NparserPAR_DER)
		}

		fila := (func() int {
			if localctx.(*Metodos_vectorContext).Get_PUNTO() == nil {
				return 0
			} else {
				return localctx.(*Metodos_vectorContext).Get_PUNTO().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Metodos_vectorContext).Get_PUNTO() == nil {
				return 0
			} else {
				return localctx.(*Metodos_vectorContext).Get_PUNTO().GetColumn()
			}
		}())
		localctx.(*Metodos_vectorContext).ex = fn_vectores.NewInsertVec(localctx.(*Metodos_vectorContext).GetId().GetEx(), localctx.(*Metodos_vectorContext).GetExp().GetEx(), localctx.(*Metodos_vectorContext).GetPos().GetEx(), Ast.VEC_INSERT, fila, columna)

	}

	return localctx
}

// IPotenciaContext is an interface to support dynamic dispatch.
type IPotenciaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_DOBLE_DOSPUNTOS returns the _DOBLE_DOSPUNTOS token.
	Get_DOBLE_DOSPUNTOS() antlr.Token

	// Set_DOBLE_DOSPUNTOS sets the _DOBLE_DOSPUNTOS token.
	Set_DOBLE_DOSPUNTOS(antlr.Token)

	// GetVal returns the val rule contexts.
	GetVal() IExpresionContext

	// GetPot returns the pot rule contexts.
	GetPot() IExpresionContext

	// SetVal sets the val rule contexts.
	SetVal(IExpresionContext)

	// SetPot sets the pot rule contexts.
	SetPot(IExpresionContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Expresion

	// SetEx sets the ex attribute.
	SetEx(Ast.Expresion)

	// IsPotenciaContext differentiates from other interfaces.
	IsPotenciaContext()
}

type PotenciaContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	ex               Ast.Expresion
	_DOBLE_DOSPUNTOS antlr.Token
	val              IExpresionContext
	pot              IExpresionContext
}

func NewEmptyPotenciaContext() *PotenciaContext {
	var p = new(PotenciaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_potencia
	return p
}

func (*PotenciaContext) IsPotenciaContext() {}

func NewPotenciaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PotenciaContext {
	var p = new(PotenciaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_potencia

	return p
}

func (s *PotenciaContext) GetParser() antlr.Parser { return s.parser }

func (s *PotenciaContext) Get_DOBLE_DOSPUNTOS() antlr.Token { return s._DOBLE_DOSPUNTOS }

func (s *PotenciaContext) Set_DOBLE_DOSPUNTOS(v antlr.Token) { s._DOBLE_DOSPUNTOS = v }

func (s *PotenciaContext) GetVal() IExpresionContext { return s.val }

func (s *PotenciaContext) GetPot() IExpresionContext { return s.pot }

func (s *PotenciaContext) SetVal(v IExpresionContext) { s.val = v }

func (s *PotenciaContext) SetPot(v IExpresionContext) { s.pot = v }

func (s *PotenciaContext) GetEx() Ast.Expresion { return s.ex }

func (s *PotenciaContext) SetEx(v Ast.Expresion) { s.ex = v }

func (s *PotenciaContext) I64() antlr.TerminalNode {
	return s.GetToken(NparserI64, 0)
}

func (s *PotenciaContext) DOBLE_DOSPUNTOS() antlr.TerminalNode {
	return s.GetToken(NparserDOBLE_DOSPUNTOS, 0)
}

func (s *PotenciaContext) POW() antlr.TerminalNode {
	return s.GetToken(NparserPOW, 0)
}

func (s *PotenciaContext) PAR_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserPAR_IZQ, 0)
}

func (s *PotenciaContext) COMA() antlr.TerminalNode {
	return s.GetToken(NparserCOMA, 0)
}

func (s *PotenciaContext) PAR_DER() antlr.TerminalNode {
	return s.GetToken(NparserPAR_DER, 0)
}

func (s *PotenciaContext) AllExpresion() []IExpresionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpresionContext)(nil)).Elem())
	var tst = make([]IExpresionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpresionContext)
		}
	}

	return tst
}

func (s *PotenciaContext) Expresion(i int) IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *PotenciaContext) F64() antlr.TerminalNode {
	return s.GetToken(NparserF64, 0)
}

func (s *PotenciaContext) POWF() antlr.TerminalNode {
	return s.GetToken(NparserPOWF, 0)
}

func (s *PotenciaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PotenciaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Potencia() (localctx IPotenciaContext) {
	localctx = NewPotenciaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, NparserRULE_potencia)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1029)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case NparserI64:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1009)
			p.Match(NparserI64)
		}
		{
			p.SetState(1010)

			var _m = p.Match(NparserDOBLE_DOSPUNTOS)

			localctx.(*PotenciaContext)._DOBLE_DOSPUNTOS = _m
		}
		{
			p.SetState(1011)
			p.Match(NparserPOW)
		}
		{
			p.SetState(1012)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(1013)

			var _x = p.expresion(0)

			localctx.(*PotenciaContext).val = _x
		}
		{
			p.SetState(1014)
			p.Match(NparserCOMA)
		}
		{
			p.SetState(1015)

			var _x = p.expresion(0)

			localctx.(*PotenciaContext).pot = _x
		}
		{
			p.SetState(1016)
			p.Match(NparserPAR_DER)
		}

		fila := (func() int {
			if localctx.(*PotenciaContext).Get_DOBLE_DOSPUNTOS() == nil {
				return 0
			} else {
				return localctx.(*PotenciaContext).Get_DOBLE_DOSPUNTOS().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*PotenciaContext).Get_DOBLE_DOSPUNTOS() == nil {
				return 0
			} else {
				return localctx.(*PotenciaContext).Get_DOBLE_DOSPUNTOS().GetColumn()
			}
		}()) - 1
		localctx.(*PotenciaContext).ex = expresiones.NewPow(Ast.POW, Ast.I64, localctx.(*PotenciaContext).GetVal().GetEx(), localctx.(*PotenciaContext).GetPot().GetEx(), fila, columna)

	case NparserF64:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1019)
			p.Match(NparserF64)
		}
		{
			p.SetState(1020)

			var _m = p.Match(NparserDOBLE_DOSPUNTOS)

			localctx.(*PotenciaContext)._DOBLE_DOSPUNTOS = _m
		}
		{
			p.SetState(1021)
			p.Match(NparserPOWF)
		}
		{
			p.SetState(1022)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(1023)

			var _x = p.expresion(0)

			localctx.(*PotenciaContext).val = _x
		}
		{
			p.SetState(1024)
			p.Match(NparserCOMA)
		}
		{
			p.SetState(1025)

			var _x = p.expresion(0)

			localctx.(*PotenciaContext).pot = _x
		}
		{
			p.SetState(1026)
			p.Match(NparserPAR_DER)
		}

		fila := (func() int {
			if localctx.(*PotenciaContext).Get_DOBLE_DOSPUNTOS() == nil {
				return 0
			} else {
				return localctx.(*PotenciaContext).Get_DOBLE_DOSPUNTOS().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*PotenciaContext).Get_DOBLE_DOSPUNTOS() == nil {
				return 0
			} else {
				return localctx.(*PotenciaContext).Get_DOBLE_DOSPUNTOS().GetColumn()
			}
		}()) - 1
		localctx.(*PotenciaContext).ex = expresiones.NewPow(Ast.POW, Ast.F64, localctx.(*PotenciaContext).GetVal().GetEx(), localctx.(*PotenciaContext).GetPot().GetEx(), fila, columna)

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IArrayContext is an interface to support dynamic dispatch.
type IArrayContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_CORCHETE_IZQ returns the _CORCHETE_IZQ token.
	Get_CORCHETE_IZQ() antlr.Token

	// Set_CORCHETE_IZQ sets the _CORCHETE_IZQ token.
	Set_CORCHETE_IZQ(antlr.Token)

	// GetElementos returns the elementos rule contexts.
	GetElementos() IElementos_vectorContext

	// Get_elementos_vector returns the _elementos_vector rule contexts.
	Get_elementos_vector() IElementos_vectorContext

	// GetElemento returns the elemento rule contexts.
	GetElemento() IExpresionContext

	// GetSerie returns the serie rule contexts.
	GetSerie() IExpresionContext

	// SetElementos sets the elementos rule contexts.
	SetElementos(IElementos_vectorContext)

	// Set_elementos_vector sets the _elementos_vector rule contexts.
	Set_elementos_vector(IElementos_vectorContext)

	// SetElemento sets the elemento rule contexts.
	SetElemento(IExpresionContext)

	// SetSerie sets the serie rule contexts.
	SetSerie(IExpresionContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Expresion

	// SetEx sets the ex attribute.
	SetEx(Ast.Expresion)

	// IsArrayContext differentiates from other interfaces.
	IsArrayContext()
}

type ArrayContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	ex                Ast.Expresion
	_CORCHETE_IZQ     antlr.Token
	elementos         IElementos_vectorContext
	_elementos_vector IElementos_vectorContext
	elemento          IExpresionContext
	serie             IExpresionContext
}

func NewEmptyArrayContext() *ArrayContext {
	var p = new(ArrayContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_array
	return p
}

func (*ArrayContext) IsArrayContext() {}

func NewArrayContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayContext {
	var p = new(ArrayContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_array

	return p
}

func (s *ArrayContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayContext) Get_CORCHETE_IZQ() antlr.Token { return s._CORCHETE_IZQ }

func (s *ArrayContext) Set_CORCHETE_IZQ(v antlr.Token) { s._CORCHETE_IZQ = v }

func (s *ArrayContext) GetElementos() IElementos_vectorContext { return s.elementos }

func (s *ArrayContext) Get_elementos_vector() IElementos_vectorContext { return s._elementos_vector }

func (s *ArrayContext) GetElemento() IExpresionContext { return s.elemento }

func (s *ArrayContext) GetSerie() IExpresionContext { return s.serie }

func (s *ArrayContext) SetElementos(v IElementos_vectorContext) { s.elementos = v }

func (s *ArrayContext) Set_elementos_vector(v IElementos_vectorContext) { s._elementos_vector = v }

func (s *ArrayContext) SetElemento(v IExpresionContext) { s.elemento = v }

func (s *ArrayContext) SetSerie(v IExpresionContext) { s.serie = v }

func (s *ArrayContext) GetEx() Ast.Expresion { return s.ex }

func (s *ArrayContext) SetEx(v Ast.Expresion) { s.ex = v }

func (s *ArrayContext) CORCHETE_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserCORCHETE_IZQ, 0)
}

func (s *ArrayContext) CORCHETE_DER() antlr.TerminalNode {
	return s.GetToken(NparserCORCHETE_DER, 0)
}

func (s *ArrayContext) Elementos_vector() IElementos_vectorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementos_vectorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementos_vectorContext)
}

func (s *ArrayContext) PUNTOCOMA() antlr.TerminalNode {
	return s.GetToken(NparserPUNTOCOMA, 0)
}

func (s *ArrayContext) AllExpresion() []IExpresionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpresionContext)(nil)).Elem())
	var tst = make([]IExpresionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpresionContext)
		}
	}

	return tst
}

func (s *ArrayContext) Expresion(i int) IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *ArrayContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Array() (localctx IArrayContext) {
	localctx = NewArrayContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, NparserRULE_array)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1043)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 37, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1031)

			var _m = p.Match(NparserCORCHETE_IZQ)

			localctx.(*ArrayContext)._CORCHETE_IZQ = _m
		}
		{
			p.SetState(1032)

			var _x = p.elementos_vector(0)

			localctx.(*ArrayContext).elementos = _x
			localctx.(*ArrayContext)._elementos_vector = _x
		}
		{
			p.SetState(1033)
			p.Match(NparserCORCHETE_DER)
		}

		fila := (func() int {
			if localctx.(*ArrayContext).Get_CORCHETE_IZQ() == nil {
				return 0
			} else {
				return localctx.(*ArrayContext).Get_CORCHETE_IZQ().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ArrayContext).Get_CORCHETE_IZQ() == nil {
				return 0
			} else {
				return localctx.(*ArrayContext).Get_CORCHETE_IZQ().GetColumn()
			}
		}())
		localctx.(*ArrayContext).ex = fn_array.NewArrayElementos(localctx.(*ArrayContext).Get_elementos_vector().GetList(), fila, columna)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1036)

			var _m = p.Match(NparserCORCHETE_IZQ)

			localctx.(*ArrayContext)._CORCHETE_IZQ = _m
		}
		{
			p.SetState(1037)

			var _x = p.expresion(0)

			localctx.(*ArrayContext).elemento = _x
		}
		{
			p.SetState(1038)
			p.Match(NparserPUNTOCOMA)
		}
		{
			p.SetState(1039)

			var _x = p.expresion(0)

			localctx.(*ArrayContext).serie = _x
		}
		{
			p.SetState(1040)
			p.Match(NparserCORCHETE_DER)
		}

		fila := (func() int {
			if localctx.(*ArrayContext).Get_CORCHETE_IZQ() == nil {
				return 0
			} else {
				return localctx.(*ArrayContext).Get_CORCHETE_IZQ().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ArrayContext).Get_CORCHETE_IZQ() == nil {
				return 0
			} else {
				return localctx.(*ArrayContext).Get_CORCHETE_IZQ().GetColumn()
			}
		}())
		listaTemp := arraylist.New()
		listaTemp.Add(localctx.(*ArrayContext).GetElemento().GetEx())
		listaTemp.Add(localctx.(*ArrayContext).GetSerie().GetEx())
		localctx.(*ArrayContext).ex = fn_array.NewArrayFactorial(listaTemp, fila, columna)

	}

	return localctx
}

// IDimension_arrayContext is an interface to support dynamic dispatch.
type IDimension_arrayContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_CORCHETE_IZQ returns the _CORCHETE_IZQ token.
	Get_CORCHETE_IZQ() antlr.Token

	// Set_CORCHETE_IZQ sets the _CORCHETE_IZQ token.
	Set_CORCHETE_IZQ(antlr.Token)

	// GetLista_elementos returns the lista_elementos rule contexts.
	GetLista_elementos() IDimension_arrayContext

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// Get_tipo_dato returns the _tipo_dato rule contexts.
	Get_tipo_dato() ITipo_datoContext

	// SetLista_elementos sets the lista_elementos rule contexts.
	SetLista_elementos(IDimension_arrayContext)

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// Set_tipo_dato sets the _tipo_dato rule contexts.
	Set_tipo_dato(ITipo_datoContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Expresion

	// SetEx sets the ex attribute.
	SetEx(Ast.Expresion)

	// IsDimension_arrayContext differentiates from other interfaces.
	IsDimension_arrayContext()
}

type Dimension_arrayContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	ex              Ast.Expresion
	lista_elementos IDimension_arrayContext
	_expresion      IExpresionContext
	_CORCHETE_IZQ   antlr.Token
	_tipo_dato      ITipo_datoContext
}

func NewEmptyDimension_arrayContext() *Dimension_arrayContext {
	var p = new(Dimension_arrayContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_dimension_array
	return p
}

func (*Dimension_arrayContext) IsDimension_arrayContext() {}

func NewDimension_arrayContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dimension_arrayContext {
	var p = new(Dimension_arrayContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_dimension_array

	return p
}

func (s *Dimension_arrayContext) GetParser() antlr.Parser { return s.parser }

func (s *Dimension_arrayContext) Get_CORCHETE_IZQ() antlr.Token { return s._CORCHETE_IZQ }

func (s *Dimension_arrayContext) Set_CORCHETE_IZQ(v antlr.Token) { s._CORCHETE_IZQ = v }

func (s *Dimension_arrayContext) GetLista_elementos() IDimension_arrayContext {
	return s.lista_elementos
}

func (s *Dimension_arrayContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *Dimension_arrayContext) Get_tipo_dato() ITipo_datoContext { return s._tipo_dato }

func (s *Dimension_arrayContext) SetLista_elementos(v IDimension_arrayContext) { s.lista_elementos = v }

func (s *Dimension_arrayContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *Dimension_arrayContext) Set_tipo_dato(v ITipo_datoContext) { s._tipo_dato = v }

func (s *Dimension_arrayContext) GetEx() Ast.Expresion { return s.ex }

func (s *Dimension_arrayContext) SetEx(v Ast.Expresion) { s.ex = v }

func (s *Dimension_arrayContext) CORCHETE_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserCORCHETE_IZQ, 0)
}

func (s *Dimension_arrayContext) PUNTOCOMA() antlr.TerminalNode {
	return s.GetToken(NparserPUNTOCOMA, 0)
}

func (s *Dimension_arrayContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Dimension_arrayContext) CORCHETE_DER() antlr.TerminalNode {
	return s.GetToken(NparserCORCHETE_DER, 0)
}

func (s *Dimension_arrayContext) Dimension_array() IDimension_arrayContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDimension_arrayContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDimension_arrayContext)
}

func (s *Dimension_arrayContext) Tipo_dato() ITipo_datoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipo_datoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipo_datoContext)
}

func (s *Dimension_arrayContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dimension_arrayContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Dimension_array() (localctx IDimension_arrayContext) {
	localctx = NewDimension_arrayContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, NparserRULE_dimension_array)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1059)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 38, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1045)
			p.Match(NparserCORCHETE_IZQ)
		}
		{
			p.SetState(1046)

			var _x = p.Dimension_array()

			localctx.(*Dimension_arrayContext).lista_elementos = _x
		}
		{
			p.SetState(1047)
			p.Match(NparserPUNTOCOMA)
		}
		{
			p.SetState(1048)

			var _x = p.expresion(0)

			localctx.(*Dimension_arrayContext)._expresion = _x
		}
		{
			p.SetState(1049)
			p.Match(NparserCORCHETE_DER)
		}

		dimension := localctx.(*Dimension_arrayContext).GetLista_elementos().GetEx()
		dimension.(expresiones.DimensionArray).Elementos.Add(localctx.(*Dimension_arrayContext).Get_expresion().GetEx())
		localctx.(*Dimension_arrayContext).ex = dimension

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1052)

			var _m = p.Match(NparserCORCHETE_IZQ)

			localctx.(*Dimension_arrayContext)._CORCHETE_IZQ = _m
		}
		{
			p.SetState(1053)

			var _x = p.Tipo_dato()

			localctx.(*Dimension_arrayContext)._tipo_dato = _x
		}
		{
			p.SetState(1054)
			p.Match(NparserPUNTOCOMA)
		}
		{
			p.SetState(1055)

			var _x = p.expresion(0)

			localctx.(*Dimension_arrayContext)._expresion = _x
		}
		{
			p.SetState(1056)
			p.Match(NparserCORCHETE_DER)
		}

		fila := (func() int {
			if localctx.(*Dimension_arrayContext).Get_CORCHETE_IZQ() == nil {
				return 0
			} else {
				return localctx.(*Dimension_arrayContext).Get_CORCHETE_IZQ().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Dimension_arrayContext).Get_CORCHETE_IZQ() == nil {
				return 0
			} else {
				return localctx.(*Dimension_arrayContext).Get_CORCHETE_IZQ().GetColumn()
			}
		}())
		listaD := arraylist.New()
		listaD.Add(localctx.(*Dimension_arrayContext).Get_expresion().GetEx())
		localctx.(*Dimension_arrayContext).ex = expresiones.NewDimensionArray(listaD, localctx.(*Dimension_arrayContext).Get_tipo_dato().GetEx(), fila, columna)

	}

	return localctx
}

// IDimension_acceso_arrayContext is an interface to support dynamic dispatch.
type IDimension_acceso_arrayContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLista_elementos returns the lista_elementos rule contexts.
	GetLista_elementos() IDimension_acceso_arrayContext

	// GetEx1 returns the ex1 rule contexts.
	GetEx1() IExpresionContext

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// GetEx2 returns the ex2 rule contexts.
	GetEx2() IExpresionContext

	// SetLista_elementos sets the lista_elementos rule contexts.
	SetLista_elementos(IDimension_acceso_arrayContext)

	// SetEx1 sets the ex1 rule contexts.
	SetEx1(IExpresionContext)

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// SetEx2 sets the ex2 rule contexts.
	SetEx2(IExpresionContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsDimension_acceso_arrayContext differentiates from other interfaces.
	IsDimension_acceso_arrayContext()
}

type Dimension_acceso_arrayContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	list            *arraylist.List
	lista_elementos IDimension_acceso_arrayContext
	ex1             IExpresionContext
	_expresion      IExpresionContext
	ex2             IExpresionContext
}

func NewEmptyDimension_acceso_arrayContext() *Dimension_acceso_arrayContext {
	var p = new(Dimension_acceso_arrayContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_dimension_acceso_array
	return p
}

func (*Dimension_acceso_arrayContext) IsDimension_acceso_arrayContext() {}

func NewDimension_acceso_arrayContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dimension_acceso_arrayContext {
	var p = new(Dimension_acceso_arrayContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_dimension_acceso_array

	return p
}

func (s *Dimension_acceso_arrayContext) GetParser() antlr.Parser { return s.parser }

func (s *Dimension_acceso_arrayContext) GetLista_elementos() IDimension_acceso_arrayContext {
	return s.lista_elementos
}

func (s *Dimension_acceso_arrayContext) GetEx1() IExpresionContext { return s.ex1 }

func (s *Dimension_acceso_arrayContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *Dimension_acceso_arrayContext) GetEx2() IExpresionContext { return s.ex2 }

func (s *Dimension_acceso_arrayContext) SetLista_elementos(v IDimension_acceso_arrayContext) {
	s.lista_elementos = v
}

func (s *Dimension_acceso_arrayContext) SetEx1(v IExpresionContext) { s.ex1 = v }

func (s *Dimension_acceso_arrayContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *Dimension_acceso_arrayContext) SetEx2(v IExpresionContext) { s.ex2 = v }

func (s *Dimension_acceso_arrayContext) GetList() *arraylist.List { return s.list }

func (s *Dimension_acceso_arrayContext) SetList(v *arraylist.List) { s.list = v }

func (s *Dimension_acceso_arrayContext) AllCORCHETE_IZQ() []antlr.TerminalNode {
	return s.GetTokens(NparserCORCHETE_IZQ)
}

func (s *Dimension_acceso_arrayContext) CORCHETE_IZQ(i int) antlr.TerminalNode {
	return s.GetToken(NparserCORCHETE_IZQ, i)
}

func (s *Dimension_acceso_arrayContext) AllCORCHETE_DER() []antlr.TerminalNode {
	return s.GetTokens(NparserCORCHETE_DER)
}

func (s *Dimension_acceso_arrayContext) CORCHETE_DER(i int) antlr.TerminalNode {
	return s.GetToken(NparserCORCHETE_DER, i)
}

func (s *Dimension_acceso_arrayContext) AllExpresion() []IExpresionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpresionContext)(nil)).Elem())
	var tst = make([]IExpresionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpresionContext)
		}
	}

	return tst
}

func (s *Dimension_acceso_arrayContext) Expresion(i int) IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Dimension_acceso_arrayContext) Dimension_acceso_array() IDimension_acceso_arrayContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDimension_acceso_arrayContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDimension_acceso_arrayContext)
}

func (s *Dimension_acceso_arrayContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dimension_acceso_arrayContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (p *Nparser) Dimension_acceso_array() (localctx IDimension_acceso_arrayContext) {
	return p.dimension_acceso_array(0)
}

func (p *Nparser) dimension_acceso_array(_p int) (localctx IDimension_acceso_arrayContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewDimension_acceso_arrayContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IDimension_acceso_arrayContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 102
	p.EnterRecursionRule(localctx, 102, NparserRULE_dimension_acceso_array, _p)
	localctx.(*Dimension_acceso_arrayContext).list = arraylist.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1062)
		p.Match(NparserCORCHETE_IZQ)
	}
	{
		p.SetState(1063)

		var _x = p.expresion(0)

		localctx.(*Dimension_acceso_arrayContext).ex1 = _x
		localctx.(*Dimension_acceso_arrayContext)._expresion = _x
	}
	{
		p.SetState(1064)
		p.Match(NparserCORCHETE_DER)
	}
	{
		p.SetState(1065)
		p.Match(NparserCORCHETE_IZQ)
	}
	{
		p.SetState(1066)

		var _x = p.expresion(0)

		localctx.(*Dimension_acceso_arrayContext).ex2 = _x
		localctx.(*Dimension_acceso_arrayContext)._expresion = _x
	}
	{
		p.SetState(1067)
		p.Match(NparserCORCHETE_DER)
	}

	localctx.(*Dimension_acceso_arrayContext).list.Add(localctx.(*Dimension_acceso_arrayContext).GetEx1().GetEx())
	localctx.(*Dimension_acceso_arrayContext).list.Add(localctx.(*Dimension_acceso_arrayContext).GetEx2().GetEx())

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1078)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 39, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewDimension_acceso_arrayContext(p, _parentctx, _parentState)
			localctx.(*Dimension_acceso_arrayContext).lista_elementos = _prevctx
			p.PushNewRecursionContext(localctx, _startState, NparserRULE_dimension_acceso_array)
			p.SetState(1070)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(1071)
				p.Match(NparserCORCHETE_IZQ)
			}
			{
				p.SetState(1072)

				var _x = p.expresion(0)

				localctx.(*Dimension_acceso_arrayContext)._expresion = _x
			}
			{
				p.SetState(1073)
				p.Match(NparserCORCHETE_DER)
			}

			localctx.(*Dimension_acceso_arrayContext).GetLista_elementos().GetList().Add(localctx.(*Dimension_acceso_arrayContext).Get_expresion().GetEx())
			localctx.(*Dimension_acceso_arrayContext).list = localctx.(*Dimension_acceso_arrayContext).GetLista_elementos().GetList()

		}
		p.SetState(1080)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 39, p.GetParserRuleContext())
	}

	return localctx
}

func (p *Nparser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 6:
		var t *Atributos_struct_templateContext = nil
		if localctx != nil {
			t = localctx.(*Atributos_struct_templateContext)
		}
		return p.Atributos_struct_template_Sempred(t, predIndex)

	case 9:
		var t *Atributos_struct_instanciaContext = nil
		if localctx != nil {
			t = localctx.(*Atributos_struct_instanciaContext)
		}
		return p.Atributos_struct_instancia_Sempred(t, predIndex)

	case 14:
		var t *ExpresionContext = nil
		if localctx != nil {
			t = localctx.(*ExpresionContext)
		}
		return p.Expresion_Sempred(t, predIndex)

	case 26:
		var t *Case_matchContext = nil
		if localctx != nil {
			t = localctx.(*Case_matchContext)
		}
		return p.Case_match_Sempred(t, predIndex)

	case 30:
		var t *Case_match_expContext = nil
		if localctx != nil {
			t = localctx.(*Case_match_expContext)
		}
		return p.Case_match_exp_Sempred(t, predIndex)

	case 38:
		var t *ElementosPrintContext = nil
		if localctx != nil {
			t = localctx.(*ElementosPrintContext)
		}
		return p.ElementosPrint_Sempred(t, predIndex)

	case 40:
		var t *Parametros_funcionContext = nil
		if localctx != nil {
			t = localctx.(*Parametros_funcionContext)
		}
		return p.Parametros_funcion_Sempred(t, predIndex)

	case 43:
		var t *Parametros_llamadaContext = nil
		if localctx != nil {
			t = localctx.(*Parametros_llamadaContext)
		}
		return p.Parametros_llamada_Sempred(t, predIndex)

	case 45:
		var t *Elementos_vectorContext = nil
		if localctx != nil {
			t = localctx.(*Elementos_vectorContext)
		}
		return p.Elementos_vector_Sempred(t, predIndex)

	case 51:
		var t *Dimension_acceso_arrayContext = nil
		if localctx != nil {
			t = localctx.(*Dimension_acceso_arrayContext)
		}
		return p.Dimension_acceso_array_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *Nparser) Atributos_struct_template_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Nparser) Atributos_struct_instancia_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 1:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Nparser) Expresion_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 2:
		return p.Precpred(p.GetParserRuleContext(), 26)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 25)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 24)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 23)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 22)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 21)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 29)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 28)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 27)

	case 11:
		return p.Precpred(p.GetParserRuleContext(), 13)

	case 12:
		return p.Precpred(p.GetParserRuleContext(), 12)

	case 13:
		return p.Precpred(p.GetParserRuleContext(), 11)

	case 14:
		return p.Precpred(p.GetParserRuleContext(), 10)

	case 15:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 16:
		return p.Precpred(p.GetParserRuleContext(), 8)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Nparser) Case_match_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 17:
		return p.Precpred(p.GetParserRuleContext(), 3)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Nparser) Case_match_exp_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 18:
		return p.Precpred(p.GetParserRuleContext(), 3)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Nparser) ElementosPrint_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 19:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Nparser) Parametros_funcion_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 20:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Nparser) Parametros_llamada_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 21:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Nparser) Elementos_vector_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 22:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Nparser) Dimension_acceso_array_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 23:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
