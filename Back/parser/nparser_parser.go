// Code generated from Nparser.g4 by ANTLR 4.9.3. DO NOT EDIT.

package parser // Nparser

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

import "github.com/colegno/arraylist"
import "Back/analizador/Ast"
import "Back/analizador/expresiones"
import "Back/analizador/instrucciones"
import "Back/analizador/exp_ins"
import "Back/analizador/transferencia"
import "Back/analizador/bucles"
import "Back/analizador/Ast/simbolos"
import "Back/analizador/fn_primitivas"
import "Back/analizador/fn_vectores"
import "Back/analizador/fn_array"

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 91, 1321,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65,
	4, 66, 9, 66, 4, 67, 9, 67, 3, 2, 3, 2, 3, 2, 3, 3, 7, 3, 139, 10, 3, 12,
	3, 14, 3, 142, 11, 3, 3, 3, 3, 3, 3, 4, 7, 4, 147, 10, 4, 12, 4, 14, 4,
	150, 11, 4, 3, 4, 3, 4, 3, 5, 7, 5, 155, 10, 5, 12, 5, 14, 5, 158, 11,
	5, 3, 5, 3, 5, 3, 6, 7, 6, 163, 10, 6, 12, 6, 14, 6, 166, 11, 6, 3, 6,
	3, 6, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 9,
	3, 9, 3, 9, 3, 9, 3, 9, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10,
	3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 5, 10, 197, 10, 10, 3, 11, 3, 11, 3,
	11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 5, 11, 208, 10, 11, 3, 12,
	3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3,
	12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12,
	3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3,
	12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12,
	3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 5, 12, 262,
	10, 12, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13,
	3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3,
	13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13,
	3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3,
	13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13,
	3, 13, 3, 13, 3, 13, 3, 13, 5, 13, 319, 10, 13, 3, 14, 3, 14, 3, 14, 3,
	14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14,
	5, 14, 335, 10, 14, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3,
	15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15,
	3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3,
	15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15,
	3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3,
	15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15,
	3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3,
	15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15,
	3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3,
	15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15,
	3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3,
	15, 3, 15, 5, 15, 451, 10, 15, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16,
	3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 5, 16, 468,
	10, 16, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17,
	7, 17, 479, 10, 17, 12, 17, 14, 17, 482, 11, 17, 3, 18, 3, 18, 3, 18, 3,
	18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 5, 18, 495, 10, 18,
	3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3,
	19, 3, 19, 5, 19, 509, 10, 19, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20,
	3, 20, 3, 20, 3, 20, 7, 20, 520, 10, 20, 12, 20, 14, 20, 523, 11, 20, 3,
	21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22,
	3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 5, 22, 541, 10, 22, 3, 23, 3, 23, 3,
	23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23,
	3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3,
	23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23,
	3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3,
	23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23,
	3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3,
	23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 5, 23, 615, 10, 23, 3, 24,
	3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3,
	24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24,
	3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3,
	24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 5, 24, 656, 10, 24, 3, 25,
	3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3,
	25, 5, 25, 670, 10, 25, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26,
	3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3,
	26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26,
	3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3,
	26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26,
	5, 26, 721, 10, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3,
	26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26,
	3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3,
	26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26,
	3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3,
	26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26,
	3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3,
	26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26,
	3, 26, 3, 26, 3, 26, 3, 26, 7, 26, 808, 10, 26, 12, 26, 14, 26, 811, 11,
	26, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27,
	3, 27, 3, 27, 3, 27, 3, 27, 5, 27, 827, 10, 27, 3, 28, 3, 28, 3, 28, 3,
	28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28,
	3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3,
	28, 3, 28, 5, 28, 855, 10, 28, 3, 29, 6, 29, 858, 10, 29, 13, 29, 14, 29,
	859, 3, 29, 3, 29, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 31, 3,
	31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31,
	3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3,
	31, 3, 31, 3, 31, 3, 31, 5, 31, 896, 10, 31, 3, 32, 6, 32, 899, 10, 32,
	13, 32, 14, 32, 900, 3, 32, 3, 32, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3,
	33, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 5, 34,
	920, 10, 34, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 36, 6,
	36, 930, 10, 36, 13, 36, 14, 36, 931, 3, 36, 3, 36, 3, 37, 3, 37, 3, 37,
	3, 37, 3, 37, 3, 37, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 5, 38, 948,
	10, 38, 3, 38, 3, 38, 3, 38, 3, 38, 3, 38, 7, 38, 955, 10, 38, 12, 38,
	14, 38, 958, 11, 38, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 3,
	40, 6, 40, 968, 10, 40, 13, 40, 14, 40, 969, 3, 40, 3, 40, 3, 41, 3, 41,
	3, 41, 3, 41, 3, 41, 3, 41, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 5,
	42, 986, 10, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 7, 42, 993, 10, 42,
	12, 42, 14, 42, 996, 11, 42, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43,
	5, 43, 1004, 10, 43, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 5, 44, 1012,
	10, 44, 3, 45, 3, 45, 3, 45, 3, 46, 3, 46, 3, 46, 3, 46, 3, 47, 3, 47,
	3, 47, 3, 47, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 49, 3, 49, 3,
	49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50,
	3, 50, 3, 50, 3, 50, 3, 50, 7, 50, 1048, 10, 50, 12, 50, 14, 50, 1051,
	11, 50, 3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 3, 52, 3, 52, 3, 52, 3, 52,
	3, 52, 3, 52, 3, 52, 3, 52, 3, 52, 7, 52, 1067, 10, 52, 12, 52, 14, 52,
	1070, 11, 52, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3,
	53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53,
	3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3,
	53, 5, 53, 1102, 10, 53, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54,
	3, 54, 3, 54, 3, 54, 5, 54, 1114, 10, 54, 3, 55, 3, 55, 3, 55, 3, 55, 3,
	55, 3, 55, 3, 55, 3, 55, 3, 55, 7, 55, 1125, 10, 55, 12, 55, 14, 55, 1128,
	11, 55, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56,
	3, 56, 5, 56, 1140, 10, 56, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3,
	57, 3, 57, 3, 57, 7, 57, 1151, 10, 57, 12, 57, 14, 57, 1154, 11, 57, 3,
	58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58,
	3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3,
	58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 5, 58, 1186,
	10, 58, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59,
	3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 5, 59, 1206,
	10, 59, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60,
	3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 3,
	60, 5, 60, 1228, 10, 60, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61,
	3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 5, 61, 1242, 10, 61, 3, 62, 3, 62, 3,
	62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62,
	3, 62, 5, 62, 1258, 10, 62, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3,
	63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 7, 63, 1272, 10, 63, 12, 63, 14,
	63, 1275, 11, 63, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64,
	3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 5, 64, 1294,
	10, 64, 3, 65, 3, 65, 3, 65, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66,
	3, 66, 3, 66, 7, 66, 1307, 10, 66, 12, 66, 14, 66, 1310, 11, 66, 3, 67,
	3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 5, 67, 1319, 10, 67, 3, 67, 2,
	13, 32, 38, 50, 74, 82, 98, 102, 108, 112, 124, 130, 68, 2, 4, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46,
	48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82,
	84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114,
	116, 118, 120, 122, 124, 126, 128, 130, 132, 2, 7, 4, 2, 76, 76, 78, 78,
	3, 2, 72, 74, 3, 2, 76, 77, 4, 2, 64, 68, 70, 70, 4, 2, 68, 68, 70, 70,
	2, 1403, 2, 134, 3, 2, 2, 2, 4, 140, 3, 2, 2, 2, 6, 148, 3, 2, 2, 2, 8,
	156, 3, 2, 2, 2, 10, 164, 3, 2, 2, 2, 12, 169, 3, 2, 2, 2, 14, 174, 3,
	2, 2, 2, 16, 179, 3, 2, 2, 2, 18, 196, 3, 2, 2, 2, 20, 207, 3, 2, 2, 2,
	22, 261, 3, 2, 2, 2, 24, 318, 3, 2, 2, 2, 26, 334, 3, 2, 2, 2, 28, 450,
	3, 2, 2, 2, 30, 467, 3, 2, 2, 2, 32, 469, 3, 2, 2, 2, 34, 494, 3, 2, 2,
	2, 36, 508, 3, 2, 2, 2, 38, 510, 3, 2, 2, 2, 40, 524, 3, 2, 2, 2, 42, 540,
	3, 2, 2, 2, 44, 614, 3, 2, 2, 2, 46, 655, 3, 2, 2, 2, 48, 669, 3, 2, 2,
	2, 50, 720, 3, 2, 2, 2, 52, 826, 3, 2, 2, 2, 54, 854, 3, 2, 2, 2, 56, 857,
	3, 2, 2, 2, 58, 863, 3, 2, 2, 2, 60, 895, 3, 2, 2, 2, 62, 898, 3, 2, 2,
	2, 64, 904, 3, 2, 2, 2, 66, 919, 3, 2, 2, 2, 68, 921, 3, 2, 2, 2, 70, 929,
	3, 2, 2, 2, 72, 935, 3, 2, 2, 2, 74, 947, 3, 2, 2, 2, 76, 959, 3, 2, 2,
	2, 78, 967, 3, 2, 2, 2, 80, 973, 3, 2, 2, 2, 82, 985, 3, 2, 2, 2, 84, 1003,
	3, 2, 2, 2, 86, 1011, 3, 2, 2, 2, 88, 1013, 3, 2, 2, 2, 90, 1016, 3, 2,
	2, 2, 92, 1020, 3, 2, 2, 2, 94, 1024, 3, 2, 2, 2, 96, 1030, 3, 2, 2, 2,
	98, 1038, 3, 2, 2, 2, 100, 1052, 3, 2, 2, 2, 102, 1057, 3, 2, 2, 2, 104,
	1101, 3, 2, 2, 2, 106, 1113, 3, 2, 2, 2, 108, 1115, 3, 2, 2, 2, 110, 1139,
	3, 2, 2, 2, 112, 1141, 3, 2, 2, 2, 114, 1185, 3, 2, 2, 2, 116, 1205, 3,
	2, 2, 2, 118, 1227, 3, 2, 2, 2, 120, 1241, 3, 2, 2, 2, 122, 1257, 3, 2,
	2, 2, 124, 1259, 3, 2, 2, 2, 126, 1293, 3, 2, 2, 2, 128, 1295, 3, 2, 2,
	2, 130, 1298, 3, 2, 2, 2, 132, 1318, 3, 2, 2, 2, 134, 135, 5, 4, 3, 2,
	135, 136, 8, 2, 1, 2, 136, 3, 3, 2, 2, 2, 137, 139, 5, 18, 10, 2, 138,
	137, 3, 2, 2, 2, 139, 142, 3, 2, 2, 2, 140, 138, 3, 2, 2, 2, 140, 141,
	3, 2, 2, 2, 141, 143, 3, 2, 2, 2, 142, 140, 3, 2, 2, 2, 143, 144, 8, 3,
	1, 2, 144, 5, 3, 2, 2, 2, 145, 147, 5, 20, 11, 2, 146, 145, 3, 2, 2, 2,
	147, 150, 3, 2, 2, 2, 148, 146, 3, 2, 2, 2, 148, 149, 3, 2, 2, 2, 149,
	151, 3, 2, 2, 2, 150, 148, 3, 2, 2, 2, 151, 152, 8, 4, 1, 2, 152, 7, 3,
	2, 2, 2, 153, 155, 5, 24, 13, 2, 154, 153, 3, 2, 2, 2, 155, 158, 3, 2,
	2, 2, 156, 154, 3, 2, 2, 2, 156, 157, 3, 2, 2, 2, 157, 159, 3, 2, 2, 2,
	158, 156, 3, 2, 2, 2, 159, 160, 8, 5, 1, 2, 160, 9, 3, 2, 2, 2, 161, 163,
	5, 22, 12, 2, 162, 161, 3, 2, 2, 2, 163, 166, 3, 2, 2, 2, 164, 162, 3,
	2, 2, 2, 164, 165, 3, 2, 2, 2, 165, 167, 3, 2, 2, 2, 166, 164, 3, 2, 2,
	2, 167, 168, 8, 6, 1, 2, 168, 11, 3, 2, 2, 2, 169, 170, 7, 82, 2, 2, 170,
	171, 5, 10, 6, 2, 171, 172, 7, 83, 2, 2, 172, 173, 8, 7, 1, 2, 173, 13,
	3, 2, 2, 2, 174, 175, 7, 82, 2, 2, 175, 176, 5, 8, 5, 2, 176, 177, 7, 83,
	2, 2, 177, 178, 8, 8, 1, 2, 178, 15, 3, 2, 2, 2, 179, 180, 7, 82, 2, 2,
	180, 181, 5, 6, 4, 2, 181, 182, 7, 83, 2, 2, 182, 183, 8, 9, 1, 2, 183,
	17, 3, 2, 2, 2, 184, 185, 5, 26, 14, 2, 185, 186, 8, 10, 1, 2, 186, 197,
	3, 2, 2, 2, 187, 188, 5, 30, 16, 2, 188, 189, 8, 10, 1, 2, 189, 197, 3,
	2, 2, 2, 190, 191, 5, 44, 23, 2, 191, 192, 8, 10, 1, 2, 192, 197, 3, 2,
	2, 2, 193, 194, 5, 42, 22, 2, 194, 195, 8, 10, 1, 2, 195, 197, 3, 2, 2,
	2, 196, 184, 3, 2, 2, 2, 196, 187, 3, 2, 2, 2, 196, 190, 3, 2, 2, 2, 196,
	193, 3, 2, 2, 2, 197, 19, 3, 2, 2, 2, 198, 199, 5, 30, 16, 2, 199, 200,
	8, 11, 1, 2, 200, 208, 3, 2, 2, 2, 201, 202, 5, 44, 23, 2, 202, 203, 8,
	11, 1, 2, 203, 208, 3, 2, 2, 2, 204, 205, 5, 42, 22, 2, 205, 206, 8, 11,
	1, 2, 206, 208, 3, 2, 2, 2, 207, 198, 3, 2, 2, 2, 207, 201, 3, 2, 2, 2,
	207, 204, 3, 2, 2, 2, 208, 21, 3, 2, 2, 2, 209, 210, 5, 106, 54, 2, 210,
	211, 7, 63, 2, 2, 211, 212, 8, 12, 1, 2, 212, 262, 3, 2, 2, 2, 213, 214,
	5, 46, 24, 2, 214, 215, 7, 63, 2, 2, 215, 216, 8, 12, 1, 2, 216, 262, 3,
	2, 2, 2, 217, 218, 5, 50, 26, 2, 218, 219, 7, 63, 2, 2, 219, 220, 8, 12,
	1, 2, 220, 262, 3, 2, 2, 2, 221, 222, 5, 28, 15, 2, 222, 223, 7, 63, 2,
	2, 223, 224, 8, 12, 1, 2, 224, 262, 3, 2, 2, 2, 225, 226, 5, 54, 28, 2,
	226, 227, 8, 12, 1, 2, 227, 262, 3, 2, 2, 2, 228, 229, 5, 68, 35, 2, 229,
	230, 8, 12, 1, 2, 230, 262, 3, 2, 2, 2, 231, 232, 5, 90, 46, 2, 232, 233,
	8, 12, 1, 2, 233, 262, 3, 2, 2, 2, 234, 235, 5, 100, 51, 2, 235, 236, 8,
	12, 1, 2, 236, 262, 3, 2, 2, 2, 237, 238, 5, 86, 44, 2, 238, 239, 7, 63,
	2, 2, 239, 240, 8, 12, 1, 2, 240, 262, 3, 2, 2, 2, 241, 242, 5, 88, 45,
	2, 242, 243, 7, 63, 2, 2, 243, 244, 8, 12, 1, 2, 244, 262, 3, 2, 2, 2,
	245, 246, 5, 84, 43, 2, 246, 247, 7, 63, 2, 2, 247, 248, 8, 12, 1, 2, 248,
	262, 3, 2, 2, 2, 249, 250, 5, 94, 48, 2, 250, 251, 7, 63, 2, 2, 251, 252,
	8, 12, 1, 2, 252, 262, 3, 2, 2, 2, 253, 254, 5, 96, 49, 2, 254, 255, 7,
	63, 2, 2, 255, 256, 8, 12, 1, 2, 256, 262, 3, 2, 2, 2, 257, 258, 5, 116,
	59, 2, 258, 259, 7, 63, 2, 2, 259, 260, 8, 12, 1, 2, 260, 262, 3, 2, 2,
	2, 261, 209, 3, 2, 2, 2, 261, 213, 3, 2, 2, 2, 261, 217, 3, 2, 2, 2, 261,
	221, 3, 2, 2, 2, 261, 225, 3, 2, 2, 2, 261, 228, 3, 2, 2, 2, 261, 231,
	3, 2, 2, 2, 261, 234, 3, 2, 2, 2, 261, 237, 3, 2, 2, 2, 261, 241, 3, 2,
	2, 2, 261, 245, 3, 2, 2, 2, 261, 249, 3, 2, 2, 2, 261, 253, 3, 2, 2, 2,
	261, 257, 3, 2, 2, 2, 262, 23, 3, 2, 2, 2, 263, 264, 5, 106, 54, 2, 264,
	265, 7, 63, 2, 2, 265, 266, 8, 13, 1, 2, 266, 319, 3, 2, 2, 2, 267, 268,
	5, 46, 24, 2, 268, 269, 7, 63, 2, 2, 269, 270, 8, 13, 1, 2, 270, 319, 3,
	2, 2, 2, 271, 272, 5, 50, 26, 2, 272, 273, 7, 63, 2, 2, 273, 274, 8, 13,
	1, 2, 274, 319, 3, 2, 2, 2, 275, 276, 5, 50, 26, 2, 276, 277, 8, 13, 1,
	2, 277, 319, 3, 2, 2, 2, 278, 279, 5, 28, 15, 2, 279, 280, 7, 63, 2, 2,
	280, 281, 8, 13, 1, 2, 281, 319, 3, 2, 2, 2, 282, 283, 5, 54, 28, 2, 283,
	284, 8, 13, 1, 2, 284, 319, 3, 2, 2, 2, 285, 286, 5, 68, 35, 2, 286, 287,
	8, 13, 1, 2, 287, 319, 3, 2, 2, 2, 288, 289, 5, 90, 46, 2, 289, 290, 8,
	13, 1, 2, 290, 319, 3, 2, 2, 2, 291, 292, 5, 100, 51, 2, 292, 293, 8, 13,
	1, 2, 293, 319, 3, 2, 2, 2, 294, 295, 5, 86, 44, 2, 295, 296, 7, 63, 2,
	2, 296, 297, 8, 13, 1, 2, 297, 319, 3, 2, 2, 2, 298, 299, 5, 88, 45, 2,
	299, 300, 7, 63, 2, 2, 300, 301, 8, 13, 1, 2, 301, 319, 3, 2, 2, 2, 302,
	303, 5, 84, 43, 2, 303, 304, 7, 63, 2, 2, 304, 305, 8, 13, 1, 2, 305, 319,
	3, 2, 2, 2, 306, 307, 5, 94, 48, 2, 307, 308, 7, 63, 2, 2, 308, 309, 8,
	13, 1, 2, 309, 319, 3, 2, 2, 2, 310, 311, 5, 96, 49, 2, 311, 312, 7, 63,
	2, 2, 312, 313, 8, 13, 1, 2, 313, 319, 3, 2, 2, 2, 314, 315, 5, 116, 59,
	2, 315, 316, 7, 63, 2, 2, 316, 317, 8, 13, 1, 2, 317, 319, 3, 2, 2, 2,
	318, 263, 3, 2, 2, 2, 318, 267, 3, 2, 2, 2, 318, 271, 3, 2, 2, 2, 318,
	275, 3, 2, 2, 2, 318, 278, 3, 2, 2, 2, 318, 282, 3, 2, 2, 2, 318, 285,
	3, 2, 2, 2, 318, 288, 3, 2, 2, 2, 318, 291, 3, 2, 2, 2, 318, 294, 3, 2,
	2, 2, 318, 298, 3, 2, 2, 2, 318, 302, 3, 2, 2, 2, 318, 306, 3, 2, 2, 2,
	318, 310, 3, 2, 2, 2, 318, 314, 3, 2, 2, 2, 319, 25, 3, 2, 2, 2, 320, 321,
	7, 24, 2, 2, 321, 322, 7, 10, 2, 2, 322, 323, 7, 80, 2, 2, 323, 324, 7,
	81, 2, 2, 324, 325, 5, 12, 7, 2, 325, 326, 8, 14, 1, 2, 326, 335, 3, 2,
	2, 2, 327, 328, 7, 24, 2, 2, 328, 329, 7, 10, 2, 2, 329, 330, 7, 80, 2,
	2, 330, 331, 7, 81, 2, 2, 331, 332, 7, 82, 2, 2, 332, 333, 7, 83, 2, 2,
	333, 335, 8, 14, 1, 2, 334, 320, 3, 2, 2, 2, 334, 327, 3, 2, 2, 2, 335,
	27, 3, 2, 2, 2, 336, 337, 7, 17, 2, 2, 337, 338, 7, 51, 2, 2, 338, 339,
	7, 71, 2, 2, 339, 340, 5, 50, 26, 2, 340, 341, 8, 15, 1, 2, 341, 451, 3,
	2, 2, 2, 342, 343, 7, 17, 2, 2, 343, 344, 7, 51, 2, 2, 344, 345, 7, 71,
	2, 2, 345, 346, 5, 66, 34, 2, 346, 347, 8, 15, 1, 2, 347, 451, 3, 2, 2,
	2, 348, 349, 7, 17, 2, 2, 349, 350, 7, 51, 2, 2, 350, 351, 7, 59, 2, 2,
	351, 352, 5, 126, 64, 2, 352, 353, 7, 71, 2, 2, 353, 354, 5, 50, 26, 2,
	354, 355, 8, 15, 1, 2, 355, 451, 3, 2, 2, 2, 356, 357, 7, 17, 2, 2, 357,
	358, 7, 51, 2, 2, 358, 359, 7, 59, 2, 2, 359, 360, 5, 126, 64, 2, 360,
	361, 7, 71, 2, 2, 361, 362, 5, 66, 34, 2, 362, 363, 8, 15, 1, 2, 363, 451,
	3, 2, 2, 2, 364, 365, 7, 17, 2, 2, 365, 366, 7, 16, 2, 2, 366, 367, 7,
	51, 2, 2, 367, 368, 7, 71, 2, 2, 368, 369, 5, 50, 26, 2, 369, 370, 8, 15,
	1, 2, 370, 451, 3, 2, 2, 2, 371, 372, 7, 17, 2, 2, 372, 373, 7, 16, 2,
	2, 373, 374, 7, 51, 2, 2, 374, 375, 7, 71, 2, 2, 375, 376, 5, 66, 34, 2,
	376, 377, 8, 15, 1, 2, 377, 451, 3, 2, 2, 2, 378, 379, 7, 17, 2, 2, 379,
	380, 7, 16, 2, 2, 380, 381, 7, 51, 2, 2, 381, 382, 7, 59, 2, 2, 382, 383,
	5, 126, 64, 2, 383, 384, 8, 15, 1, 2, 384, 451, 3, 2, 2, 2, 385, 386, 7,
	17, 2, 2, 386, 387, 7, 16, 2, 2, 387, 388, 7, 51, 2, 2, 388, 389, 7, 59,
	2, 2, 389, 390, 5, 126, 64, 2, 390, 391, 7, 71, 2, 2, 391, 392, 5, 50,
	26, 2, 392, 393, 8, 15, 1, 2, 393, 451, 3, 2, 2, 2, 394, 395, 7, 17, 2,
	2, 395, 396, 7, 16, 2, 2, 396, 397, 7, 51, 2, 2, 397, 398, 7, 59, 2, 2,
	398, 399, 5, 126, 64, 2, 399, 400, 7, 71, 2, 2, 400, 401, 5, 66, 34, 2,
	401, 402, 8, 15, 1, 2, 402, 451, 3, 2, 2, 2, 403, 404, 7, 17, 2, 2, 404,
	405, 7, 16, 2, 2, 405, 406, 7, 51, 2, 2, 406, 407, 7, 71, 2, 2, 407, 408,
	5, 50, 26, 2, 408, 409, 8, 15, 1, 2, 409, 451, 3, 2, 2, 2, 410, 411, 7,
	17, 2, 2, 411, 412, 7, 51, 2, 2, 412, 413, 7, 59, 2, 2, 413, 414, 7, 14,
	2, 2, 414, 415, 7, 67, 2, 2, 415, 416, 5, 126, 64, 2, 416, 417, 7, 65,
	2, 2, 417, 418, 7, 71, 2, 2, 418, 419, 5, 50, 26, 2, 419, 420, 8, 15, 1,
	2, 420, 451, 3, 2, 2, 2, 421, 422, 7, 17, 2, 2, 422, 423, 7, 16, 2, 2,
	423, 424, 7, 51, 2, 2, 424, 425, 7, 59, 2, 2, 425, 426, 7, 14, 2, 2, 426,
	427, 7, 67, 2, 2, 427, 428, 5, 126, 64, 2, 428, 429, 7, 65, 2, 2, 429,
	430, 7, 71, 2, 2, 430, 431, 5, 50, 26, 2, 431, 432, 8, 15, 1, 2, 432, 451,
	3, 2, 2, 2, 433, 434, 7, 17, 2, 2, 434, 435, 7, 51, 2, 2, 435, 436, 7,
	59, 2, 2, 436, 437, 5, 122, 62, 2, 437, 438, 7, 71, 2, 2, 438, 439, 5,
	50, 26, 2, 439, 440, 8, 15, 1, 2, 440, 451, 3, 2, 2, 2, 441, 442, 7, 17,
	2, 2, 442, 443, 7, 16, 2, 2, 443, 444, 7, 51, 2, 2, 444, 445, 7, 59, 2,
	2, 445, 446, 5, 122, 62, 2, 446, 447, 7, 71, 2, 2, 447, 448, 5, 50, 26,
	2, 448, 449, 8, 15, 1, 2, 449, 451, 3, 2, 2, 2, 450, 336, 3, 2, 2, 2, 450,
	342, 3, 2, 2, 2, 450, 348, 3, 2, 2, 2, 450, 356, 3, 2, 2, 2, 450, 364,
	3, 2, 2, 2, 450, 371, 3, 2, 2, 2, 450, 378, 3, 2, 2, 2, 450, 385, 3, 2,
	2, 2, 450, 394, 3, 2, 2, 2, 450, 403, 3, 2, 2, 2, 450, 410, 3, 2, 2, 2,
	450, 421, 3, 2, 2, 2, 450, 433, 3, 2, 2, 2, 450, 441, 3, 2, 2, 2, 451,
	29, 3, 2, 2, 2, 452, 453, 7, 47, 2, 2, 453, 454, 7, 18, 2, 2, 454, 455,
	7, 50, 2, 2, 455, 456, 7, 82, 2, 2, 456, 457, 5, 32, 17, 2, 457, 458, 7,
	83, 2, 2, 458, 459, 8, 16, 1, 2, 459, 468, 3, 2, 2, 2, 460, 461, 7, 18,
	2, 2, 461, 462, 7, 50, 2, 2, 462, 463, 7, 82, 2, 2, 463, 464, 5, 32, 17,
	2, 464, 465, 7, 83, 2, 2, 465, 466, 8, 16, 1, 2, 466, 468, 3, 2, 2, 2,
	467, 452, 3, 2, 2, 2, 467, 460, 3, 2, 2, 2, 468, 31, 3, 2, 2, 2, 469, 470,
	8, 17, 1, 2, 470, 471, 5, 34, 18, 2, 471, 472, 8, 17, 1, 2, 472, 480, 3,
	2, 2, 2, 473, 474, 12, 4, 2, 2, 474, 475, 7, 62, 2, 2, 475, 476, 5, 34,
	18, 2, 476, 477, 8, 17, 1, 2, 477, 479, 3, 2, 2, 2, 478, 473, 3, 2, 2,
	2, 479, 482, 3, 2, 2, 2, 480, 478, 3, 2, 2, 2, 480, 481, 3, 2, 2, 2, 481,
	33, 3, 2, 2, 2, 482, 480, 3, 2, 2, 2, 483, 484, 7, 51, 2, 2, 484, 485,
	7, 59, 2, 2, 485, 486, 5, 126, 64, 2, 486, 487, 8, 18, 1, 2, 487, 495,
	3, 2, 2, 2, 488, 489, 7, 47, 2, 2, 489, 490, 7, 51, 2, 2, 490, 491, 7,
	59, 2, 2, 491, 492, 5, 126, 64, 2, 492, 493, 8, 18, 1, 2, 493, 495, 3,
	2, 2, 2, 494, 483, 3, 2, 2, 2, 494, 488, 3, 2, 2, 2, 495, 35, 3, 2, 2,
	2, 496, 497, 7, 50, 2, 2, 497, 498, 7, 82, 2, 2, 498, 499, 5, 38, 20, 2,
	499, 500, 7, 83, 2, 2, 500, 501, 8, 19, 1, 2, 501, 509, 3, 2, 2, 2, 502,
	503, 5, 126, 64, 2, 503, 504, 7, 82, 2, 2, 504, 505, 5, 38, 20, 2, 505,
	506, 7, 83, 2, 2, 506, 507, 8, 19, 1, 2, 507, 509, 3, 2, 2, 2, 508, 496,
	3, 2, 2, 2, 508, 502, 3, 2, 2, 2, 509, 37, 3, 2, 2, 2, 510, 511, 8, 20,
	1, 2, 511, 512, 5, 40, 21, 2, 512, 513, 8, 20, 1, 2, 513, 521, 3, 2, 2,
	2, 514, 515, 12, 4, 2, 2, 515, 516, 7, 62, 2, 2, 516, 517, 5, 40, 21, 2,
	517, 518, 8, 20, 1, 2, 518, 520, 3, 2, 2, 2, 519, 514, 3, 2, 2, 2, 520,
	523, 3, 2, 2, 2, 521, 519, 3, 2, 2, 2, 521, 522, 3, 2, 2, 2, 522, 39, 3,
	2, 2, 2, 523, 521, 3, 2, 2, 2, 524, 525, 7, 51, 2, 2, 525, 526, 7, 59,
	2, 2, 526, 527, 5, 50, 26, 2, 527, 528, 8, 21, 1, 2, 528, 41, 3, 2, 2,
	2, 529, 530, 7, 46, 2, 2, 530, 531, 7, 50, 2, 2, 531, 532, 5, 16, 9, 2,
	532, 533, 8, 22, 1, 2, 533, 541, 3, 2, 2, 2, 534, 535, 7, 47, 2, 2, 535,
	536, 7, 46, 2, 2, 536, 537, 7, 50, 2, 2, 537, 538, 5, 16, 9, 2, 538, 539,
	8, 22, 1, 2, 539, 541, 3, 2, 2, 2, 540, 529, 3, 2, 2, 2, 540, 534, 3, 2,
	2, 2, 541, 43, 3, 2, 2, 2, 542, 543, 7, 47, 2, 2, 543, 544, 7, 24, 2, 2,
	544, 545, 7, 51, 2, 2, 545, 546, 7, 80, 2, 2, 546, 547, 7, 81, 2, 2, 547,
	548, 7, 75, 2, 2, 548, 549, 5, 126, 64, 2, 549, 550, 5, 12, 7, 2, 550,
	551, 8, 23, 1, 2, 551, 615, 3, 2, 2, 2, 552, 553, 7, 47, 2, 2, 553, 554,
	7, 24, 2, 2, 554, 555, 7, 51, 2, 2, 555, 556, 7, 80, 2, 2, 556, 557, 7,
	81, 2, 2, 557, 558, 5, 12, 7, 2, 558, 559, 8, 23, 1, 2, 559, 615, 3, 2,
	2, 2, 560, 561, 7, 24, 2, 2, 561, 562, 7, 51, 2, 2, 562, 563, 7, 80, 2,
	2, 563, 564, 7, 81, 2, 2, 564, 565, 7, 75, 2, 2, 565, 566, 5, 126, 64,
	2, 566, 567, 5, 12, 7, 2, 567, 568, 8, 23, 1, 2, 568, 615, 3, 2, 2, 2,
	569, 570, 7, 24, 2, 2, 570, 571, 7, 51, 2, 2, 571, 572, 7, 80, 2, 2, 572,
	573, 7, 81, 2, 2, 573, 574, 5, 12, 7, 2, 574, 575, 8, 23, 1, 2, 575, 615,
	3, 2, 2, 2, 576, 577, 7, 47, 2, 2, 577, 578, 7, 24, 2, 2, 578, 579, 7,
	51, 2, 2, 579, 580, 7, 80, 2, 2, 580, 581, 5, 102, 52, 2, 581, 582, 7,
	81, 2, 2, 582, 583, 7, 75, 2, 2, 583, 584, 5, 126, 64, 2, 584, 585, 5,
	12, 7, 2, 585, 586, 8, 23, 1, 2, 586, 615, 3, 2, 2, 2, 587, 588, 7, 47,
	2, 2, 588, 589, 7, 24, 2, 2, 589, 590, 7, 51, 2, 2, 590, 591, 7, 80, 2,
	2, 591, 592, 5, 102, 52, 2, 592, 593, 7, 81, 2, 2, 593, 594, 5, 12, 7,
	2, 594, 595, 8, 23, 1, 2, 595, 615, 3, 2, 2, 2, 596, 597, 7, 24, 2, 2,
	597, 598, 7, 51, 2, 2, 598, 599, 7, 80, 2, 2, 599, 600, 5, 102, 52, 2,
	600, 601, 7, 81, 2, 2, 601, 602, 7, 75, 2, 2, 602, 603, 5, 126, 64, 2,
	603, 604, 5, 12, 7, 2, 604, 605, 8, 23, 1, 2, 605, 615, 3, 2, 2, 2, 606,
	607, 7, 24, 2, 2, 607, 608, 7, 51, 2, 2, 608, 609, 7, 80, 2, 2, 609, 610,
	5, 102, 52, 2, 610, 611, 7, 81, 2, 2, 611, 612, 5, 12, 7, 2, 612, 613,
	8, 23, 1, 2, 613, 615, 3, 2, 2, 2, 614, 542, 3, 2, 2, 2, 614, 552, 3, 2,
	2, 2, 614, 560, 3, 2, 2, 2, 614, 569, 3, 2, 2, 2, 614, 576, 3, 2, 2, 2,
	614, 587, 3, 2, 2, 2, 614, 596, 3, 2, 2, 2, 614, 606, 3, 2, 2, 2, 615,
	45, 3, 2, 2, 2, 616, 617, 5, 48, 25, 2, 617, 618, 7, 71, 2, 2, 618, 619,
	5, 50, 26, 2, 619, 620, 8, 24, 1, 2, 620, 656, 3, 2, 2, 2, 621, 622, 5,
	48, 25, 2, 622, 623, 7, 71, 2, 2, 623, 624, 5, 66, 34, 2, 624, 625, 8,
	24, 1, 2, 625, 656, 3, 2, 2, 2, 626, 627, 7, 51, 2, 2, 627, 628, 7, 71,
	2, 2, 628, 629, 5, 50, 26, 2, 629, 630, 8, 24, 1, 2, 630, 656, 3, 2, 2,
	2, 631, 632, 7, 51, 2, 2, 632, 633, 7, 71, 2, 2, 633, 634, 5, 66, 34, 2,
	634, 635, 8, 24, 1, 2, 635, 656, 3, 2, 2, 2, 636, 637, 5, 50, 26, 2, 637,
	638, 7, 71, 2, 2, 638, 639, 5, 50, 26, 2, 639, 640, 8, 24, 1, 2, 640, 656,
	3, 2, 2, 2, 641, 642, 5, 50, 26, 2, 642, 643, 7, 61, 2, 2, 643, 644, 7,
	51, 2, 2, 644, 645, 7, 71, 2, 2, 645, 646, 5, 50, 26, 2, 646, 647, 8, 24,
	1, 2, 647, 656, 3, 2, 2, 2, 648, 649, 5, 50, 26, 2, 649, 650, 7, 61, 2,
	2, 650, 651, 7, 51, 2, 2, 651, 652, 7, 71, 2, 2, 652, 653, 5, 66, 34, 2,
	653, 654, 8, 24, 1, 2, 654, 656, 3, 2, 2, 2, 655, 616, 3, 2, 2, 2, 655,
	621, 3, 2, 2, 2, 655, 626, 3, 2, 2, 2, 655, 631, 3, 2, 2, 2, 655, 636,
	3, 2, 2, 2, 655, 641, 3, 2, 2, 2, 655, 648, 3, 2, 2, 2, 656, 47, 3, 2,
	2, 2, 657, 658, 7, 51, 2, 2, 658, 659, 5, 124, 63, 2, 659, 660, 8, 25,
	1, 2, 660, 670, 3, 2, 2, 2, 661, 662, 7, 51, 2, 2, 662, 663, 7, 84, 2,
	2, 663, 664, 5, 50, 26, 2, 664, 665, 7, 85, 2, 2, 665, 666, 8, 25, 1, 2,
	666, 670, 3, 2, 2, 2, 667, 668, 7, 51, 2, 2, 668, 670, 8, 25, 1, 2, 669,
	657, 3, 2, 2, 2, 669, 661, 3, 2, 2, 2, 669, 667, 3, 2, 2, 2, 670, 49, 3,
	2, 2, 2, 671, 672, 8, 26, 1, 2, 672, 673, 9, 2, 2, 2, 673, 674, 5, 50,
	26, 33, 674, 675, 8, 26, 1, 2, 675, 721, 3, 2, 2, 2, 676, 677, 7, 80, 2,
	2, 677, 678, 5, 50, 26, 2, 678, 679, 7, 81, 2, 2, 679, 680, 8, 26, 1, 2,
	680, 721, 3, 2, 2, 2, 681, 682, 7, 80, 2, 2, 682, 683, 5, 50, 26, 2, 683,
	684, 7, 13, 2, 2, 684, 685, 5, 52, 27, 2, 685, 686, 7, 81, 2, 2, 686, 687,
	8, 26, 1, 2, 687, 721, 3, 2, 2, 2, 688, 689, 5, 106, 54, 2, 689, 690, 8,
	26, 1, 2, 690, 721, 3, 2, 2, 2, 691, 692, 5, 114, 58, 2, 692, 693, 8, 26,
	1, 2, 693, 721, 3, 2, 2, 2, 694, 695, 5, 118, 60, 2, 695, 696, 8, 26, 1,
	2, 696, 721, 3, 2, 2, 2, 697, 698, 5, 120, 61, 2, 698, 699, 8, 26, 1, 2,
	699, 721, 3, 2, 2, 2, 700, 701, 5, 36, 19, 2, 701, 702, 8, 26, 1, 2, 702,
	721, 3, 2, 2, 2, 703, 704, 5, 128, 65, 2, 704, 705, 8, 26, 1, 2, 705, 721,
	3, 2, 2, 2, 706, 707, 7, 51, 2, 2, 707, 721, 8, 26, 1, 2, 708, 709, 7,
	21, 2, 2, 709, 721, 8, 26, 1, 2, 710, 711, 7, 22, 2, 2, 711, 721, 8, 26,
	1, 2, 712, 713, 7, 88, 2, 2, 713, 721, 8, 26, 1, 2, 714, 715, 7, 49, 2,
	2, 715, 721, 8, 26, 1, 2, 716, 717, 7, 48, 2, 2, 717, 721, 8, 26, 1, 2,
	718, 719, 7, 86, 2, 2, 719, 721, 8, 26, 1, 2, 720, 671, 3, 2, 2, 2, 720,
	676, 3, 2, 2, 2, 720, 681, 3, 2, 2, 2, 720, 688, 3, 2, 2, 2, 720, 691,
	3, 2, 2, 2, 720, 694, 3, 2, 2, 2, 720, 697, 3, 2, 2, 2, 720, 700, 3, 2,
	2, 2, 720, 703, 3, 2, 2, 2, 720, 706, 3, 2, 2, 2, 720, 708, 3, 2, 2, 2,
	720, 710, 3, 2, 2, 2, 720, 712, 3, 2, 2, 2, 720, 714, 3, 2, 2, 2, 720,
	716, 3, 2, 2, 2, 720, 718, 3, 2, 2, 2, 721, 809, 3, 2, 2, 2, 722, 723,
	12, 29, 2, 2, 723, 724, 9, 3, 2, 2, 724, 725, 5, 50, 26, 30, 725, 726,
	8, 26, 1, 2, 726, 808, 3, 2, 2, 2, 727, 728, 12, 28, 2, 2, 728, 729, 9,
	4, 2, 2, 729, 730, 5, 50, 26, 29, 730, 731, 8, 26, 1, 2, 731, 808, 3, 2,
	2, 2, 732, 733, 12, 27, 2, 2, 733, 734, 9, 5, 2, 2, 734, 735, 5, 50, 26,
	28, 735, 736, 8, 26, 1, 2, 736, 808, 3, 2, 2, 2, 737, 738, 12, 26, 2, 2,
	738, 739, 9, 6, 2, 2, 739, 740, 5, 50, 26, 27, 740, 741, 8, 26, 1, 2, 741,
	808, 3, 2, 2, 2, 742, 743, 12, 25, 2, 2, 743, 744, 7, 56, 2, 2, 744, 745,
	5, 50, 26, 26, 745, 746, 8, 26, 1, 2, 746, 808, 3, 2, 2, 2, 747, 748, 12,
	24, 2, 2, 748, 749, 7, 54, 2, 2, 749, 750, 5, 50, 26, 25, 750, 751, 8,
	26, 1, 2, 751, 808, 3, 2, 2, 2, 752, 753, 12, 32, 2, 2, 753, 754, 7, 61,
	2, 2, 754, 755, 7, 19, 2, 2, 755, 756, 7, 80, 2, 2, 756, 757, 7, 81, 2,
	2, 757, 808, 8, 26, 1, 2, 758, 759, 12, 31, 2, 2, 759, 760, 7, 61, 2, 2,
	760, 761, 7, 26, 2, 2, 761, 762, 7, 80, 2, 2, 762, 763, 7, 81, 2, 2, 763,
	808, 8, 26, 1, 2, 764, 765, 12, 30, 2, 2, 765, 766, 7, 61, 2, 2, 766, 767,
	7, 25, 2, 2, 767, 768, 7, 80, 2, 2, 768, 769, 7, 81, 2, 2, 769, 808, 8,
	26, 1, 2, 770, 771, 12, 15, 2, 2, 771, 772, 7, 61, 2, 2, 772, 773, 7, 51,
	2, 2, 773, 808, 8, 26, 1, 2, 774, 775, 12, 14, 2, 2, 775, 776, 5, 124,
	63, 2, 776, 777, 8, 26, 1, 2, 777, 808, 3, 2, 2, 2, 778, 779, 12, 13, 2,
	2, 779, 780, 7, 61, 2, 2, 780, 781, 7, 29, 2, 2, 781, 782, 7, 80, 2, 2,
	782, 783, 7, 81, 2, 2, 783, 808, 8, 26, 1, 2, 784, 785, 12, 12, 2, 2, 785,
	786, 7, 61, 2, 2, 786, 787, 7, 34, 2, 2, 787, 788, 7, 80, 2, 2, 788, 789,
	7, 81, 2, 2, 789, 808, 8, 26, 1, 2, 790, 791, 12, 11, 2, 2, 791, 792, 7,
	61, 2, 2, 792, 793, 7, 32, 2, 2, 793, 794, 7, 80, 2, 2, 794, 795, 7, 55,
	2, 2, 795, 796, 5, 50, 26, 2, 796, 797, 7, 81, 2, 2, 797, 798, 8, 26, 1,
	2, 798, 808, 3, 2, 2, 2, 799, 800, 12, 10, 2, 2, 800, 801, 7, 61, 2, 2,
	801, 802, 7, 31, 2, 2, 802, 803, 7, 80, 2, 2, 803, 804, 5, 50, 26, 2, 804,
	805, 7, 81, 2, 2, 805, 806, 8, 26, 1, 2, 806, 808, 3, 2, 2, 2, 807, 722,
	3, 2, 2, 2, 807, 727, 3, 2, 2, 2, 807, 732, 3, 2, 2, 2, 807, 737, 3, 2,
	2, 2, 807, 742, 3, 2, 2, 2, 807, 747, 3, 2, 2, 2, 807, 752, 3, 2, 2, 2,
	807, 758, 3, 2, 2, 2, 807, 764, 3, 2, 2, 2, 807, 770, 3, 2, 2, 2, 807,
	774, 3, 2, 2, 2, 807, 778, 3, 2, 2, 2, 807, 784, 3, 2, 2, 2, 807, 790,
	3, 2, 2, 2, 807, 799, 3, 2, 2, 2, 808, 811, 3, 2, 2, 2, 809, 807, 3, 2,
	2, 2, 809, 810, 3, 2, 2, 2, 810, 51, 3, 2, 2, 2, 811, 809, 3, 2, 2, 2,
	812, 813, 7, 3, 2, 2, 813, 827, 8, 27, 1, 2, 814, 815, 7, 4, 2, 2, 815,
	827, 8, 27, 1, 2, 816, 817, 7, 6, 2, 2, 817, 827, 8, 27, 1, 2, 818, 819,
	7, 5, 2, 2, 819, 827, 8, 27, 1, 2, 820, 821, 7, 7, 2, 2, 821, 827, 8, 27,
	1, 2, 822, 823, 7, 8, 2, 2, 823, 827, 8, 27, 1, 2, 824, 825, 7, 9, 2, 2,
	825, 827, 8, 27, 1, 2, 826, 812, 3, 2, 2, 2, 826, 814, 3, 2, 2, 2, 826,
	816, 3, 2, 2, 2, 826, 818, 3, 2, 2, 2, 826, 820, 3, 2, 2, 2, 826, 822,
	3, 2, 2, 2, 826, 824, 3, 2, 2, 2, 827, 53, 3, 2, 2, 2, 828, 829, 7, 36,
	2, 2, 829, 830, 5, 50, 26, 2, 830, 831, 5, 12, 7, 2, 831, 832, 8, 28, 1,
	2, 832, 855, 3, 2, 2, 2, 833, 834, 7, 36, 2, 2, 834, 835, 5, 50, 26, 2,
	835, 836, 5, 12, 7, 2, 836, 837, 7, 37, 2, 2, 837, 838, 5, 12, 7, 2, 838,
	839, 8, 28, 1, 2, 839, 855, 3, 2, 2, 2, 840, 841, 7, 36, 2, 2, 841, 842,
	5, 50, 26, 2, 842, 843, 5, 12, 7, 2, 843, 844, 5, 56, 29, 2, 844, 845,
	8, 28, 1, 2, 845, 855, 3, 2, 2, 2, 846, 847, 7, 36, 2, 2, 847, 848, 5,
	50, 26, 2, 848, 849, 5, 12, 7, 2, 849, 850, 5, 56, 29, 2, 850, 851, 7,
	37, 2, 2, 851, 852, 5, 12, 7, 2, 852, 853, 8, 28, 1, 2, 853, 855, 3, 2,
	2, 2, 854, 828, 3, 2, 2, 2, 854, 833, 3, 2, 2, 2, 854, 840, 3, 2, 2, 2,
	854, 846, 3, 2, 2, 2, 855, 55, 3, 2, 2, 2, 856, 858, 5, 58, 30, 2, 857,
	856, 3, 2, 2, 2, 858, 859, 3, 2, 2, 2, 859, 857, 3, 2, 2, 2, 859, 860,
	3, 2, 2, 2, 860, 861, 3, 2, 2, 2, 861, 862, 8, 29, 1, 2, 862, 57, 3, 2,
	2, 2, 863, 864, 7, 37, 2, 2, 864, 865, 7, 36, 2, 2, 865, 866, 5, 50, 26,
	2, 866, 867, 5, 12, 7, 2, 867, 868, 8, 30, 1, 2, 868, 59, 3, 2, 2, 2, 869,
	870, 7, 36, 2, 2, 870, 871, 5, 50, 26, 2, 871, 872, 5, 14, 8, 2, 872, 873,
	8, 31, 1, 2, 873, 896, 3, 2, 2, 2, 874, 875, 7, 36, 2, 2, 875, 876, 5,
	50, 26, 2, 876, 877, 5, 14, 8, 2, 877, 878, 7, 37, 2, 2, 878, 879, 5, 14,
	8, 2, 879, 880, 8, 31, 1, 2, 880, 896, 3, 2, 2, 2, 881, 882, 7, 36, 2,
	2, 882, 883, 5, 50, 26, 2, 883, 884, 5, 14, 8, 2, 884, 885, 5, 62, 32,
	2, 885, 886, 8, 31, 1, 2, 886, 896, 3, 2, 2, 2, 887, 888, 7, 36, 2, 2,
	888, 889, 5, 50, 26, 2, 889, 890, 5, 14, 8, 2, 890, 891, 5, 62, 32, 2,
	891, 892, 7, 37, 2, 2, 892, 893, 5, 14, 8, 2, 893, 894, 8, 31, 1, 2, 894,
	896, 3, 2, 2, 2, 895, 869, 3, 2, 2, 2, 895, 874, 3, 2, 2, 2, 895, 881,
	3, 2, 2, 2, 895, 887, 3, 2, 2, 2, 896, 61, 3, 2, 2, 2, 897, 899, 5, 64,
	33, 2, 898, 897, 3, 2, 2, 2, 899, 900, 3, 2, 2, 2, 900, 898, 3, 2, 2, 2,
	900, 901, 3, 2, 2, 2, 901, 902, 3, 2, 2, 2, 902, 903, 8, 32, 1, 2, 903,
	63, 3, 2, 2, 2, 904, 905, 7, 37, 2, 2, 905, 906, 7, 36, 2, 2, 906, 907,
	5, 50, 26, 2, 907, 908, 5, 14, 8, 2, 908, 909, 8, 33, 1, 2, 909, 65, 3,
	2, 2, 2, 910, 911, 5, 60, 31, 2, 911, 912, 8, 34, 1, 2, 912, 920, 3, 2,
	2, 2, 913, 914, 5, 76, 39, 2, 914, 915, 8, 34, 1, 2, 915, 920, 3, 2, 2,
	2, 916, 917, 5, 92, 47, 2, 917, 918, 8, 34, 1, 2, 918, 920, 3, 2, 2, 2,
	919, 910, 3, 2, 2, 2, 919, 913, 3, 2, 2, 2, 919, 916, 3, 2, 2, 2, 920,
	67, 3, 2, 2, 2, 921, 922, 7, 38, 2, 2, 922, 923, 5, 50, 26, 2, 923, 924,
	7, 82, 2, 2, 924, 925, 5, 70, 36, 2, 925, 926, 7, 83, 2, 2, 926, 927, 8,
	35, 1, 2, 927, 69, 3, 2, 2, 2, 928, 930, 5, 72, 37, 2, 929, 928, 3, 2,
	2, 2, 930, 931, 3, 2, 2, 2, 931, 929, 3, 2, 2, 2, 931, 932, 3, 2, 2, 2,
	932, 933, 3, 2, 2, 2, 933, 934, 8, 36, 1, 2, 934, 71, 3, 2, 2, 2, 935,
	936, 5, 74, 38, 2, 936, 937, 7, 69, 2, 2, 937, 938, 5, 12, 7, 2, 938, 939,
	7, 62, 2, 2, 939, 940, 8, 37, 1, 2, 940, 73, 3, 2, 2, 2, 941, 942, 8, 38,
	1, 2, 942, 943, 5, 50, 26, 2, 943, 944, 8, 38, 1, 2, 944, 948, 3, 2, 2,
	2, 945, 946, 7, 52, 2, 2, 946, 948, 8, 38, 1, 2, 947, 941, 3, 2, 2, 2,
	947, 945, 3, 2, 2, 2, 948, 956, 3, 2, 2, 2, 949, 950, 12, 5, 2, 2, 950,
	951, 7, 53, 2, 2, 951, 952, 5, 50, 26, 2, 952, 953, 8, 38, 1, 2, 953, 955,
	3, 2, 2, 2, 954, 949, 3, 2, 2, 2, 955, 958, 3, 2, 2, 2, 956, 954, 3, 2,
	2, 2, 956, 957, 3, 2, 2, 2, 957, 75, 3, 2, 2, 2, 958, 956, 3, 2, 2, 2,
	959, 960, 7, 38, 2, 2, 960, 961, 5, 50, 26, 2, 961, 962, 7, 82, 2, 2, 962,
	963, 5, 78, 40, 2, 963, 964, 7, 83, 2, 2, 964, 965, 8, 39, 1, 2, 965, 77,
	3, 2, 2, 2, 966, 968, 5, 80, 41, 2, 967, 966, 3, 2, 2, 2, 968, 969, 3,
	2, 2, 2, 969, 967, 3, 2, 2, 2, 969, 970, 3, 2, 2, 2, 970, 971, 3, 2, 2,
	2, 971, 972, 8, 40, 1, 2, 972, 79, 3, 2, 2, 2, 973, 974, 5, 82, 42, 2,
	974, 975, 7, 69, 2, 2, 975, 976, 5, 14, 8, 2, 976, 977, 7, 62, 2, 2, 977,
	978, 8, 41, 1, 2, 978, 81, 3, 2, 2, 2, 979, 980, 8, 42, 1, 2, 980, 981,
	5, 50, 26, 2, 981, 982, 8, 42, 1, 2, 982, 986, 3, 2, 2, 2, 983, 984, 7,
	52, 2, 2, 984, 986, 8, 42, 1, 2, 985, 979, 3, 2, 2, 2, 985, 983, 3, 2,
	2, 2, 986, 994, 3, 2, 2, 2, 987, 988, 12, 5, 2, 2, 988, 989, 7, 53, 2,
	2, 989, 990, 5, 50, 26, 2, 990, 991, 8, 42, 1, 2, 991, 993, 3, 2, 2, 2,
	992, 987, 3, 2, 2, 2, 993, 996, 3, 2, 2, 2, 994, 992, 3, 2, 2, 2, 994,
	995, 3, 2, 2, 2, 995, 83, 3, 2, 2, 2, 996, 994, 3, 2, 2, 2, 997, 998, 7,
	43, 2, 2, 998, 1004, 8, 43, 1, 2, 999, 1000, 7, 43, 2, 2, 1000, 1001, 5,
	50, 26, 2, 1001, 1002, 8, 43, 1, 2, 1002, 1004, 3, 2, 2, 2, 1003, 997,
	3, 2, 2, 2, 1003, 999, 3, 2, 2, 2, 1004, 85, 3, 2, 2, 2, 1005, 1006, 7,
	44, 2, 2, 1006, 1012, 8, 44, 1, 2, 1007, 1008, 7, 44, 2, 2, 1008, 1009,
	5, 50, 26, 2, 1009, 1010, 8, 44, 1, 2, 1010, 1012, 3, 2, 2, 2, 1011, 1005,
	3, 2, 2, 2, 1011, 1007, 3, 2, 2, 2, 1012, 87, 3, 2, 2, 2, 1013, 1014, 7,
	45, 2, 2, 1014, 1015, 8, 45, 1, 2, 1015, 89, 3, 2, 2, 2, 1016, 1017, 7,
	39, 2, 2, 1017, 1018, 5, 12, 7, 2, 1018, 1019, 8, 46, 1, 2, 1019, 91, 3,
	2, 2, 2, 1020, 1021, 7, 39, 2, 2, 1021, 1022, 5, 14, 8, 2, 1022, 1023,
	8, 47, 1, 2, 1023, 93, 3, 2, 2, 2, 1024, 1025, 7, 23, 2, 2, 1025, 1026,
	7, 80, 2, 2, 1026, 1027, 5, 50, 26, 2, 1027, 1028, 7, 81, 2, 2, 1028, 1029,
	8, 48, 1, 2, 1029, 95, 3, 2, 2, 2, 1030, 1031, 7, 23, 2, 2, 1031, 1032,
	7, 80, 2, 2, 1032, 1033, 7, 86, 2, 2, 1033, 1034, 7, 62, 2, 2, 1034, 1035,
	5, 98, 50, 2, 1035, 1036, 7, 81, 2, 2, 1036, 1037, 8, 49, 1, 2, 1037, 97,
	3, 2, 2, 2, 1038, 1039, 8, 50, 1, 2, 1039, 1040, 5, 50, 26, 2, 1040, 1041,
	8, 50, 1, 2, 1041, 1049, 3, 2, 2, 2, 1042, 1043, 12, 4, 2, 2, 1043, 1044,
	7, 62, 2, 2, 1044, 1045, 5, 50, 26, 2, 1045, 1046, 8, 50, 1, 2, 1046, 1048,
	3, 2, 2, 2, 1047, 1042, 3, 2, 2, 2, 1048, 1051, 3, 2, 2, 2, 1049, 1047,
	3, 2, 2, 2, 1049, 1050, 3, 2, 2, 2, 1050, 99, 3, 2, 2, 2, 1051, 1049, 3,
	2, 2, 2, 1052, 1053, 7, 40, 2, 2, 1053, 1054, 5, 50, 26, 2, 1054, 1055,
	5, 12, 7, 2, 1055, 1056, 8, 51, 1, 2, 1056, 101, 3, 2, 2, 2, 1057, 1058,
	8, 52, 1, 2, 1058, 1059, 5, 104, 53, 2, 1059, 1060, 8, 52, 1, 2, 1060,
	1068, 3, 2, 2, 2, 1061, 1062, 12, 4, 2, 2, 1062, 1063, 7, 62, 2, 2, 1063,
	1064, 5, 104, 53, 2, 1064, 1065, 8, 52, 1, 2, 1065, 1067, 3, 2, 2, 2, 1066,
	1061, 3, 2, 2, 2, 1067, 1070, 3, 2, 2, 2, 1068, 1066, 3, 2, 2, 2, 1068,
	1069, 3, 2, 2, 2, 1069, 103, 3, 2, 2, 2, 1070, 1068, 3, 2, 2, 2, 1071,
	1072, 7, 16, 2, 2, 1072, 1073, 7, 51, 2, 2, 1073, 1074, 7, 59, 2, 2, 1074,
	1075, 5, 52, 27, 2, 1075, 1076, 8, 53, 1, 2, 1076, 1102, 3, 2, 2, 2, 1077,
	1078, 7, 51, 2, 2, 1078, 1079, 7, 59, 2, 2, 1079, 1080, 5, 52, 27, 2, 1080,
	1081, 8, 53, 1, 2, 1081, 1102, 3, 2, 2, 2, 1082, 1083, 7, 51, 2, 2, 1083,
	1084, 7, 59, 2, 2, 1084, 1085, 7, 55, 2, 2, 1085, 1086, 7, 16, 2, 2, 1086,
	1087, 7, 84, 2, 2, 1087, 1088, 5, 52, 27, 2, 1088, 1089, 7, 85, 2, 2, 1089,
	1090, 8, 53, 1, 2, 1090, 1102, 3, 2, 2, 2, 1091, 1092, 7, 51, 2, 2, 1092,
	1093, 7, 59, 2, 2, 1093, 1094, 7, 55, 2, 2, 1094, 1095, 7, 16, 2, 2, 1095,
	1096, 7, 14, 2, 2, 1096, 1097, 7, 67, 2, 2, 1097, 1098, 5, 52, 27, 2, 1098,
	1099, 7, 65, 2, 2, 1099, 1100, 8, 53, 1, 2, 1100, 1102, 3, 2, 2, 2, 1101,
	1071, 3, 2, 2, 2, 1101, 1077, 3, 2, 2, 2, 1101, 1082, 3, 2, 2, 2, 1101,
	1091, 3, 2, 2, 2, 1102, 105, 3, 2, 2, 2, 1103, 1104, 7, 51, 2, 2, 1104,
	1105, 7, 80, 2, 2, 1105, 1106, 5, 108, 55, 2, 1106, 1107, 7, 81, 2, 2,
	1107, 1108, 8, 54, 1, 2, 1108, 1114, 3, 2, 2, 2, 1109, 1110, 7, 51, 2,
	2, 1110, 1111, 7, 80, 2, 2, 1111, 1112, 7, 81, 2, 2, 1112, 1114, 8, 54,
	1, 2, 1113, 1103, 3, 2, 2, 2, 1113, 1109, 3, 2, 2, 2, 1114, 107, 3, 2,
	2, 2, 1115, 1116, 8, 55, 1, 2, 1116, 1117, 5, 110, 56, 2, 1117, 1118, 8,
	55, 1, 2, 1118, 1126, 3, 2, 2, 2, 1119, 1120, 12, 4, 2, 2, 1120, 1121,
	7, 62, 2, 2, 1121, 1122, 5, 110, 56, 2, 1122, 1123, 8, 55, 1, 2, 1123,
	1125, 3, 2, 2, 2, 1124, 1119, 3, 2, 2, 2, 1125, 1128, 3, 2, 2, 2, 1126,
	1124, 3, 2, 2, 2, 1126, 1127, 3, 2, 2, 2, 1127, 109, 3, 2, 2, 2, 1128,
	1126, 3, 2, 2, 2, 1129, 1130, 5, 50, 26, 2, 1130, 1131, 8, 56, 1, 2, 1131,
	1140, 3, 2, 2, 2, 1132, 1133, 7, 55, 2, 2, 1133, 1134, 7, 16, 2, 2, 1134,
	1135, 7, 51, 2, 2, 1135, 1140, 8, 56, 1, 2, 1136, 1137, 7, 55, 2, 2, 1137,
	1138, 7, 51, 2, 2, 1138, 1140, 8, 56, 1, 2, 1139, 1129, 3, 2, 2, 2, 1139,
	1132, 3, 2, 2, 2, 1139, 1136, 3, 2, 2, 2, 1140, 111, 3, 2, 2, 2, 1141,
	1142, 8, 57, 1, 2, 1142, 1143, 5, 50, 26, 2, 1143, 1144, 8, 57, 1, 2, 1144,
	1152, 3, 2, 2, 2, 1145, 1146, 12, 4, 2, 2, 1146, 1147, 7, 62, 2, 2, 1147,
	1148, 5, 50, 26, 2, 1148, 1149, 8, 57, 1, 2, 1149, 1151, 3, 2, 2, 2, 1150,
	1145, 3, 2, 2, 2, 1151, 1154, 3, 2, 2, 2, 1152, 1150, 3, 2, 2, 2, 1152,
	1153, 3, 2, 2, 2, 1153, 113, 3, 2, 2, 2, 1154, 1152, 3, 2, 2, 2, 1155,
	1156, 7, 14, 2, 2, 1156, 1157, 7, 58, 2, 2, 1157, 1158, 7, 28, 2, 2, 1158,
	1159, 7, 80, 2, 2, 1159, 1160, 7, 81, 2, 2, 1160, 1186, 8, 58, 1, 2, 1161,
	1162, 7, 15, 2, 2, 1162, 1163, 7, 78, 2, 2, 1163, 1164, 7, 84, 2, 2, 1164,
	1165, 5, 112, 57, 2, 1165, 1166, 7, 85, 2, 2, 1166, 1167, 8, 58, 1, 2,
	1167, 1186, 3, 2, 2, 2, 1168, 1169, 7, 15, 2, 2, 1169, 1170, 7, 78, 2,
	2, 1170, 1171, 7, 84, 2, 2, 1171, 1172, 5, 50, 26, 2, 1172, 1173, 7, 63,
	2, 2, 1173, 1174, 5, 50, 26, 2, 1174, 1175, 7, 85, 2, 2, 1175, 1176, 8,
	58, 1, 2, 1176, 1186, 3, 2, 2, 2, 1177, 1178, 7, 14, 2, 2, 1178, 1179,
	7, 58, 2, 2, 1179, 1180, 7, 35, 2, 2, 1180, 1181, 7, 80, 2, 2, 1181, 1182,
	5, 50, 26, 2, 1182, 1183, 7, 81, 2, 2, 1183, 1184, 8, 58, 1, 2, 1184, 1186,
	3, 2, 2, 2, 1185, 1155, 3, 2, 2, 2, 1185, 1161, 3, 2, 2, 2, 1185, 1168,
	3, 2, 2, 2, 1185, 1177, 3, 2, 2, 2, 1186, 115, 3, 2, 2, 2, 1187, 1188,
	5, 50, 26, 2, 1188, 1189, 7, 61, 2, 2, 1189, 1190, 7, 30, 2, 2, 1190, 1191,
	7, 80, 2, 2, 1191, 1192, 5, 50, 26, 2, 1192, 1193, 7, 81, 2, 2, 1193, 1194,
	8, 59, 1, 2, 1194, 1206, 3, 2, 2, 2, 1195, 1196, 5, 50, 26, 2, 1196, 1197,
	7, 61, 2, 2, 1197, 1198, 7, 33, 2, 2, 1198, 1199, 7, 80, 2, 2, 1199, 1200,
	5, 50, 26, 2, 1200, 1201, 7, 62, 2, 2, 1201, 1202, 5, 50, 26, 2, 1202,
	1203, 7, 81, 2, 2, 1203, 1204, 8, 59, 1, 2, 1204, 1206, 3, 2, 2, 2, 1205,
	1187, 3, 2, 2, 2, 1205, 1195, 3, 2, 2, 2, 1206, 117, 3, 2, 2, 2, 1207,
	1208, 7, 6, 2, 2, 1208, 1209, 7, 58, 2, 2, 1209, 1210, 7, 12, 2, 2, 1210,
	1211, 7, 80, 2, 2, 1211, 1212, 5, 50, 26, 2, 1212, 1213, 7, 62, 2, 2, 1213,
	1214, 5, 50, 26, 2, 1214, 1215, 7, 81, 2, 2, 1215, 1216, 8, 60, 1, 2, 1216,
	1228, 3, 2, 2, 2, 1217, 1218, 7, 5, 2, 2, 1218, 1219, 7, 58, 2, 2, 1219,
	1220, 7, 11, 2, 2, 1220, 1221, 7, 80, 2, 2, 1221, 1222, 5, 50, 26, 2, 1222,
	1223, 7, 62, 2, 2, 1223, 1224, 5, 50, 26, 2, 1224, 1225, 7, 81, 2, 2, 1225,
	1226, 8, 60, 1, 2, 1226, 1228, 3, 2, 2, 2, 1227, 1207, 3, 2, 2, 2, 1227,
	1217, 3, 2, 2, 2, 1228, 119, 3, 2, 2, 2, 1229, 1230, 7, 84, 2, 2, 1230,
	1231, 5, 112, 57, 2, 1231, 1232, 7, 85, 2, 2, 1232, 1233, 8, 61, 1, 2,
	1233, 1242, 3, 2, 2, 2, 1234, 1235, 7, 84, 2, 2, 1235, 1236, 5, 50, 26,
	2, 1236, 1237, 7, 63, 2, 2, 1237, 1238, 5, 50, 26, 2, 1238, 1239, 7, 85,
	2, 2, 1239, 1240, 8, 61, 1, 2, 1240, 1242, 3, 2, 2, 2, 1241, 1229, 3, 2,
	2, 2, 1241, 1234, 3, 2, 2, 2, 1242, 121, 3, 2, 2, 2, 1243, 1244, 7, 84,
	2, 2, 1244, 1245, 5, 122, 62, 2, 1245, 1246, 7, 63, 2, 2, 1246, 1247, 5,
	50, 26, 2, 1247, 1248, 7, 85, 2, 2, 1248, 1249, 8, 62, 1, 2, 1249, 1258,
	3, 2, 2, 2, 1250, 1251, 7, 84, 2, 2, 1251, 1252, 5, 126, 64, 2, 1252, 1253,
	7, 63, 2, 2, 1253, 1254, 5, 50, 26, 2, 1254, 1255, 7, 85, 2, 2, 1255, 1256,
	8, 62, 1, 2, 1256, 1258, 3, 2, 2, 2, 1257, 1243, 3, 2, 2, 2, 1257, 1250,
	3, 2, 2, 2, 1258, 123, 3, 2, 2, 2, 1259, 1260, 8, 63, 1, 2, 1260, 1261,
	7, 84, 2, 2, 1261, 1262, 5, 50, 26, 2, 1262, 1263, 7, 85, 2, 2, 1263, 1264,
	8, 63, 1, 2, 1264, 1273, 3, 2, 2, 2, 1265, 1266, 12, 4, 2, 2, 1266, 1267,
	7, 84, 2, 2, 1267, 1268, 5, 50, 26, 2, 1268, 1269, 7, 85, 2, 2, 1269, 1270,
	8, 63, 1, 2, 1270, 1272, 3, 2, 2, 2, 1271, 1265, 3, 2, 2, 2, 1272, 1275,
	3, 2, 2, 2, 1273, 1271, 3, 2, 2, 2, 1273, 1274, 3, 2, 2, 2, 1274, 125,
	3, 2, 2, 2, 1275, 1273, 3, 2, 2, 2, 1276, 1277, 5, 52, 27, 2, 1277, 1278,
	8, 64, 1, 2, 1278, 1294, 3, 2, 2, 2, 1279, 1280, 7, 14, 2, 2, 1280, 1281,
	7, 67, 2, 2, 1281, 1282, 5, 126, 64, 2, 1282, 1283, 7, 65, 2, 2, 1283,
	1284, 8, 64, 1, 2, 1284, 1294, 3, 2, 2, 2, 1285, 1286, 7, 50, 2, 2, 1286,
	1294, 8, 64, 1, 2, 1287, 1288, 5, 122, 62, 2, 1288, 1289, 8, 64, 1, 2,
	1289, 1294, 3, 2, 2, 2, 1290, 1291, 5, 128, 65, 2, 1291, 1292, 8, 64, 1,
	2, 1292, 1294, 3, 2, 2, 2, 1293, 1276, 3, 2, 2, 2, 1293, 1279, 3, 2, 2,
	2, 1293, 1285, 3, 2, 2, 2, 1293, 1287, 3, 2, 2, 2, 1293, 1290, 3, 2, 2,
	2, 1294, 127, 3, 2, 2, 2, 1295, 1296, 5, 130, 66, 2, 1296, 1297, 8, 65,
	1, 2, 1297, 129, 3, 2, 2, 2, 1298, 1299, 8, 66, 1, 2, 1299, 1300, 7, 50,
	2, 2, 1300, 1301, 8, 66, 1, 2, 1301, 1308, 3, 2, 2, 2, 1302, 1303, 12,
	4, 2, 2, 1303, 1304, 5, 132, 67, 2, 1304, 1305, 8, 66, 1, 2, 1305, 1307,
	3, 2, 2, 2, 1306, 1302, 3, 2, 2, 2, 1307, 1310, 3, 2, 2, 2, 1308, 1306,
	3, 2, 2, 2, 1308, 1309, 3, 2, 2, 2, 1309, 131, 3, 2, 2, 2, 1310, 1308,
	3, 2, 2, 2, 1311, 1312, 7, 58, 2, 2, 1312, 1313, 7, 50, 2, 2, 1313, 1319,
	8, 67, 1, 2, 1314, 1315, 7, 58, 2, 2, 1315, 1316, 5, 106, 54, 2, 1316,
	1317, 8, 67, 1, 2, 1317, 1319, 3, 2, 2, 2, 1318, 1311, 3, 2, 2, 2, 1318,
	1314, 3, 2, 2, 2, 1319, 133, 3, 2, 2, 2, 54, 140, 148, 156, 164, 196, 207,
	261, 318, 334, 450, 467, 480, 494, 508, 521, 540, 614, 655, 669, 720, 807,
	809, 826, 854, 859, 895, 900, 919, 931, 947, 956, 969, 985, 994, 1003,
	1011, 1049, 1068, 1101, 1113, 1126, 1139, 1152, 1185, 1205, 1227, 1241,
	1257, 1273, 1293, 1308, 1318,
}
var literalNames = []string{
	"", "'bool'", "'char'", "'f64'", "'i64'", "'&str'", "'String'", "'usize'",
	"'main'", "'powf'", "'pow'", "'as'", "'Vec'", "'vec'", "'mut'", "'let'",
	"'struct'", "'to_string'", "'to_owned'", "'true'", "'false'", "'println!'",
	"'fn'", "'abs'", "'sqrt'", "'clone'", "'new'", "'len'", "'push'", "'remove'",
	"'contains'", "'insert'", "'capacity'", "'with_capacity'", "'if'", "'else'",
	"'match'", "'loop'", "'while'", "'for'", "'in'", "'return'", "'break'",
	"'continue'", "'mod'", "'pub'", "", "", "", "", "'_'", "'|'", "'||'", "'&'",
	"'&&'", "':?'", "'::'", "':'", "'..'", "'.'", "','", "';'", "'>='", "'>'",
	"'<='", "'<'", "'=='", "'=>'", "'!='", "'='", "'%'", "'*'", "'/'", "'->'",
	"'-'", "'+'", "'!'", "'?'", "'('", "')'", "'{'", "'}'", "'['", "']'",
}
var symbolicNames = []string{
	"", "BOOL", "CHAR", "F64", "I64", "STR", "STRING", "USIZE", "MAIN", "POWF",
	"POW", "AS", "VEC", "VEC_M", "MUT", "LET", "STRUCT", "TO_STRING", "TO_OWNED",
	"TRUE", "FALSE", "PRINT", "FN", "ABS", "SQRT", "CLONE", "NEW", "LEN", "PUSH",
	"REMOVE", "CONTAINS", "INSERT", "CAPACITY", "WITH_CAPACITY", "IF", "ELSE",
	"MATCH", "LOOP", "WHILE", "FOR", "IN", "RETURN", "BREAK", "CONTINUE", "MOD",
	"PUB", "NUMERO", "DECIMAL", "ID_CAMEL", "ID", "DEFAULT", "O", "OR", "AMPERSAND",
	"AND", "PRINT_OP_DEBUG", "DOBLE_DOSPUNTOS", "DOSPUNTOS", "RANGO", "PUNTO",
	"COMA", "PUNTOCOMA", "MAYOR_I", "MAYOR", "MENOR_I", "MENOR", "IGUALDAD",
	"CASE", "DISTINTO", "IGUAL", "MODULO", "MULTIPLICACION", "DIVISION", "FN_TIPO_RETORNO",
	"RESTA", "SUMA", "NOT", "PREGUNTA", "PAR_IZQ", "PAR_DER", "LLAVE_IZQ",
	"LLAVE_DER", "CORCHETE_IZQ", "CORCHETE_DER", "CADENA", "ASCII", "CARACTER",
	"WHITESPACE", "COMMENT", "LINE_COMMENT",
}

var ruleNames = []string{
	"inicio", "instruccionesGlobales", "instruccionesModulos", "instruccionesControl",
	"instrucciones", "bloque", "bloque_control", "bloque_modulo", "instruccionGlobal",
	"instruccionModulo", "instruccion", "instruccionControl", "funcion_main",
	"declaracion", "declaracion_struct_template", "atributos_struct_template",
	"atributo_struct_template", "struct_instancia", "atributos_struct_instancia",
	"atributo_struct_instancia", "declaracion_modulo", "declaracion_funcion",
	"asignacion", "accesos_vector_array_asignacion", "expresion", "tipo_dato",
	"control_if", "bloque_else_if", "else_if", "control_if_exp", "bloque_else_if_exp",
	"else_if_exp", "control_expresion", "control_match", "control_case", "cases",
	"case_match", "control_match_exp", "control_case_exp", "cases_exp", "case_match_exp",
	"ireturn", "ibreak", "icontinue", "control_loop", "control_loop_exp", "printNormal",
	"printFormato", "elementosPrint", "control_while", "parametros_funcion",
	"parametro", "llamada_funcion", "parametros_llamada", "parametro_llamada_referencia",
	"elementos_vector", "metodos_iniciar_vector", "metodos_vector", "potencia",
	"array", "dimension_array", "dimension_acceso_array", "tipo_dato_tipo",
	"acceso_modulo", "acceso_modulo_elementos", "acceso_modulo_elemento_final",
}

type Nparser struct {
	*antlr.BaseParser
}

// NewNparser produces a new parser instance for the optional input antlr.TokenStream.
//
// The *Nparser instance produced may be reused by calling the SetInputStream method.
// The initial parser configuration is expensive to construct, and the object is not thread-safe;
// however, if used within a Golang sync.Pool, the construction cost amortizes well and the
// objects can be used in a thread-safe manner.
func NewNparser(input antlr.TokenStream) *Nparser {
	this := new(Nparser)
	deserializer := antlr.NewATNDeserializer(nil)
	deserializedATN := deserializer.DeserializeFromUInt16(parserATN)
	decisionToDFA := make([]*antlr.DFA, len(deserializedATN.DecisionToState))
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "Nparser.g4"

	return this
}

// Nparser tokens.
const (
	NparserEOF             = antlr.TokenEOF
	NparserBOOL            = 1
	NparserCHAR            = 2
	NparserF64             = 3
	NparserI64             = 4
	NparserSTR             = 5
	NparserSTRING          = 6
	NparserUSIZE           = 7
	NparserMAIN            = 8
	NparserPOWF            = 9
	NparserPOW             = 10
	NparserAS              = 11
	NparserVEC             = 12
	NparserVEC_M           = 13
	NparserMUT             = 14
	NparserLET             = 15
	NparserSTRUCT          = 16
	NparserTO_STRING       = 17
	NparserTO_OWNED        = 18
	NparserTRUE            = 19
	NparserFALSE           = 20
	NparserPRINT           = 21
	NparserFN              = 22
	NparserABS             = 23
	NparserSQRT            = 24
	NparserCLONE           = 25
	NparserNEW             = 26
	NparserLEN             = 27
	NparserPUSH            = 28
	NparserREMOVE          = 29
	NparserCONTAINS        = 30
	NparserINSERT          = 31
	NparserCAPACITY        = 32
	NparserWITH_CAPACITY   = 33
	NparserIF              = 34
	NparserELSE            = 35
	NparserMATCH           = 36
	NparserLOOP            = 37
	NparserWHILE           = 38
	NparserFOR             = 39
	NparserIN              = 40
	NparserRETURN          = 41
	NparserBREAK           = 42
	NparserCONTINUE        = 43
	NparserMOD             = 44
	NparserPUB             = 45
	NparserNUMERO          = 46
	NparserDECIMAL         = 47
	NparserID_CAMEL        = 48
	NparserID              = 49
	NparserDEFAULT         = 50
	NparserO               = 51
	NparserOR              = 52
	NparserAMPERSAND       = 53
	NparserAND             = 54
	NparserPRINT_OP_DEBUG  = 55
	NparserDOBLE_DOSPUNTOS = 56
	NparserDOSPUNTOS       = 57
	NparserRANGO           = 58
	NparserPUNTO           = 59
	NparserCOMA            = 60
	NparserPUNTOCOMA       = 61
	NparserMAYOR_I         = 62
	NparserMAYOR           = 63
	NparserMENOR_I         = 64
	NparserMENOR           = 65
	NparserIGUALDAD        = 66
	NparserCASE            = 67
	NparserDISTINTO        = 68
	NparserIGUAL           = 69
	NparserMODULO          = 70
	NparserMULTIPLICACION  = 71
	NparserDIVISION        = 72
	NparserFN_TIPO_RETORNO = 73
	NparserRESTA           = 74
	NparserSUMA            = 75
	NparserNOT             = 76
	NparserPREGUNTA        = 77
	NparserPAR_IZQ         = 78
	NparserPAR_DER         = 79
	NparserLLAVE_IZQ       = 80
	NparserLLAVE_DER       = 81
	NparserCORCHETE_IZQ    = 82
	NparserCORCHETE_DER    = 83
	NparserCADENA          = 84
	NparserASCII           = 85
	NparserCARACTER        = 86
	NparserWHITESPACE      = 87
	NparserCOMMENT         = 88
	NparserLINE_COMMENT    = 89
)

// Nparser rules.
const (
	NparserRULE_inicio                          = 0
	NparserRULE_instruccionesGlobales           = 1
	NparserRULE_instruccionesModulos            = 2
	NparserRULE_instruccionesControl            = 3
	NparserRULE_instrucciones                   = 4
	NparserRULE_bloque                          = 5
	NparserRULE_bloque_control                  = 6
	NparserRULE_bloque_modulo                   = 7
	NparserRULE_instruccionGlobal               = 8
	NparserRULE_instruccionModulo               = 9
	NparserRULE_instruccion                     = 10
	NparserRULE_instruccionControl              = 11
	NparserRULE_funcion_main                    = 12
	NparserRULE_declaracion                     = 13
	NparserRULE_declaracion_struct_template     = 14
	NparserRULE_atributos_struct_template       = 15
	NparserRULE_atributo_struct_template        = 16
	NparserRULE_struct_instancia                = 17
	NparserRULE_atributos_struct_instancia      = 18
	NparserRULE_atributo_struct_instancia       = 19
	NparserRULE_declaracion_modulo              = 20
	NparserRULE_declaracion_funcion             = 21
	NparserRULE_asignacion                      = 22
	NparserRULE_accesos_vector_array_asignacion = 23
	NparserRULE_expresion                       = 24
	NparserRULE_tipo_dato                       = 25
	NparserRULE_control_if                      = 26
	NparserRULE_bloque_else_if                  = 27
	NparserRULE_else_if                         = 28
	NparserRULE_control_if_exp                  = 29
	NparserRULE_bloque_else_if_exp              = 30
	NparserRULE_else_if_exp                     = 31
	NparserRULE_control_expresion               = 32
	NparserRULE_control_match                   = 33
	NparserRULE_control_case                    = 34
	NparserRULE_cases                           = 35
	NparserRULE_case_match                      = 36
	NparserRULE_control_match_exp               = 37
	NparserRULE_control_case_exp                = 38
	NparserRULE_cases_exp                       = 39
	NparserRULE_case_match_exp                  = 40
	NparserRULE_ireturn                         = 41
	NparserRULE_ibreak                          = 42
	NparserRULE_icontinue                       = 43
	NparserRULE_control_loop                    = 44
	NparserRULE_control_loop_exp                = 45
	NparserRULE_printNormal                     = 46
	NparserRULE_printFormato                    = 47
	NparserRULE_elementosPrint                  = 48
	NparserRULE_control_while                   = 49
	NparserRULE_parametros_funcion              = 50
	NparserRULE_parametro                       = 51
	NparserRULE_llamada_funcion                 = 52
	NparserRULE_parametros_llamada              = 53
	NparserRULE_parametro_llamada_referencia    = 54
	NparserRULE_elementos_vector                = 55
	NparserRULE_metodos_iniciar_vector          = 56
	NparserRULE_metodos_vector                  = 57
	NparserRULE_potencia                        = 58
	NparserRULE_array                           = 59
	NparserRULE_dimension_array                 = 60
	NparserRULE_dimension_acceso_array          = 61
	NparserRULE_tipo_dato_tipo                  = 62
	NparserRULE_acceso_modulo                   = 63
	NparserRULE_acceso_modulo_elementos         = 64
	NparserRULE_acceso_modulo_elemento_final    = 65
)

// IInicioContext is an interface to support dynamic dispatch.
type IInicioContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_instruccionesGlobales returns the _instruccionesGlobales rule contexts.
	Get_instruccionesGlobales() IInstruccionesGlobalesContext

	// Set_instruccionesGlobales sets the _instruccionesGlobales rule contexts.
	Set_instruccionesGlobales(IInstruccionesGlobalesContext)

	// GetLista returns the lista attribute.
	GetLista() *arraylist.List

	// SetLista sets the lista attribute.
	SetLista(*arraylist.List)

	// IsInicioContext differentiates from other interfaces.
	IsInicioContext()
}

type InicioContext struct {
	*antlr.BaseParserRuleContext
	parser                 antlr.Parser
	lista                  *arraylist.List
	_instruccionesGlobales IInstruccionesGlobalesContext
}

func NewEmptyInicioContext() *InicioContext {
	var p = new(InicioContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_inicio
	return p
}

func (*InicioContext) IsInicioContext() {}

func NewInicioContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InicioContext {
	var p = new(InicioContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_inicio

	return p
}

func (s *InicioContext) GetParser() antlr.Parser { return s.parser }

func (s *InicioContext) Get_instruccionesGlobales() IInstruccionesGlobalesContext {
	return s._instruccionesGlobales
}

func (s *InicioContext) Set_instruccionesGlobales(v IInstruccionesGlobalesContext) {
	s._instruccionesGlobales = v
}

func (s *InicioContext) GetLista() *arraylist.List { return s.lista }

func (s *InicioContext) SetLista(v *arraylist.List) { s.lista = v }

func (s *InicioContext) InstruccionesGlobales() IInstruccionesGlobalesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstruccionesGlobalesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInstruccionesGlobalesContext)
}

func (s *InicioContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InicioContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InicioContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterInicio(s)
	}
}

func (s *InicioContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitInicio(s)
	}
}

func (p *Nparser) Inicio() (localctx IInicioContext) {
	this := p
	_ = this

	localctx = NewInicioContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, NparserRULE_inicio)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(132)

		var _x = p.InstruccionesGlobales()

		localctx.(*InicioContext)._instruccionesGlobales = _x
	}

	localctx.(*InicioContext).lista = localctx.(*InicioContext).Get_instruccionesGlobales().GetList()

	return localctx
}

// IInstruccionesGlobalesContext is an interface to support dynamic dispatch.
type IInstruccionesGlobalesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_instruccionGlobal returns the _instruccionGlobal rule contexts.
	Get_instruccionGlobal() IInstruccionGlobalContext

	// Set_instruccionGlobal sets the _instruccionGlobal rule contexts.
	Set_instruccionGlobal(IInstruccionGlobalContext)

	// GetE returns the e rule context list.
	GetE() []IInstruccionGlobalContext

	// SetE sets the e rule context list.
	SetE([]IInstruccionGlobalContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsInstruccionesGlobalesContext differentiates from other interfaces.
	IsInstruccionesGlobalesContext()
}

type InstruccionesGlobalesContext struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	list               *arraylist.List
	_instruccionGlobal IInstruccionGlobalContext
	e                  []IInstruccionGlobalContext
}

func NewEmptyInstruccionesGlobalesContext() *InstruccionesGlobalesContext {
	var p = new(InstruccionesGlobalesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_instruccionesGlobales
	return p
}

func (*InstruccionesGlobalesContext) IsInstruccionesGlobalesContext() {}

func NewInstruccionesGlobalesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstruccionesGlobalesContext {
	var p = new(InstruccionesGlobalesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_instruccionesGlobales

	return p
}

func (s *InstruccionesGlobalesContext) GetParser() antlr.Parser { return s.parser }

func (s *InstruccionesGlobalesContext) Get_instruccionGlobal() IInstruccionGlobalContext {
	return s._instruccionGlobal
}

func (s *InstruccionesGlobalesContext) Set_instruccionGlobal(v IInstruccionGlobalContext) {
	s._instruccionGlobal = v
}

func (s *InstruccionesGlobalesContext) GetE() []IInstruccionGlobalContext { return s.e }

func (s *InstruccionesGlobalesContext) SetE(v []IInstruccionGlobalContext) { s.e = v }

func (s *InstruccionesGlobalesContext) GetList() *arraylist.List { return s.list }

func (s *InstruccionesGlobalesContext) SetList(v *arraylist.List) { s.list = v }

func (s *InstruccionesGlobalesContext) AllInstruccionGlobal() []IInstruccionGlobalContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInstruccionGlobalContext)(nil)).Elem())
	var tst = make([]IInstruccionGlobalContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInstruccionGlobalContext)
		}
	}

	return tst
}

func (s *InstruccionesGlobalesContext) InstruccionGlobal(i int) IInstruccionGlobalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstruccionGlobalContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInstruccionGlobalContext)
}

func (s *InstruccionesGlobalesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstruccionesGlobalesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InstruccionesGlobalesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterInstruccionesGlobales(s)
	}
}

func (s *InstruccionesGlobalesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitInstruccionesGlobales(s)
	}
}

func (p *Nparser) InstruccionesGlobales() (localctx IInstruccionesGlobalesContext) {
	this := p
	_ = this

	localctx = NewInstruccionesGlobalesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, NparserRULE_instruccionesGlobales)

	localctx.(*InstruccionesGlobalesContext).list = arraylist.New()

	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(138)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ((_la-16)&-(0x1f+1)) == 0 && ((1<<uint((_la-16)))&((1<<(NparserSTRUCT-16))|(1<<(NparserFN-16))|(1<<(NparserMOD-16))|(1<<(NparserPUB-16)))) != 0 {
		{
			p.SetState(135)

			var _x = p.InstruccionGlobal()

			localctx.(*InstruccionesGlobalesContext)._instruccionGlobal = _x
		}
		localctx.(*InstruccionesGlobalesContext).e = append(localctx.(*InstruccionesGlobalesContext).e, localctx.(*InstruccionesGlobalesContext)._instruccionGlobal)

		p.SetState(140)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	listInt := localctx.(*InstruccionesGlobalesContext).GetE()
	for _, e := range listInt {
		localctx.(*InstruccionesGlobalesContext).list.Add(e.GetEx())
	}

	return localctx
}

// IInstruccionesModulosContext is an interface to support dynamic dispatch.
type IInstruccionesModulosContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_instruccionModulo returns the _instruccionModulo rule contexts.
	Get_instruccionModulo() IInstruccionModuloContext

	// Set_instruccionModulo sets the _instruccionModulo rule contexts.
	Set_instruccionModulo(IInstruccionModuloContext)

	// GetE returns the e rule context list.
	GetE() []IInstruccionModuloContext

	// SetE sets the e rule context list.
	SetE([]IInstruccionModuloContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsInstruccionesModulosContext differentiates from other interfaces.
	IsInstruccionesModulosContext()
}

type InstruccionesModulosContext struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	list               *arraylist.List
	_instruccionModulo IInstruccionModuloContext
	e                  []IInstruccionModuloContext
}

func NewEmptyInstruccionesModulosContext() *InstruccionesModulosContext {
	var p = new(InstruccionesModulosContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_instruccionesModulos
	return p
}

func (*InstruccionesModulosContext) IsInstruccionesModulosContext() {}

func NewInstruccionesModulosContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstruccionesModulosContext {
	var p = new(InstruccionesModulosContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_instruccionesModulos

	return p
}

func (s *InstruccionesModulosContext) GetParser() antlr.Parser { return s.parser }

func (s *InstruccionesModulosContext) Get_instruccionModulo() IInstruccionModuloContext {
	return s._instruccionModulo
}

func (s *InstruccionesModulosContext) Set_instruccionModulo(v IInstruccionModuloContext) {
	s._instruccionModulo = v
}

func (s *InstruccionesModulosContext) GetE() []IInstruccionModuloContext { return s.e }

func (s *InstruccionesModulosContext) SetE(v []IInstruccionModuloContext) { s.e = v }

func (s *InstruccionesModulosContext) GetList() *arraylist.List { return s.list }

func (s *InstruccionesModulosContext) SetList(v *arraylist.List) { s.list = v }

func (s *InstruccionesModulosContext) AllInstruccionModulo() []IInstruccionModuloContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInstruccionModuloContext)(nil)).Elem())
	var tst = make([]IInstruccionModuloContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInstruccionModuloContext)
		}
	}

	return tst
}

func (s *InstruccionesModulosContext) InstruccionModulo(i int) IInstruccionModuloContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstruccionModuloContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInstruccionModuloContext)
}

func (s *InstruccionesModulosContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstruccionesModulosContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InstruccionesModulosContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterInstruccionesModulos(s)
	}
}

func (s *InstruccionesModulosContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitInstruccionesModulos(s)
	}
}

func (p *Nparser) InstruccionesModulos() (localctx IInstruccionesModulosContext) {
	this := p
	_ = this

	localctx = NewInstruccionesModulosContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, NparserRULE_instruccionesModulos)

	localctx.(*InstruccionesModulosContext).list = arraylist.New()

	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(146)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ((_la-16)&-(0x1f+1)) == 0 && ((1<<uint((_la-16)))&((1<<(NparserSTRUCT-16))|(1<<(NparserFN-16))|(1<<(NparserMOD-16))|(1<<(NparserPUB-16)))) != 0 {
		{
			p.SetState(143)

			var _x = p.InstruccionModulo()

			localctx.(*InstruccionesModulosContext)._instruccionModulo = _x
		}
		localctx.(*InstruccionesModulosContext).e = append(localctx.(*InstruccionesModulosContext).e, localctx.(*InstruccionesModulosContext)._instruccionModulo)

		p.SetState(148)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	listInt := localctx.(*InstruccionesModulosContext).GetE()
	for _, e := range listInt {
		localctx.(*InstruccionesModulosContext).list.Add(e.GetEx())
	}

	return localctx
}

// IInstruccionesControlContext is an interface to support dynamic dispatch.
type IInstruccionesControlContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_instruccionControl returns the _instruccionControl rule contexts.
	Get_instruccionControl() IInstruccionControlContext

	// Set_instruccionControl sets the _instruccionControl rule contexts.
	Set_instruccionControl(IInstruccionControlContext)

	// GetE returns the e rule context list.
	GetE() []IInstruccionControlContext

	// SetE sets the e rule context list.
	SetE([]IInstruccionControlContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsInstruccionesControlContext differentiates from other interfaces.
	IsInstruccionesControlContext()
}

type InstruccionesControlContext struct {
	*antlr.BaseParserRuleContext
	parser              antlr.Parser
	list                *arraylist.List
	_instruccionControl IInstruccionControlContext
	e                   []IInstruccionControlContext
}

func NewEmptyInstruccionesControlContext() *InstruccionesControlContext {
	var p = new(InstruccionesControlContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_instruccionesControl
	return p
}

func (*InstruccionesControlContext) IsInstruccionesControlContext() {}

func NewInstruccionesControlContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstruccionesControlContext {
	var p = new(InstruccionesControlContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_instruccionesControl

	return p
}

func (s *InstruccionesControlContext) GetParser() antlr.Parser { return s.parser }

func (s *InstruccionesControlContext) Get_instruccionControl() IInstruccionControlContext {
	return s._instruccionControl
}

func (s *InstruccionesControlContext) Set_instruccionControl(v IInstruccionControlContext) {
	s._instruccionControl = v
}

func (s *InstruccionesControlContext) GetE() []IInstruccionControlContext { return s.e }

func (s *InstruccionesControlContext) SetE(v []IInstruccionControlContext) { s.e = v }

func (s *InstruccionesControlContext) GetList() *arraylist.List { return s.list }

func (s *InstruccionesControlContext) SetList(v *arraylist.List) { s.list = v }

func (s *InstruccionesControlContext) AllInstruccionControl() []IInstruccionControlContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInstruccionControlContext)(nil)).Elem())
	var tst = make([]IInstruccionControlContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInstruccionControlContext)
		}
	}

	return tst
}

func (s *InstruccionesControlContext) InstruccionControl(i int) IInstruccionControlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstruccionControlContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInstruccionControlContext)
}

func (s *InstruccionesControlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstruccionesControlContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InstruccionesControlContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterInstruccionesControl(s)
	}
}

func (s *InstruccionesControlContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitInstruccionesControl(s)
	}
}

func (p *Nparser) InstruccionesControl() (localctx IInstruccionesControlContext) {
	this := p
	_ = this

	localctx = NewInstruccionesControlContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, NparserRULE_instruccionesControl)

	localctx.(*InstruccionesControlContext).list = arraylist.New()

	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(154)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<NparserBOOL)|(1<<NparserCHAR)|(1<<NparserF64)|(1<<NparserI64)|(1<<NparserSTR)|(1<<NparserSTRING)|(1<<NparserUSIZE)|(1<<NparserVEC)|(1<<NparserVEC_M)|(1<<NparserLET)|(1<<NparserTRUE)|(1<<NparserFALSE)|(1<<NparserPRINT))) != 0) || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(NparserIF-34))|(1<<(NparserMATCH-34))|(1<<(NparserLOOP-34))|(1<<(NparserWHILE-34))|(1<<(NparserRETURN-34))|(1<<(NparserBREAK-34))|(1<<(NparserCONTINUE-34))|(1<<(NparserNUMERO-34))|(1<<(NparserDECIMAL-34))|(1<<(NparserID_CAMEL-34))|(1<<(NparserID-34)))) != 0) || (((_la-74)&-(0x1f+1)) == 0 && ((1<<uint((_la-74)))&((1<<(NparserRESTA-74))|(1<<(NparserNOT-74))|(1<<(NparserPAR_IZQ-74))|(1<<(NparserCORCHETE_IZQ-74))|(1<<(NparserCADENA-74))|(1<<(NparserCARACTER-74)))) != 0) {
		{
			p.SetState(151)

			var _x = p.InstruccionControl()

			localctx.(*InstruccionesControlContext)._instruccionControl = _x
		}
		localctx.(*InstruccionesControlContext).e = append(localctx.(*InstruccionesControlContext).e, localctx.(*InstruccionesControlContext)._instruccionControl)

		p.SetState(156)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	listInt := localctx.(*InstruccionesControlContext).GetE()
	for _, e := range listInt {
		localctx.(*InstruccionesControlContext).list.Add(e.GetEx())
	}

	return localctx
}

// IInstruccionesContext is an interface to support dynamic dispatch.
type IInstruccionesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_instruccion returns the _instruccion rule contexts.
	Get_instruccion() IInstruccionContext

	// Set_instruccion sets the _instruccion rule contexts.
	Set_instruccion(IInstruccionContext)

	// GetE returns the e rule context list.
	GetE() []IInstruccionContext

	// SetE sets the e rule context list.
	SetE([]IInstruccionContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsInstruccionesContext differentiates from other interfaces.
	IsInstruccionesContext()
}

type InstruccionesContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	list         *arraylist.List
	_instruccion IInstruccionContext
	e            []IInstruccionContext
}

func NewEmptyInstruccionesContext() *InstruccionesContext {
	var p = new(InstruccionesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_instrucciones
	return p
}

func (*InstruccionesContext) IsInstruccionesContext() {}

func NewInstruccionesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstruccionesContext {
	var p = new(InstruccionesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_instrucciones

	return p
}

func (s *InstruccionesContext) GetParser() antlr.Parser { return s.parser }

func (s *InstruccionesContext) Get_instruccion() IInstruccionContext { return s._instruccion }

func (s *InstruccionesContext) Set_instruccion(v IInstruccionContext) { s._instruccion = v }

func (s *InstruccionesContext) GetE() []IInstruccionContext { return s.e }

func (s *InstruccionesContext) SetE(v []IInstruccionContext) { s.e = v }

func (s *InstruccionesContext) GetList() *arraylist.List { return s.list }

func (s *InstruccionesContext) SetList(v *arraylist.List) { s.list = v }

func (s *InstruccionesContext) AllInstruccion() []IInstruccionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInstruccionContext)(nil)).Elem())
	var tst = make([]IInstruccionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInstruccionContext)
		}
	}

	return tst
}

func (s *InstruccionesContext) Instruccion(i int) IInstruccionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstruccionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInstruccionContext)
}

func (s *InstruccionesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstruccionesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InstruccionesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterInstrucciones(s)
	}
}

func (s *InstruccionesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitInstrucciones(s)
	}
}

func (p *Nparser) Instrucciones() (localctx IInstruccionesContext) {
	this := p
	_ = this

	localctx = NewInstruccionesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, NparserRULE_instrucciones)

	localctx.(*InstruccionesContext).list = arraylist.New()

	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(162)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<NparserBOOL)|(1<<NparserCHAR)|(1<<NparserF64)|(1<<NparserI64)|(1<<NparserSTR)|(1<<NparserSTRING)|(1<<NparserUSIZE)|(1<<NparserVEC)|(1<<NparserVEC_M)|(1<<NparserLET)|(1<<NparserTRUE)|(1<<NparserFALSE)|(1<<NparserPRINT))) != 0) || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(NparserIF-34))|(1<<(NparserMATCH-34))|(1<<(NparserLOOP-34))|(1<<(NparserWHILE-34))|(1<<(NparserRETURN-34))|(1<<(NparserBREAK-34))|(1<<(NparserCONTINUE-34))|(1<<(NparserNUMERO-34))|(1<<(NparserDECIMAL-34))|(1<<(NparserID_CAMEL-34))|(1<<(NparserID-34)))) != 0) || (((_la-74)&-(0x1f+1)) == 0 && ((1<<uint((_la-74)))&((1<<(NparserRESTA-74))|(1<<(NparserNOT-74))|(1<<(NparserPAR_IZQ-74))|(1<<(NparserCORCHETE_IZQ-74))|(1<<(NparserCADENA-74))|(1<<(NparserCARACTER-74)))) != 0) {
		{
			p.SetState(159)

			var _x = p.Instruccion()

			localctx.(*InstruccionesContext)._instruccion = _x
		}
		localctx.(*InstruccionesContext).e = append(localctx.(*InstruccionesContext).e, localctx.(*InstruccionesContext)._instruccion)

		p.SetState(164)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	listInt := localctx.(*InstruccionesContext).GetE()
	for _, e := range listInt {
		localctx.(*InstruccionesContext).list.Add(e.GetEx())
	}

	return localctx
}

// IBloqueContext is an interface to support dynamic dispatch.
type IBloqueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_instrucciones returns the _instrucciones rule contexts.
	Get_instrucciones() IInstruccionesContext

	// Set_instrucciones sets the _instrucciones rule contexts.
	Set_instrucciones(IInstruccionesContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsBloqueContext differentiates from other interfaces.
	IsBloqueContext()
}

type BloqueContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	list           *arraylist.List
	_instrucciones IInstruccionesContext
}

func NewEmptyBloqueContext() *BloqueContext {
	var p = new(BloqueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_bloque
	return p
}

func (*BloqueContext) IsBloqueContext() {}

func NewBloqueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BloqueContext {
	var p = new(BloqueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_bloque

	return p
}

func (s *BloqueContext) GetParser() antlr.Parser { return s.parser }

func (s *BloqueContext) Get_instrucciones() IInstruccionesContext { return s._instrucciones }

func (s *BloqueContext) Set_instrucciones(v IInstruccionesContext) { s._instrucciones = v }

func (s *BloqueContext) GetList() *arraylist.List { return s.list }

func (s *BloqueContext) SetList(v *arraylist.List) { s.list = v }

func (s *BloqueContext) LLAVE_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserLLAVE_IZQ, 0)
}

func (s *BloqueContext) Instrucciones() IInstruccionesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstruccionesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInstruccionesContext)
}

func (s *BloqueContext) LLAVE_DER() antlr.TerminalNode {
	return s.GetToken(NparserLLAVE_DER, 0)
}

func (s *BloqueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BloqueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BloqueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterBloque(s)
	}
}

func (s *BloqueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitBloque(s)
	}
}

func (p *Nparser) Bloque() (localctx IBloqueContext) {
	this := p
	_ = this

	localctx = NewBloqueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, NparserRULE_bloque)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(167)
		p.Match(NparserLLAVE_IZQ)
	}
	{
		p.SetState(168)

		var _x = p.Instrucciones()

		localctx.(*BloqueContext)._instrucciones = _x
	}
	{
		p.SetState(169)
		p.Match(NparserLLAVE_DER)
	}

	localctx.(*BloqueContext).list = localctx.(*BloqueContext).Get_instrucciones().GetList()

	return localctx
}

// IBloque_controlContext is an interface to support dynamic dispatch.
type IBloque_controlContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_instruccionesControl returns the _instruccionesControl rule contexts.
	Get_instruccionesControl() IInstruccionesControlContext

	// Set_instruccionesControl sets the _instruccionesControl rule contexts.
	Set_instruccionesControl(IInstruccionesControlContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsBloque_controlContext differentiates from other interfaces.
	IsBloque_controlContext()
}

type Bloque_controlContext struct {
	*antlr.BaseParserRuleContext
	parser                antlr.Parser
	list                  *arraylist.List
	_instruccionesControl IInstruccionesControlContext
}

func NewEmptyBloque_controlContext() *Bloque_controlContext {
	var p = new(Bloque_controlContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_bloque_control
	return p
}

func (*Bloque_controlContext) IsBloque_controlContext() {}

func NewBloque_controlContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bloque_controlContext {
	var p = new(Bloque_controlContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_bloque_control

	return p
}

func (s *Bloque_controlContext) GetParser() antlr.Parser { return s.parser }

func (s *Bloque_controlContext) Get_instruccionesControl() IInstruccionesControlContext {
	return s._instruccionesControl
}

func (s *Bloque_controlContext) Set_instruccionesControl(v IInstruccionesControlContext) {
	s._instruccionesControl = v
}

func (s *Bloque_controlContext) GetList() *arraylist.List { return s.list }

func (s *Bloque_controlContext) SetList(v *arraylist.List) { s.list = v }

func (s *Bloque_controlContext) LLAVE_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserLLAVE_IZQ, 0)
}

func (s *Bloque_controlContext) InstruccionesControl() IInstruccionesControlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstruccionesControlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInstruccionesControlContext)
}

func (s *Bloque_controlContext) LLAVE_DER() antlr.TerminalNode {
	return s.GetToken(NparserLLAVE_DER, 0)
}

func (s *Bloque_controlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bloque_controlContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bloque_controlContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterBloque_control(s)
	}
}

func (s *Bloque_controlContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitBloque_control(s)
	}
}

func (p *Nparser) Bloque_control() (localctx IBloque_controlContext) {
	this := p
	_ = this

	localctx = NewBloque_controlContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, NparserRULE_bloque_control)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(172)
		p.Match(NparserLLAVE_IZQ)
	}
	{
		p.SetState(173)

		var _x = p.InstruccionesControl()

		localctx.(*Bloque_controlContext)._instruccionesControl = _x
	}
	{
		p.SetState(174)
		p.Match(NparserLLAVE_DER)
	}

	localctx.(*Bloque_controlContext).list = localctx.(*Bloque_controlContext).Get_instruccionesControl().GetList()

	return localctx
}

// IBloque_moduloContext is an interface to support dynamic dispatch.
type IBloque_moduloContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_instruccionesModulos returns the _instruccionesModulos rule contexts.
	Get_instruccionesModulos() IInstruccionesModulosContext

	// Set_instruccionesModulos sets the _instruccionesModulos rule contexts.
	Set_instruccionesModulos(IInstruccionesModulosContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsBloque_moduloContext differentiates from other interfaces.
	IsBloque_moduloContext()
}

type Bloque_moduloContext struct {
	*antlr.BaseParserRuleContext
	parser                antlr.Parser
	list                  *arraylist.List
	_instruccionesModulos IInstruccionesModulosContext
}

func NewEmptyBloque_moduloContext() *Bloque_moduloContext {
	var p = new(Bloque_moduloContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_bloque_modulo
	return p
}

func (*Bloque_moduloContext) IsBloque_moduloContext() {}

func NewBloque_moduloContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bloque_moduloContext {
	var p = new(Bloque_moduloContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_bloque_modulo

	return p
}

func (s *Bloque_moduloContext) GetParser() antlr.Parser { return s.parser }

func (s *Bloque_moduloContext) Get_instruccionesModulos() IInstruccionesModulosContext {
	return s._instruccionesModulos
}

func (s *Bloque_moduloContext) Set_instruccionesModulos(v IInstruccionesModulosContext) {
	s._instruccionesModulos = v
}

func (s *Bloque_moduloContext) GetList() *arraylist.List { return s.list }

func (s *Bloque_moduloContext) SetList(v *arraylist.List) { s.list = v }

func (s *Bloque_moduloContext) LLAVE_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserLLAVE_IZQ, 0)
}

func (s *Bloque_moduloContext) InstruccionesModulos() IInstruccionesModulosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstruccionesModulosContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInstruccionesModulosContext)
}

func (s *Bloque_moduloContext) LLAVE_DER() antlr.TerminalNode {
	return s.GetToken(NparserLLAVE_DER, 0)
}

func (s *Bloque_moduloContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bloque_moduloContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bloque_moduloContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterBloque_modulo(s)
	}
}

func (s *Bloque_moduloContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitBloque_modulo(s)
	}
}

func (p *Nparser) Bloque_modulo() (localctx IBloque_moduloContext) {
	this := p
	_ = this

	localctx = NewBloque_moduloContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, NparserRULE_bloque_modulo)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(177)
		p.Match(NparserLLAVE_IZQ)
	}
	{
		p.SetState(178)

		var _x = p.InstruccionesModulos()

		localctx.(*Bloque_moduloContext)._instruccionesModulos = _x
	}
	{
		p.SetState(179)
		p.Match(NparserLLAVE_DER)
	}

	localctx.(*Bloque_moduloContext).list = localctx.(*Bloque_moduloContext).Get_instruccionesModulos().GetList()

	return localctx
}

// IInstruccionGlobalContext is an interface to support dynamic dispatch.
type IInstruccionGlobalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_funcion_main returns the _funcion_main rule contexts.
	Get_funcion_main() IFuncion_mainContext

	// Get_declaracion_struct_template returns the _declaracion_struct_template rule contexts.
	Get_declaracion_struct_template() IDeclaracion_struct_templateContext

	// Get_declaracion_funcion returns the _declaracion_funcion rule contexts.
	Get_declaracion_funcion() IDeclaracion_funcionContext

	// Get_declaracion_modulo returns the _declaracion_modulo rule contexts.
	Get_declaracion_modulo() IDeclaracion_moduloContext

	// Set_funcion_main sets the _funcion_main rule contexts.
	Set_funcion_main(IFuncion_mainContext)

	// Set_declaracion_struct_template sets the _declaracion_struct_template rule contexts.
	Set_declaracion_struct_template(IDeclaracion_struct_templateContext)

	// Set_declaracion_funcion sets the _declaracion_funcion rule contexts.
	Set_declaracion_funcion(IDeclaracion_funcionContext)

	// Set_declaracion_modulo sets the _declaracion_modulo rule contexts.
	Set_declaracion_modulo(IDeclaracion_moduloContext)

	// GetEx returns the ex attribute.
	GetEx() interface{}

	// SetEx sets the ex attribute.
	SetEx(interface{})

	// IsInstruccionGlobalContext differentiates from other interfaces.
	IsInstruccionGlobalContext()
}

type InstruccionGlobalContext struct {
	*antlr.BaseParserRuleContext
	parser                       antlr.Parser
	ex                           interface{}
	_funcion_main                IFuncion_mainContext
	_declaracion_struct_template IDeclaracion_struct_templateContext
	_declaracion_funcion         IDeclaracion_funcionContext
	_declaracion_modulo          IDeclaracion_moduloContext
}

func NewEmptyInstruccionGlobalContext() *InstruccionGlobalContext {
	var p = new(InstruccionGlobalContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_instruccionGlobal
	return p
}

func (*InstruccionGlobalContext) IsInstruccionGlobalContext() {}

func NewInstruccionGlobalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstruccionGlobalContext {
	var p = new(InstruccionGlobalContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_instruccionGlobal

	return p
}

func (s *InstruccionGlobalContext) GetParser() antlr.Parser { return s.parser }

func (s *InstruccionGlobalContext) Get_funcion_main() IFuncion_mainContext { return s._funcion_main }

func (s *InstruccionGlobalContext) Get_declaracion_struct_template() IDeclaracion_struct_templateContext {
	return s._declaracion_struct_template
}

func (s *InstruccionGlobalContext) Get_declaracion_funcion() IDeclaracion_funcionContext {
	return s._declaracion_funcion
}

func (s *InstruccionGlobalContext) Get_declaracion_modulo() IDeclaracion_moduloContext {
	return s._declaracion_modulo
}

func (s *InstruccionGlobalContext) Set_funcion_main(v IFuncion_mainContext) { s._funcion_main = v }

func (s *InstruccionGlobalContext) Set_declaracion_struct_template(v IDeclaracion_struct_templateContext) {
	s._declaracion_struct_template = v
}

func (s *InstruccionGlobalContext) Set_declaracion_funcion(v IDeclaracion_funcionContext) {
	s._declaracion_funcion = v
}

func (s *InstruccionGlobalContext) Set_declaracion_modulo(v IDeclaracion_moduloContext) {
	s._declaracion_modulo = v
}

func (s *InstruccionGlobalContext) GetEx() interface{} { return s.ex }

func (s *InstruccionGlobalContext) SetEx(v interface{}) { s.ex = v }

func (s *InstruccionGlobalContext) Funcion_main() IFuncion_mainContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFuncion_mainContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFuncion_mainContext)
}

func (s *InstruccionGlobalContext) Declaracion_struct_template() IDeclaracion_struct_templateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaracion_struct_templateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaracion_struct_templateContext)
}

func (s *InstruccionGlobalContext) Declaracion_funcion() IDeclaracion_funcionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaracion_funcionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaracion_funcionContext)
}

func (s *InstruccionGlobalContext) Declaracion_modulo() IDeclaracion_moduloContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaracion_moduloContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaracion_moduloContext)
}

func (s *InstruccionGlobalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstruccionGlobalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InstruccionGlobalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterInstruccionGlobal(s)
	}
}

func (s *InstruccionGlobalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitInstruccionGlobal(s)
	}
}

func (p *Nparser) InstruccionGlobal() (localctx IInstruccionGlobalContext) {
	this := p
	_ = this

	localctx = NewInstruccionGlobalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, NparserRULE_instruccionGlobal)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(194)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(182)

			var _x = p.Funcion_main()

			localctx.(*InstruccionGlobalContext)._funcion_main = _x
		}
		localctx.(*InstruccionGlobalContext).ex = localctx.(*InstruccionGlobalContext).Get_funcion_main().GetEx()

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(185)

			var _x = p.Declaracion_struct_template()

			localctx.(*InstruccionGlobalContext)._declaracion_struct_template = _x
		}
		localctx.(*InstruccionGlobalContext).ex = localctx.(*InstruccionGlobalContext).Get_declaracion_struct_template().GetEx()

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(188)

			var _x = p.Declaracion_funcion()

			localctx.(*InstruccionGlobalContext)._declaracion_funcion = _x
		}
		localctx.(*InstruccionGlobalContext).ex = localctx.(*InstruccionGlobalContext).Get_declaracion_funcion().GetEx()

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(191)

			var _x = p.Declaracion_modulo()

			localctx.(*InstruccionGlobalContext)._declaracion_modulo = _x
		}
		localctx.(*InstruccionGlobalContext).ex = localctx.(*InstruccionGlobalContext).Get_declaracion_modulo().GetEx()

	}

	return localctx
}

// IInstruccionModuloContext is an interface to support dynamic dispatch.
type IInstruccionModuloContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_declaracion_struct_template returns the _declaracion_struct_template rule contexts.
	Get_declaracion_struct_template() IDeclaracion_struct_templateContext

	// Get_declaracion_funcion returns the _declaracion_funcion rule contexts.
	Get_declaracion_funcion() IDeclaracion_funcionContext

	// Get_declaracion_modulo returns the _declaracion_modulo rule contexts.
	Get_declaracion_modulo() IDeclaracion_moduloContext

	// Set_declaracion_struct_template sets the _declaracion_struct_template rule contexts.
	Set_declaracion_struct_template(IDeclaracion_struct_templateContext)

	// Set_declaracion_funcion sets the _declaracion_funcion rule contexts.
	Set_declaracion_funcion(IDeclaracion_funcionContext)

	// Set_declaracion_modulo sets the _declaracion_modulo rule contexts.
	Set_declaracion_modulo(IDeclaracion_moduloContext)

	// GetEx returns the ex attribute.
	GetEx() interface{}

	// SetEx sets the ex attribute.
	SetEx(interface{})

	// IsInstruccionModuloContext differentiates from other interfaces.
	IsInstruccionModuloContext()
}

type InstruccionModuloContext struct {
	*antlr.BaseParserRuleContext
	parser                       antlr.Parser
	ex                           interface{}
	_declaracion_struct_template IDeclaracion_struct_templateContext
	_declaracion_funcion         IDeclaracion_funcionContext
	_declaracion_modulo          IDeclaracion_moduloContext
}

func NewEmptyInstruccionModuloContext() *InstruccionModuloContext {
	var p = new(InstruccionModuloContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_instruccionModulo
	return p
}

func (*InstruccionModuloContext) IsInstruccionModuloContext() {}

func NewInstruccionModuloContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstruccionModuloContext {
	var p = new(InstruccionModuloContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_instruccionModulo

	return p
}

func (s *InstruccionModuloContext) GetParser() antlr.Parser { return s.parser }

func (s *InstruccionModuloContext) Get_declaracion_struct_template() IDeclaracion_struct_templateContext {
	return s._declaracion_struct_template
}

func (s *InstruccionModuloContext) Get_declaracion_funcion() IDeclaracion_funcionContext {
	return s._declaracion_funcion
}

func (s *InstruccionModuloContext) Get_declaracion_modulo() IDeclaracion_moduloContext {
	return s._declaracion_modulo
}

func (s *InstruccionModuloContext) Set_declaracion_struct_template(v IDeclaracion_struct_templateContext) {
	s._declaracion_struct_template = v
}

func (s *InstruccionModuloContext) Set_declaracion_funcion(v IDeclaracion_funcionContext) {
	s._declaracion_funcion = v
}

func (s *InstruccionModuloContext) Set_declaracion_modulo(v IDeclaracion_moduloContext) {
	s._declaracion_modulo = v
}

func (s *InstruccionModuloContext) GetEx() interface{} { return s.ex }

func (s *InstruccionModuloContext) SetEx(v interface{}) { s.ex = v }

func (s *InstruccionModuloContext) Declaracion_struct_template() IDeclaracion_struct_templateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaracion_struct_templateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaracion_struct_templateContext)
}

func (s *InstruccionModuloContext) Declaracion_funcion() IDeclaracion_funcionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaracion_funcionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaracion_funcionContext)
}

func (s *InstruccionModuloContext) Declaracion_modulo() IDeclaracion_moduloContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaracion_moduloContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaracion_moduloContext)
}

func (s *InstruccionModuloContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstruccionModuloContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InstruccionModuloContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterInstruccionModulo(s)
	}
}

func (s *InstruccionModuloContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitInstruccionModulo(s)
	}
}

func (p *Nparser) InstruccionModulo() (localctx IInstruccionModuloContext) {
	this := p
	_ = this

	localctx = NewInstruccionModuloContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, NparserRULE_instruccionModulo)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(205)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(196)

			var _x = p.Declaracion_struct_template()

			localctx.(*InstruccionModuloContext)._declaracion_struct_template = _x
		}
		localctx.(*InstruccionModuloContext).ex = localctx.(*InstruccionModuloContext).Get_declaracion_struct_template().GetEx()

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(199)

			var _x = p.Declaracion_funcion()

			localctx.(*InstruccionModuloContext)._declaracion_funcion = _x
		}
		localctx.(*InstruccionModuloContext).ex = localctx.(*InstruccionModuloContext).Get_declaracion_funcion().GetEx()

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(202)

			var _x = p.Declaracion_modulo()

			localctx.(*InstruccionModuloContext)._declaracion_modulo = _x
		}
		localctx.(*InstruccionModuloContext).ex = localctx.(*InstruccionModuloContext).Get_declaracion_modulo().GetEx()

	}

	return localctx
}

// IInstruccionContext is an interface to support dynamic dispatch.
type IInstruccionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_llamada_funcion returns the _llamada_funcion rule contexts.
	Get_llamada_funcion() ILlamada_funcionContext

	// Get_asignacion returns the _asignacion rule contexts.
	Get_asignacion() IAsignacionContext

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// Get_declaracion returns the _declaracion rule contexts.
	Get_declaracion() IDeclaracionContext

	// Get_control_if returns the _control_if rule contexts.
	Get_control_if() IControl_ifContext

	// Get_control_match returns the _control_match rule contexts.
	Get_control_match() IControl_matchContext

	// Get_control_loop returns the _control_loop rule contexts.
	Get_control_loop() IControl_loopContext

	// Get_control_while returns the _control_while rule contexts.
	Get_control_while() IControl_whileContext

	// Get_ibreak returns the _ibreak rule contexts.
	Get_ibreak() IIbreakContext

	// Get_icontinue returns the _icontinue rule contexts.
	Get_icontinue() IIcontinueContext

	// Get_ireturn returns the _ireturn rule contexts.
	Get_ireturn() IIreturnContext

	// Get_printNormal returns the _printNormal rule contexts.
	Get_printNormal() IPrintNormalContext

	// Get_printFormato returns the _printFormato rule contexts.
	Get_printFormato() IPrintFormatoContext

	// Get_metodos_vector returns the _metodos_vector rule contexts.
	Get_metodos_vector() IMetodos_vectorContext

	// Set_llamada_funcion sets the _llamada_funcion rule contexts.
	Set_llamada_funcion(ILlamada_funcionContext)

	// Set_asignacion sets the _asignacion rule contexts.
	Set_asignacion(IAsignacionContext)

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// Set_declaracion sets the _declaracion rule contexts.
	Set_declaracion(IDeclaracionContext)

	// Set_control_if sets the _control_if rule contexts.
	Set_control_if(IControl_ifContext)

	// Set_control_match sets the _control_match rule contexts.
	Set_control_match(IControl_matchContext)

	// Set_control_loop sets the _control_loop rule contexts.
	Set_control_loop(IControl_loopContext)

	// Set_control_while sets the _control_while rule contexts.
	Set_control_while(IControl_whileContext)

	// Set_ibreak sets the _ibreak rule contexts.
	Set_ibreak(IIbreakContext)

	// Set_icontinue sets the _icontinue rule contexts.
	Set_icontinue(IIcontinueContext)

	// Set_ireturn sets the _ireturn rule contexts.
	Set_ireturn(IIreturnContext)

	// Set_printNormal sets the _printNormal rule contexts.
	Set_printNormal(IPrintNormalContext)

	// Set_printFormato sets the _printFormato rule contexts.
	Set_printFormato(IPrintFormatoContext)

	// Set_metodos_vector sets the _metodos_vector rule contexts.
	Set_metodos_vector(IMetodos_vectorContext)

	// GetEx returns the ex attribute.
	GetEx() interface{}

	// SetEx sets the ex attribute.
	SetEx(interface{})

	// IsInstruccionContext differentiates from other interfaces.
	IsInstruccionContext()
}

type InstruccionContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	ex               interface{}
	_llamada_funcion ILlamada_funcionContext
	_asignacion      IAsignacionContext
	_expresion       IExpresionContext
	_declaracion     IDeclaracionContext
	_control_if      IControl_ifContext
	_control_match   IControl_matchContext
	_control_loop    IControl_loopContext
	_control_while   IControl_whileContext
	_ibreak          IIbreakContext
	_icontinue       IIcontinueContext
	_ireturn         IIreturnContext
	_printNormal     IPrintNormalContext
	_printFormato    IPrintFormatoContext
	_metodos_vector  IMetodos_vectorContext
}

func NewEmptyInstruccionContext() *InstruccionContext {
	var p = new(InstruccionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_instruccion
	return p
}

func (*InstruccionContext) IsInstruccionContext() {}

func NewInstruccionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstruccionContext {
	var p = new(InstruccionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_instruccion

	return p
}

func (s *InstruccionContext) GetParser() antlr.Parser { return s.parser }

func (s *InstruccionContext) Get_llamada_funcion() ILlamada_funcionContext { return s._llamada_funcion }

func (s *InstruccionContext) Get_asignacion() IAsignacionContext { return s._asignacion }

func (s *InstruccionContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *InstruccionContext) Get_declaracion() IDeclaracionContext { return s._declaracion }

func (s *InstruccionContext) Get_control_if() IControl_ifContext { return s._control_if }

func (s *InstruccionContext) Get_control_match() IControl_matchContext { return s._control_match }

func (s *InstruccionContext) Get_control_loop() IControl_loopContext { return s._control_loop }

func (s *InstruccionContext) Get_control_while() IControl_whileContext { return s._control_while }

func (s *InstruccionContext) Get_ibreak() IIbreakContext { return s._ibreak }

func (s *InstruccionContext) Get_icontinue() IIcontinueContext { return s._icontinue }

func (s *InstruccionContext) Get_ireturn() IIreturnContext { return s._ireturn }

func (s *InstruccionContext) Get_printNormal() IPrintNormalContext { return s._printNormal }

func (s *InstruccionContext) Get_printFormato() IPrintFormatoContext { return s._printFormato }

func (s *InstruccionContext) Get_metodos_vector() IMetodos_vectorContext { return s._metodos_vector }

func (s *InstruccionContext) Set_llamada_funcion(v ILlamada_funcionContext) { s._llamada_funcion = v }

func (s *InstruccionContext) Set_asignacion(v IAsignacionContext) { s._asignacion = v }

func (s *InstruccionContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *InstruccionContext) Set_declaracion(v IDeclaracionContext) { s._declaracion = v }

func (s *InstruccionContext) Set_control_if(v IControl_ifContext) { s._control_if = v }

func (s *InstruccionContext) Set_control_match(v IControl_matchContext) { s._control_match = v }

func (s *InstruccionContext) Set_control_loop(v IControl_loopContext) { s._control_loop = v }

func (s *InstruccionContext) Set_control_while(v IControl_whileContext) { s._control_while = v }

func (s *InstruccionContext) Set_ibreak(v IIbreakContext) { s._ibreak = v }

func (s *InstruccionContext) Set_icontinue(v IIcontinueContext) { s._icontinue = v }

func (s *InstruccionContext) Set_ireturn(v IIreturnContext) { s._ireturn = v }

func (s *InstruccionContext) Set_printNormal(v IPrintNormalContext) { s._printNormal = v }

func (s *InstruccionContext) Set_printFormato(v IPrintFormatoContext) { s._printFormato = v }

func (s *InstruccionContext) Set_metodos_vector(v IMetodos_vectorContext) { s._metodos_vector = v }

func (s *InstruccionContext) GetEx() interface{} { return s.ex }

func (s *InstruccionContext) SetEx(v interface{}) { s.ex = v }

func (s *InstruccionContext) Llamada_funcion() ILlamada_funcionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILlamada_funcionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILlamada_funcionContext)
}

func (s *InstruccionContext) PUNTOCOMA() antlr.TerminalNode {
	return s.GetToken(NparserPUNTOCOMA, 0)
}

func (s *InstruccionContext) Asignacion() IAsignacionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsignacionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsignacionContext)
}

func (s *InstruccionContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *InstruccionContext) Declaracion() IDeclaracionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaracionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaracionContext)
}

func (s *InstruccionContext) Control_if() IControl_ifContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_ifContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_ifContext)
}

func (s *InstruccionContext) Control_match() IControl_matchContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_matchContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_matchContext)
}

func (s *InstruccionContext) Control_loop() IControl_loopContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_loopContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_loopContext)
}

func (s *InstruccionContext) Control_while() IControl_whileContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_whileContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_whileContext)
}

func (s *InstruccionContext) Ibreak() IIbreakContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIbreakContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIbreakContext)
}

func (s *InstruccionContext) Icontinue() IIcontinueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIcontinueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIcontinueContext)
}

func (s *InstruccionContext) Ireturn() IIreturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIreturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIreturnContext)
}

func (s *InstruccionContext) PrintNormal() IPrintNormalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrintNormalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrintNormalContext)
}

func (s *InstruccionContext) PrintFormato() IPrintFormatoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrintFormatoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrintFormatoContext)
}

func (s *InstruccionContext) Metodos_vector() IMetodos_vectorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMetodos_vectorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMetodos_vectorContext)
}

func (s *InstruccionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstruccionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InstruccionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterInstruccion(s)
	}
}

func (s *InstruccionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitInstruccion(s)
	}
}

func (p *Nparser) Instruccion() (localctx IInstruccionContext) {
	this := p
	_ = this

	localctx = NewInstruccionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, NparserRULE_instruccion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(259)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 6, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(207)

			var _x = p.Llamada_funcion()

			localctx.(*InstruccionContext)._llamada_funcion = _x
		}
		{
			p.SetState(208)
			p.Match(NparserPUNTOCOMA)
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_llamada_funcion().GetEx()

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(211)

			var _x = p.Asignacion()

			localctx.(*InstruccionContext)._asignacion = _x
		}
		{
			p.SetState(212)
			p.Match(NparserPUNTOCOMA)
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_asignacion().GetEx()

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(215)

			var _x = p.expresion(0)

			localctx.(*InstruccionContext)._expresion = _x
		}
		{
			p.SetState(216)
			p.Match(NparserPUNTOCOMA)
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_expresion().GetEx()

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(219)

			var _x = p.Declaracion()

			localctx.(*InstruccionContext)._declaracion = _x
		}
		{
			p.SetState(220)
			p.Match(NparserPUNTOCOMA)
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_declaracion().GetEx()

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(223)

			var _x = p.Control_if()

			localctx.(*InstruccionContext)._control_if = _x
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_control_if().GetEx()

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(226)

			var _x = p.Control_match()

			localctx.(*InstruccionContext)._control_match = _x
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_control_match().GetEx()

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(229)

			var _x = p.Control_loop()

			localctx.(*InstruccionContext)._control_loop = _x
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_control_loop().GetEx()

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(232)

			var _x = p.Control_while()

			localctx.(*InstruccionContext)._control_while = _x
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_control_while().GetEx()

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(235)

			var _x = p.Ibreak()

			localctx.(*InstruccionContext)._ibreak = _x
		}
		{
			p.SetState(236)
			p.Match(NparserPUNTOCOMA)
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_ibreak().GetEx()

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(239)

			var _x = p.Icontinue()

			localctx.(*InstruccionContext)._icontinue = _x
		}
		{
			p.SetState(240)
			p.Match(NparserPUNTOCOMA)
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_icontinue().GetEx()

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(243)

			var _x = p.Ireturn()

			localctx.(*InstruccionContext)._ireturn = _x
		}
		{
			p.SetState(244)
			p.Match(NparserPUNTOCOMA)
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_ireturn().GetEx()

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(247)

			var _x = p.PrintNormal()

			localctx.(*InstruccionContext)._printNormal = _x
		}
		{
			p.SetState(248)
			p.Match(NparserPUNTOCOMA)
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_printNormal().GetEx()

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(251)

			var _x = p.PrintFormato()

			localctx.(*InstruccionContext)._printFormato = _x
		}
		{
			p.SetState(252)
			p.Match(NparserPUNTOCOMA)
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_printFormato().GetEx()

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(255)

			var _x = p.Metodos_vector()

			localctx.(*InstruccionContext)._metodos_vector = _x
		}
		{
			p.SetState(256)
			p.Match(NparserPUNTOCOMA)
		}
		localctx.(*InstruccionContext).ex = localctx.(*InstruccionContext).Get_metodos_vector().GetEx()

	}

	return localctx
}

// IInstruccionControlContext is an interface to support dynamic dispatch.
type IInstruccionControlContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_llamada_funcion returns the _llamada_funcion rule contexts.
	Get_llamada_funcion() ILlamada_funcionContext

	// Get_asignacion returns the _asignacion rule contexts.
	Get_asignacion() IAsignacionContext

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// Get_declaracion returns the _declaracion rule contexts.
	Get_declaracion() IDeclaracionContext

	// Get_control_if returns the _control_if rule contexts.
	Get_control_if() IControl_ifContext

	// Get_control_match returns the _control_match rule contexts.
	Get_control_match() IControl_matchContext

	// Get_control_loop returns the _control_loop rule contexts.
	Get_control_loop() IControl_loopContext

	// Get_control_while returns the _control_while rule contexts.
	Get_control_while() IControl_whileContext

	// Get_ibreak returns the _ibreak rule contexts.
	Get_ibreak() IIbreakContext

	// Get_icontinue returns the _icontinue rule contexts.
	Get_icontinue() IIcontinueContext

	// Get_ireturn returns the _ireturn rule contexts.
	Get_ireturn() IIreturnContext

	// Get_printNormal returns the _printNormal rule contexts.
	Get_printNormal() IPrintNormalContext

	// Get_printFormato returns the _printFormato rule contexts.
	Get_printFormato() IPrintFormatoContext

	// Get_metodos_vector returns the _metodos_vector rule contexts.
	Get_metodos_vector() IMetodos_vectorContext

	// Set_llamada_funcion sets the _llamada_funcion rule contexts.
	Set_llamada_funcion(ILlamada_funcionContext)

	// Set_asignacion sets the _asignacion rule contexts.
	Set_asignacion(IAsignacionContext)

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// Set_declaracion sets the _declaracion rule contexts.
	Set_declaracion(IDeclaracionContext)

	// Set_control_if sets the _control_if rule contexts.
	Set_control_if(IControl_ifContext)

	// Set_control_match sets the _control_match rule contexts.
	Set_control_match(IControl_matchContext)

	// Set_control_loop sets the _control_loop rule contexts.
	Set_control_loop(IControl_loopContext)

	// Set_control_while sets the _control_while rule contexts.
	Set_control_while(IControl_whileContext)

	// Set_ibreak sets the _ibreak rule contexts.
	Set_ibreak(IIbreakContext)

	// Set_icontinue sets the _icontinue rule contexts.
	Set_icontinue(IIcontinueContext)

	// Set_ireturn sets the _ireturn rule contexts.
	Set_ireturn(IIreturnContext)

	// Set_printNormal sets the _printNormal rule contexts.
	Set_printNormal(IPrintNormalContext)

	// Set_printFormato sets the _printFormato rule contexts.
	Set_printFormato(IPrintFormatoContext)

	// Set_metodos_vector sets the _metodos_vector rule contexts.
	Set_metodos_vector(IMetodos_vectorContext)

	// GetEx returns the ex attribute.
	GetEx() interface{}

	// SetEx sets the ex attribute.
	SetEx(interface{})

	// IsInstruccionControlContext differentiates from other interfaces.
	IsInstruccionControlContext()
}

type InstruccionControlContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	ex               interface{}
	_llamada_funcion ILlamada_funcionContext
	_asignacion      IAsignacionContext
	_expresion       IExpresionContext
	_declaracion     IDeclaracionContext
	_control_if      IControl_ifContext
	_control_match   IControl_matchContext
	_control_loop    IControl_loopContext
	_control_while   IControl_whileContext
	_ibreak          IIbreakContext
	_icontinue       IIcontinueContext
	_ireturn         IIreturnContext
	_printNormal     IPrintNormalContext
	_printFormato    IPrintFormatoContext
	_metodos_vector  IMetodos_vectorContext
}

func NewEmptyInstruccionControlContext() *InstruccionControlContext {
	var p = new(InstruccionControlContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_instruccionControl
	return p
}

func (*InstruccionControlContext) IsInstruccionControlContext() {}

func NewInstruccionControlContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InstruccionControlContext {
	var p = new(InstruccionControlContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_instruccionControl

	return p
}

func (s *InstruccionControlContext) GetParser() antlr.Parser { return s.parser }

func (s *InstruccionControlContext) Get_llamada_funcion() ILlamada_funcionContext {
	return s._llamada_funcion
}

func (s *InstruccionControlContext) Get_asignacion() IAsignacionContext { return s._asignacion }

func (s *InstruccionControlContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *InstruccionControlContext) Get_declaracion() IDeclaracionContext { return s._declaracion }

func (s *InstruccionControlContext) Get_control_if() IControl_ifContext { return s._control_if }

func (s *InstruccionControlContext) Get_control_match() IControl_matchContext {
	return s._control_match
}

func (s *InstruccionControlContext) Get_control_loop() IControl_loopContext { return s._control_loop }

func (s *InstruccionControlContext) Get_control_while() IControl_whileContext {
	return s._control_while
}

func (s *InstruccionControlContext) Get_ibreak() IIbreakContext { return s._ibreak }

func (s *InstruccionControlContext) Get_icontinue() IIcontinueContext { return s._icontinue }

func (s *InstruccionControlContext) Get_ireturn() IIreturnContext { return s._ireturn }

func (s *InstruccionControlContext) Get_printNormal() IPrintNormalContext { return s._printNormal }

func (s *InstruccionControlContext) Get_printFormato() IPrintFormatoContext { return s._printFormato }

func (s *InstruccionControlContext) Get_metodos_vector() IMetodos_vectorContext {
	return s._metodos_vector
}

func (s *InstruccionControlContext) Set_llamada_funcion(v ILlamada_funcionContext) {
	s._llamada_funcion = v
}

func (s *InstruccionControlContext) Set_asignacion(v IAsignacionContext) { s._asignacion = v }

func (s *InstruccionControlContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *InstruccionControlContext) Set_declaracion(v IDeclaracionContext) { s._declaracion = v }

func (s *InstruccionControlContext) Set_control_if(v IControl_ifContext) { s._control_if = v }

func (s *InstruccionControlContext) Set_control_match(v IControl_matchContext) { s._control_match = v }

func (s *InstruccionControlContext) Set_control_loop(v IControl_loopContext) { s._control_loop = v }

func (s *InstruccionControlContext) Set_control_while(v IControl_whileContext) { s._control_while = v }

func (s *InstruccionControlContext) Set_ibreak(v IIbreakContext) { s._ibreak = v }

func (s *InstruccionControlContext) Set_icontinue(v IIcontinueContext) { s._icontinue = v }

func (s *InstruccionControlContext) Set_ireturn(v IIreturnContext) { s._ireturn = v }

func (s *InstruccionControlContext) Set_printNormal(v IPrintNormalContext) { s._printNormal = v }

func (s *InstruccionControlContext) Set_printFormato(v IPrintFormatoContext) { s._printFormato = v }

func (s *InstruccionControlContext) Set_metodos_vector(v IMetodos_vectorContext) {
	s._metodos_vector = v
}

func (s *InstruccionControlContext) GetEx() interface{} { return s.ex }

func (s *InstruccionControlContext) SetEx(v interface{}) { s.ex = v }

func (s *InstruccionControlContext) Llamada_funcion() ILlamada_funcionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILlamada_funcionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILlamada_funcionContext)
}

func (s *InstruccionControlContext) PUNTOCOMA() antlr.TerminalNode {
	return s.GetToken(NparserPUNTOCOMA, 0)
}

func (s *InstruccionControlContext) Asignacion() IAsignacionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsignacionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsignacionContext)
}

func (s *InstruccionControlContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *InstruccionControlContext) Declaracion() IDeclaracionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaracionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaracionContext)
}

func (s *InstruccionControlContext) Control_if() IControl_ifContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_ifContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_ifContext)
}

func (s *InstruccionControlContext) Control_match() IControl_matchContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_matchContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_matchContext)
}

func (s *InstruccionControlContext) Control_loop() IControl_loopContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_loopContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_loopContext)
}

func (s *InstruccionControlContext) Control_while() IControl_whileContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_whileContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_whileContext)
}

func (s *InstruccionControlContext) Ibreak() IIbreakContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIbreakContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIbreakContext)
}

func (s *InstruccionControlContext) Icontinue() IIcontinueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIcontinueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIcontinueContext)
}

func (s *InstruccionControlContext) Ireturn() IIreturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIreturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIreturnContext)
}

func (s *InstruccionControlContext) PrintNormal() IPrintNormalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrintNormalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrintNormalContext)
}

func (s *InstruccionControlContext) PrintFormato() IPrintFormatoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrintFormatoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrintFormatoContext)
}

func (s *InstruccionControlContext) Metodos_vector() IMetodos_vectorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMetodos_vectorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMetodos_vectorContext)
}

func (s *InstruccionControlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InstruccionControlContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InstruccionControlContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterInstruccionControl(s)
	}
}

func (s *InstruccionControlContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitInstruccionControl(s)
	}
}

func (p *Nparser) InstruccionControl() (localctx IInstruccionControlContext) {
	this := p
	_ = this

	localctx = NewInstruccionControlContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, NparserRULE_instruccionControl)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(316)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 7, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(261)

			var _x = p.Llamada_funcion()

			localctx.(*InstruccionControlContext)._llamada_funcion = _x
		}
		{
			p.SetState(262)
			p.Match(NparserPUNTOCOMA)
		}
		localctx.(*InstruccionControlContext).ex = localctx.(*InstruccionControlContext).Get_llamada_funcion().GetEx()

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(265)

			var _x = p.Asignacion()

			localctx.(*InstruccionControlContext)._asignacion = _x
		}
		{
			p.SetState(266)
			p.Match(NparserPUNTOCOMA)
		}
		localctx.(*InstruccionControlContext).ex = localctx.(*InstruccionControlContext).Get_asignacion().GetEx()

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(269)

			var _x = p.expresion(0)

			localctx.(*InstruccionControlContext)._expresion = _x
		}
		{
			p.SetState(270)
			p.Match(NparserPUNTOCOMA)
		}
		localctx.(*InstruccionControlContext).ex = localctx.(*InstruccionControlContext).Get_expresion().GetEx()

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(273)

			var _x = p.expresion(0)

			localctx.(*InstruccionControlContext)._expresion = _x
		}
		localctx.(*InstruccionControlContext).ex = localctx.(*InstruccionControlContext).Get_expresion().GetEx()

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(276)

			var _x = p.Declaracion()

			localctx.(*InstruccionControlContext)._declaracion = _x
		}
		{
			p.SetState(277)
			p.Match(NparserPUNTOCOMA)
		}
		localctx.(*InstruccionControlContext).ex = localctx.(*InstruccionControlContext).Get_declaracion().GetEx()

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(280)

			var _x = p.Control_if()

			localctx.(*InstruccionControlContext)._control_if = _x
		}
		localctx.(*InstruccionControlContext).ex = localctx.(*InstruccionControlContext).Get_control_if().GetEx()

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(283)

			var _x = p.Control_match()

			localctx.(*InstruccionControlContext)._control_match = _x
		}
		localctx.(*InstruccionControlContext).ex = localctx.(*InstruccionControlContext).Get_control_match().GetEx()

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(286)

			var _x = p.Control_loop()

			localctx.(*InstruccionControlContext)._control_loop = _x
		}
		localctx.(*InstruccionControlContext).ex = localctx.(*InstruccionControlContext).Get_control_loop().GetEx()

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(289)

			var _x = p.Control_while()

			localctx.(*InstruccionControlContext)._control_while = _x
		}
		localctx.(*InstruccionControlContext).ex = localctx.(*InstruccionControlContext).Get_control_while().GetEx()

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(292)

			var _x = p.Ibreak()

			localctx.(*InstruccionControlContext)._ibreak = _x
		}
		{
			p.SetState(293)
			p.Match(NparserPUNTOCOMA)
		}
		localctx.(*InstruccionControlContext).ex = localctx.(*InstruccionControlContext).Get_ibreak().GetEx()

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(296)

			var _x = p.Icontinue()

			localctx.(*InstruccionControlContext)._icontinue = _x
		}
		{
			p.SetState(297)
			p.Match(NparserPUNTOCOMA)
		}
		localctx.(*InstruccionControlContext).ex = localctx.(*InstruccionControlContext).Get_icontinue().GetEx()

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(300)

			var _x = p.Ireturn()

			localctx.(*InstruccionControlContext)._ireturn = _x
		}
		{
			p.SetState(301)
			p.Match(NparserPUNTOCOMA)
		}
		localctx.(*InstruccionControlContext).ex = localctx.(*InstruccionControlContext).Get_ireturn().GetEx()

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(304)

			var _x = p.PrintNormal()

			localctx.(*InstruccionControlContext)._printNormal = _x
		}
		{
			p.SetState(305)
			p.Match(NparserPUNTOCOMA)
		}
		localctx.(*InstruccionControlContext).ex = localctx.(*InstruccionControlContext).Get_printNormal().GetEx()

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(308)

			var _x = p.PrintFormato()

			localctx.(*InstruccionControlContext)._printFormato = _x
		}
		{
			p.SetState(309)
			p.Match(NparserPUNTOCOMA)
		}
		localctx.(*InstruccionControlContext).ex = localctx.(*InstruccionControlContext).Get_printFormato().GetEx()

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(312)

			var _x = p.Metodos_vector()

			localctx.(*InstruccionControlContext)._metodos_vector = _x
		}
		{
			p.SetState(313)
			p.Match(NparserPUNTOCOMA)
		}
		localctx.(*InstruccionControlContext).ex = localctx.(*InstruccionControlContext).Get_metodos_vector().GetEx()

	}

	return localctx
}

// IFuncion_mainContext is an interface to support dynamic dispatch.
type IFuncion_mainContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_FN returns the _FN token.
	Get_FN() antlr.Token

	// Set_FN sets the _FN token.
	Set_FN(antlr.Token)

	// Get_bloque returns the _bloque rule contexts.
	Get_bloque() IBloqueContext

	// Set_bloque sets the _bloque rule contexts.
	Set_bloque(IBloqueContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Expresion

	// SetEx sets the ex attribute.
	SetEx(Ast.Expresion)

	// IsFuncion_mainContext differentiates from other interfaces.
	IsFuncion_mainContext()
}

type Funcion_mainContext struct {
	*antlr.BaseParserRuleContext
	parser  antlr.Parser
	ex      Ast.Expresion
	_FN     antlr.Token
	_bloque IBloqueContext
}

func NewEmptyFuncion_mainContext() *Funcion_mainContext {
	var p = new(Funcion_mainContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_funcion_main
	return p
}

func (*Funcion_mainContext) IsFuncion_mainContext() {}

func NewFuncion_mainContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Funcion_mainContext {
	var p = new(Funcion_mainContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_funcion_main

	return p
}

func (s *Funcion_mainContext) GetParser() antlr.Parser { return s.parser }

func (s *Funcion_mainContext) Get_FN() antlr.Token { return s._FN }

func (s *Funcion_mainContext) Set_FN(v antlr.Token) { s._FN = v }

func (s *Funcion_mainContext) Get_bloque() IBloqueContext { return s._bloque }

func (s *Funcion_mainContext) Set_bloque(v IBloqueContext) { s._bloque = v }

func (s *Funcion_mainContext) GetEx() Ast.Expresion { return s.ex }

func (s *Funcion_mainContext) SetEx(v Ast.Expresion) { s.ex = v }

func (s *Funcion_mainContext) FN() antlr.TerminalNode {
	return s.GetToken(NparserFN, 0)
}

func (s *Funcion_mainContext) MAIN() antlr.TerminalNode {
	return s.GetToken(NparserMAIN, 0)
}

func (s *Funcion_mainContext) PAR_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserPAR_IZQ, 0)
}

func (s *Funcion_mainContext) PAR_DER() antlr.TerminalNode {
	return s.GetToken(NparserPAR_DER, 0)
}

func (s *Funcion_mainContext) Bloque() IBloqueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloqueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloqueContext)
}

func (s *Funcion_mainContext) LLAVE_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserLLAVE_IZQ, 0)
}

func (s *Funcion_mainContext) LLAVE_DER() antlr.TerminalNode {
	return s.GetToken(NparserLLAVE_DER, 0)
}

func (s *Funcion_mainContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Funcion_mainContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Funcion_mainContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterFuncion_main(s)
	}
}

func (s *Funcion_mainContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitFuncion_main(s)
	}
}

func (p *Nparser) Funcion_main() (localctx IFuncion_mainContext) {
	this := p
	_ = this

	localctx = NewFuncion_mainContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, NparserRULE_funcion_main)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(332)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 8, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(318)

			var _m = p.Match(NparserFN)

			localctx.(*Funcion_mainContext)._FN = _m
		}
		{
			p.SetState(319)
			p.Match(NparserMAIN)
		}
		{
			p.SetState(320)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(321)
			p.Match(NparserPAR_DER)
		}
		{
			p.SetState(322)

			var _x = p.Bloque()

			localctx.(*Funcion_mainContext)._bloque = _x
		}

		fila := (func() int {
			if localctx.(*Funcion_mainContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Funcion_mainContext).Get_FN().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Funcion_mainContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Funcion_mainContext).Get_FN().GetColumn()
			}
		}())
		localctx.(*Funcion_mainContext).ex = simbolos.NewFuncionMain(localctx.(*Funcion_mainContext).Get_bloque().GetList(), fila, columna)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(325)

			var _m = p.Match(NparserFN)

			localctx.(*Funcion_mainContext)._FN = _m
		}
		{
			p.SetState(326)
			p.Match(NparserMAIN)
		}
		{
			p.SetState(327)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(328)
			p.Match(NparserPAR_DER)
		}
		{
			p.SetState(329)
			p.Match(NparserLLAVE_IZQ)
		}
		{
			p.SetState(330)
			p.Match(NparserLLAVE_DER)
		}

		fila := (func() int {
			if localctx.(*Funcion_mainContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Funcion_mainContext).Get_FN().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Funcion_mainContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Funcion_mainContext).Get_FN().GetColumn()
			}
		}())
		instrucciones := arraylist.New()
		localctx.(*Funcion_mainContext).ex = simbolos.NewFuncionMain(instrucciones, fila, columna)

	}

	return localctx
}

// IDeclaracionContext is an interface to support dynamic dispatch.
type IDeclaracionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_LET returns the _LET token.
	Get_LET() antlr.Token

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Set_LET sets the _LET token.
	Set_LET(antlr.Token)

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// Get_control_expresion returns the _control_expresion rule contexts.
	Get_control_expresion() IControl_expresionContext

	// Get_tipo_dato_tipo returns the _tipo_dato_tipo rule contexts.
	Get_tipo_dato_tipo() ITipo_dato_tipoContext

	// GetTipo returns the tipo rule contexts.
	GetTipo() ITipo_dato_tipoContext

	// GetDimension returns the dimension rule contexts.
	GetDimension() IDimension_arrayContext

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// Set_control_expresion sets the _control_expresion rule contexts.
	Set_control_expresion(IControl_expresionContext)

	// Set_tipo_dato_tipo sets the _tipo_dato_tipo rule contexts.
	Set_tipo_dato_tipo(ITipo_dato_tipoContext)

	// SetTipo sets the tipo rule contexts.
	SetTipo(ITipo_dato_tipoContext)

	// SetDimension sets the dimension rule contexts.
	SetDimension(IDimension_arrayContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsDeclaracionContext differentiates from other interfaces.
	IsDeclaracionContext()
}

type DeclaracionContext struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	ex                 Ast.Instruccion
	_LET               antlr.Token
	_ID                antlr.Token
	_expresion         IExpresionContext
	_control_expresion IControl_expresionContext
	_tipo_dato_tipo    ITipo_dato_tipoContext
	tipo               ITipo_dato_tipoContext
	dimension          IDimension_arrayContext
}

func NewEmptyDeclaracionContext() *DeclaracionContext {
	var p = new(DeclaracionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_declaracion
	return p
}

func (*DeclaracionContext) IsDeclaracionContext() {}

func NewDeclaracionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclaracionContext {
	var p = new(DeclaracionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_declaracion

	return p
}

func (s *DeclaracionContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclaracionContext) Get_LET() antlr.Token { return s._LET }

func (s *DeclaracionContext) Get_ID() antlr.Token { return s._ID }

func (s *DeclaracionContext) Set_LET(v antlr.Token) { s._LET = v }

func (s *DeclaracionContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *DeclaracionContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *DeclaracionContext) Get_control_expresion() IControl_expresionContext {
	return s._control_expresion
}

func (s *DeclaracionContext) Get_tipo_dato_tipo() ITipo_dato_tipoContext { return s._tipo_dato_tipo }

func (s *DeclaracionContext) GetTipo() ITipo_dato_tipoContext { return s.tipo }

func (s *DeclaracionContext) GetDimension() IDimension_arrayContext { return s.dimension }

func (s *DeclaracionContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *DeclaracionContext) Set_control_expresion(v IControl_expresionContext) {
	s._control_expresion = v
}

func (s *DeclaracionContext) Set_tipo_dato_tipo(v ITipo_dato_tipoContext) { s._tipo_dato_tipo = v }

func (s *DeclaracionContext) SetTipo(v ITipo_dato_tipoContext) { s.tipo = v }

func (s *DeclaracionContext) SetDimension(v IDimension_arrayContext) { s.dimension = v }

func (s *DeclaracionContext) GetEx() Ast.Instruccion { return s.ex }

func (s *DeclaracionContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *DeclaracionContext) LET() antlr.TerminalNode {
	return s.GetToken(NparserLET, 0)
}

func (s *DeclaracionContext) ID() antlr.TerminalNode {
	return s.GetToken(NparserID, 0)
}

func (s *DeclaracionContext) IGUAL() antlr.TerminalNode {
	return s.GetToken(NparserIGUAL, 0)
}

func (s *DeclaracionContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *DeclaracionContext) Control_expresion() IControl_expresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_expresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_expresionContext)
}

func (s *DeclaracionContext) DOSPUNTOS() antlr.TerminalNode {
	return s.GetToken(NparserDOSPUNTOS, 0)
}

func (s *DeclaracionContext) Tipo_dato_tipo() ITipo_dato_tipoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipo_dato_tipoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipo_dato_tipoContext)
}

func (s *DeclaracionContext) MUT() antlr.TerminalNode {
	return s.GetToken(NparserMUT, 0)
}

func (s *DeclaracionContext) VEC() antlr.TerminalNode {
	return s.GetToken(NparserVEC, 0)
}

func (s *DeclaracionContext) MENOR() antlr.TerminalNode {
	return s.GetToken(NparserMENOR, 0)
}

func (s *DeclaracionContext) MAYOR() antlr.TerminalNode {
	return s.GetToken(NparserMAYOR, 0)
}

func (s *DeclaracionContext) Dimension_array() IDimension_arrayContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDimension_arrayContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDimension_arrayContext)
}

func (s *DeclaracionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclaracionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclaracionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterDeclaracion(s)
	}
}

func (s *DeclaracionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitDeclaracion(s)
	}
}

func (p *Nparser) Declaracion() (localctx IDeclaracionContext) {
	this := p
	_ = this

	localctx = NewDeclaracionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, NparserRULE_declaracion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(448)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 9, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(334)

			var _m = p.Match(NparserLET)

			localctx.(*DeclaracionContext)._LET = _m
		}
		{
			p.SetState(335)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(336)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(337)

			var _x = p.expresion(0)

			localctx.(*DeclaracionContext)._expresion = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetColumn()
			}
		}())
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracionSinTipo((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), localctx.(*DeclaracionContext).Get_expresion().GetEx(),
			false, false, fila, columna)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(340)

			var _m = p.Match(NparserLET)

			localctx.(*DeclaracionContext)._LET = _m
		}
		{
			p.SetState(341)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(342)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(343)

			var _x = p.Control_expresion()

			localctx.(*DeclaracionContext)._control_expresion = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetColumn()
			}
		}())
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracionSinTipo((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), localctx.(*DeclaracionContext).Get_control_expresion().GetEx(),
			false, false, fila, columna)

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(346)

			var _m = p.Match(NparserLET)

			localctx.(*DeclaracionContext)._LET = _m
		}
		{
			p.SetState(347)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(348)
			p.Match(NparserDOSPUNTOS)
		}
		{
			p.SetState(349)

			var _x = p.Tipo_dato_tipo()

			localctx.(*DeclaracionContext)._tipo_dato_tipo = _x
		}
		{
			p.SetState(350)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(351)

			var _x = p.expresion(0)

			localctx.(*DeclaracionContext)._expresion = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetColumn()
			}
		}())
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracionTotal((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), localctx.(*DeclaracionContext).Get_expresion().GetEx(),
			localctx.(*DeclaracionContext).Get_tipo_dato_tipo().GetEx(), false, false, fila, columna)

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(354)

			var _m = p.Match(NparserLET)

			localctx.(*DeclaracionContext)._LET = _m
		}
		{
			p.SetState(355)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(356)
			p.Match(NparserDOSPUNTOS)
		}
		{
			p.SetState(357)

			var _x = p.Tipo_dato_tipo()

			localctx.(*DeclaracionContext)._tipo_dato_tipo = _x
		}
		{
			p.SetState(358)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(359)

			var _x = p.Control_expresion()

			localctx.(*DeclaracionContext)._control_expresion = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetColumn()
			}
		}())
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracionTotal((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), localctx.(*DeclaracionContext).Get_control_expresion().GetEx(),
			localctx.(*DeclaracionContext).Get_tipo_dato_tipo().GetEx(), false, false, fila, columna)

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(362)

			var _m = p.Match(NparserLET)

			localctx.(*DeclaracionContext)._LET = _m
		}
		{
			p.SetState(363)
			p.Match(NparserMUT)
		}
		{
			p.SetState(364)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(365)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(366)

			var _x = p.expresion(0)

			localctx.(*DeclaracionContext)._expresion = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetColumn()
			}
		}())
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracionSinTipo((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), localctx.(*DeclaracionContext).Get_expresion().GetEx(),
			true, false, fila, columna)

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(369)
			p.Match(NparserLET)
		}
		{
			p.SetState(370)
			p.Match(NparserMUT)
		}
		{
			p.SetState(371)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(372)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(373)

			var _x = p.Control_expresion()

			localctx.(*DeclaracionContext)._control_expresion = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetColumn()
			}
		}())
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracionSinTipo((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), localctx.(*DeclaracionContext).Get_control_expresion().GetEx(),
			true, false, fila, columna)

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(376)

			var _m = p.Match(NparserLET)

			localctx.(*DeclaracionContext)._LET = _m
		}
		{
			p.SetState(377)
			p.Match(NparserMUT)
		}
		{
			p.SetState(378)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(379)
			p.Match(NparserDOSPUNTOS)
		}
		{
			p.SetState(380)

			var _x = p.Tipo_dato_tipo()

			localctx.(*DeclaracionContext)._tipo_dato_tipo = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetColumn()
			}
		}())
		//valor := expresiones.NewPrimitivo(nil, Ast.NULL,fila,columna)
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracionConTipo((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), localctx.(*DeclaracionContext).Get_tipo_dato_tipo().GetEx(),
			true, false, fila, columna)

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(383)

			var _m = p.Match(NparserLET)

			localctx.(*DeclaracionContext)._LET = _m
		}
		{
			p.SetState(384)
			p.Match(NparserMUT)
		}
		{
			p.SetState(385)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(386)
			p.Match(NparserDOSPUNTOS)
		}
		{
			p.SetState(387)

			var _x = p.Tipo_dato_tipo()

			localctx.(*DeclaracionContext)._tipo_dato_tipo = _x
		}
		{
			p.SetState(388)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(389)

			var _x = p.expresion(0)

			localctx.(*DeclaracionContext)._expresion = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetColumn()
			}
		}())
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracionTotal((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), localctx.(*DeclaracionContext).Get_expresion().GetEx(),
			localctx.(*DeclaracionContext).Get_tipo_dato_tipo().GetEx(), true, false, fila, columna)

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(392)

			var _m = p.Match(NparserLET)

			localctx.(*DeclaracionContext)._LET = _m
		}
		{
			p.SetState(393)
			p.Match(NparserMUT)
		}
		{
			p.SetState(394)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(395)
			p.Match(NparserDOSPUNTOS)
		}
		{
			p.SetState(396)

			var _x = p.Tipo_dato_tipo()

			localctx.(*DeclaracionContext)._tipo_dato_tipo = _x
		}
		{
			p.SetState(397)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(398)

			var _x = p.Control_expresion()

			localctx.(*DeclaracionContext)._control_expresion = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetColumn()
			}
		}())
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracionTotal((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), localctx.(*DeclaracionContext).Get_control_expresion().GetEx(),
			localctx.(*DeclaracionContext).Get_tipo_dato_tipo().GetEx(), true, false, fila, columna)

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(401)

			var _m = p.Match(NparserLET)

			localctx.(*DeclaracionContext)._LET = _m
		}
		{
			p.SetState(402)
			p.Match(NparserMUT)
		}
		{
			p.SetState(403)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(404)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(405)

			var _x = p.expresion(0)

			localctx.(*DeclaracionContext)._expresion = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetColumn()
			}
		}())
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracionSinTipo((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), localctx.(*DeclaracionContext).Get_expresion().GetEx(),
			true, false, fila, columna)

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(408)

			var _m = p.Match(NparserLET)

			localctx.(*DeclaracionContext)._LET = _m
		}
		{
			p.SetState(409)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(410)
			p.Match(NparserDOSPUNTOS)
		}
		{
			p.SetState(411)
			p.Match(NparserVEC)
		}
		{
			p.SetState(412)
			p.Match(NparserMENOR)
		}
		{
			p.SetState(413)

			var _x = p.Tipo_dato_tipo()

			localctx.(*DeclaracionContext).tipo = _x
		}
		{
			p.SetState(414)
			p.Match(NparserMAYOR)
		}
		{
			p.SetState(415)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(416)

			var _x = p.expresion(0)

			localctx.(*DeclaracionContext)._expresion = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetColumn()
			}
		}())
		tipoVector := localctx.(*DeclaracionContext).GetTipo().GetEx()
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracionVector((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), tipoVector, localctx.(*DeclaracionContext).Get_expresion().GetEx(), false, false, fila, columna)

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(419)

			var _m = p.Match(NparserLET)

			localctx.(*DeclaracionContext)._LET = _m
		}
		{
			p.SetState(420)
			p.Match(NparserMUT)
		}
		{
			p.SetState(421)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(422)
			p.Match(NparserDOSPUNTOS)
		}
		{
			p.SetState(423)
			p.Match(NparserVEC)
		}
		{
			p.SetState(424)
			p.Match(NparserMENOR)
		}
		{
			p.SetState(425)

			var _x = p.Tipo_dato_tipo()

			localctx.(*DeclaracionContext).tipo = _x
		}
		{
			p.SetState(426)
			p.Match(NparserMAYOR)
		}
		{
			p.SetState(427)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(428)

			var _x = p.expresion(0)

			localctx.(*DeclaracionContext)._expresion = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetColumn()
			}
		}())
		tipoVector := localctx.(*DeclaracionContext).GetTipo().GetEx()
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracionVector((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), tipoVector, localctx.(*DeclaracionContext).Get_expresion().GetEx(), true, false, fila, columna)

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(431)

			var _m = p.Match(NparserLET)

			localctx.(*DeclaracionContext)._LET = _m
		}
		{
			p.SetState(432)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(433)
			p.Match(NparserDOSPUNTOS)
		}
		{
			p.SetState(434)

			var _x = p.Dimension_array()

			localctx.(*DeclaracionContext).dimension = _x
		}
		{
			p.SetState(435)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(436)

			var _x = p.expresion(0)

			localctx.(*DeclaracionContext)._expresion = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetColumn()
			}
		}())
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracionArray((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), localctx.(*DeclaracionContext).GetDimension().GetEx(), false, false, localctx.(*DeclaracionContext).Get_expresion().GetEx(), fila, columna)

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(439)

			var _m = p.Match(NparserLET)

			localctx.(*DeclaracionContext)._LET = _m
		}
		{
			p.SetState(440)
			p.Match(NparserMUT)
		}
		{
			p.SetState(441)

			var _m = p.Match(NparserID)

			localctx.(*DeclaracionContext)._ID = _m
		}
		{
			p.SetState(442)
			p.Match(NparserDOSPUNTOS)
		}
		{
			p.SetState(443)

			var _x = p.Dimension_array()

			localctx.(*DeclaracionContext).dimension = _x
		}
		{
			p.SetState(444)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(445)

			var _x = p.expresion(0)

			localctx.(*DeclaracionContext)._expresion = _x
		}

		fila := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*DeclaracionContext).Get_LET() == nil {
				return 0
			} else {
				return localctx.(*DeclaracionContext).Get_LET().GetColumn()
			}
		}())
		localctx.(*DeclaracionContext).ex = instrucciones.NewDeclaracionArray((func() string {
			if localctx.(*DeclaracionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*DeclaracionContext).Get_ID().GetText()
			}
		}()), localctx.(*DeclaracionContext).GetDimension().GetEx(), true, false, localctx.(*DeclaracionContext).Get_expresion().GetEx(), fila, columna)

	}

	return localctx
}

// IDeclaracion_struct_templateContext is an interface to support dynamic dispatch.
type IDeclaracion_struct_templateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetId returns the id token.
	GetId() antlr.Token

	// SetId sets the id token.
	SetId(antlr.Token)

	// GetAtt returns the att rule contexts.
	GetAtt() IAtributos_struct_templateContext

	// SetAtt sets the att rule contexts.
	SetAtt(IAtributos_struct_templateContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsDeclaracion_struct_templateContext differentiates from other interfaces.
	IsDeclaracion_struct_templateContext()
}

type Declaracion_struct_templateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	ex     Ast.Instruccion
	id     antlr.Token
	att    IAtributos_struct_templateContext
}

func NewEmptyDeclaracion_struct_templateContext() *Declaracion_struct_templateContext {
	var p = new(Declaracion_struct_templateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_declaracion_struct_template
	return p
}

func (*Declaracion_struct_templateContext) IsDeclaracion_struct_templateContext() {}

func NewDeclaracion_struct_templateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Declaracion_struct_templateContext {
	var p = new(Declaracion_struct_templateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_declaracion_struct_template

	return p
}

func (s *Declaracion_struct_templateContext) GetParser() antlr.Parser { return s.parser }

func (s *Declaracion_struct_templateContext) GetId() antlr.Token { return s.id }

func (s *Declaracion_struct_templateContext) SetId(v antlr.Token) { s.id = v }

func (s *Declaracion_struct_templateContext) GetAtt() IAtributos_struct_templateContext { return s.att }

func (s *Declaracion_struct_templateContext) SetAtt(v IAtributos_struct_templateContext) { s.att = v }

func (s *Declaracion_struct_templateContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Declaracion_struct_templateContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Declaracion_struct_templateContext) PUB() antlr.TerminalNode {
	return s.GetToken(NparserPUB, 0)
}

func (s *Declaracion_struct_templateContext) STRUCT() antlr.TerminalNode {
	return s.GetToken(NparserSTRUCT, 0)
}

func (s *Declaracion_struct_templateContext) LLAVE_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserLLAVE_IZQ, 0)
}

func (s *Declaracion_struct_templateContext) LLAVE_DER() antlr.TerminalNode {
	return s.GetToken(NparserLLAVE_DER, 0)
}

func (s *Declaracion_struct_templateContext) ID_CAMEL() antlr.TerminalNode {
	return s.GetToken(NparserID_CAMEL, 0)
}

func (s *Declaracion_struct_templateContext) Atributos_struct_template() IAtributos_struct_templateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtributos_struct_templateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtributos_struct_templateContext)
}

func (s *Declaracion_struct_templateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Declaracion_struct_templateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Declaracion_struct_templateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterDeclaracion_struct_template(s)
	}
}

func (s *Declaracion_struct_templateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitDeclaracion_struct_template(s)
	}
}

func (p *Nparser) Declaracion_struct_template() (localctx IDeclaracion_struct_templateContext) {
	this := p
	_ = this

	localctx = NewDeclaracion_struct_templateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, NparserRULE_declaracion_struct_template)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(465)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case NparserPUB:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(450)
			p.Match(NparserPUB)
		}
		{
			p.SetState(451)
			p.Match(NparserSTRUCT)
		}
		{
			p.SetState(452)

			var _m = p.Match(NparserID_CAMEL)

			localctx.(*Declaracion_struct_templateContext).id = _m
		}
		{
			p.SetState(453)
			p.Match(NparserLLAVE_IZQ)
		}
		{
			p.SetState(454)

			var _x = p.atributos_struct_template(0)

			localctx.(*Declaracion_struct_templateContext).att = _x
		}
		{
			p.SetState(455)
			p.Match(NparserLLAVE_DER)
		}

		fila := (func() int {
			if localctx.(*Declaracion_struct_templateContext).GetId() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_struct_templateContext).GetId().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Declaracion_struct_templateContext).GetId() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_struct_templateContext).GetId().GetColumn()
			}
		}())
		//tipo := simbolos.NewTipo(Ast.STRUCT, (func() string { if localctx.(*Declaracion_struct_templateContext).GetId() == nil { return "" } else { return localctx.(*Declaracion_struct_templateContext).GetId().GetText() }}()), fila,columna)
		localctx.(*Declaracion_struct_templateContext).ex = simbolos.NewDeclaracionStructTemplate((func() string {
			if localctx.(*Declaracion_struct_templateContext).GetId() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_struct_templateContext).GetId().GetText()
			}
		}()), localctx.(*Declaracion_struct_templateContext).GetAtt().GetList(), true, fila, columna)

	case NparserSTRUCT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(458)
			p.Match(NparserSTRUCT)
		}
		{
			p.SetState(459)

			var _m = p.Match(NparserID_CAMEL)

			localctx.(*Declaracion_struct_templateContext).id = _m
		}
		{
			p.SetState(460)
			p.Match(NparserLLAVE_IZQ)
		}
		{
			p.SetState(461)

			var _x = p.atributos_struct_template(0)

			localctx.(*Declaracion_struct_templateContext).att = _x
		}
		{
			p.SetState(462)
			p.Match(NparserLLAVE_DER)
		}

		fila := (func() int {
			if localctx.(*Declaracion_struct_templateContext).GetId() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_struct_templateContext).GetId().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Declaracion_struct_templateContext).GetId() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_struct_templateContext).GetId().GetColumn()
			}
		}())
		//tipo := simbolos.NewTipo(Ast.STRUCT, (func() string { if localctx.(*Declaracion_struct_templateContext).GetId() == nil { return "" } else { return localctx.(*Declaracion_struct_templateContext).GetId().GetText() }}()), fila,columna)
		localctx.(*Declaracion_struct_templateContext).ex = simbolos.NewDeclaracionStructTemplate((func() string {
			if localctx.(*Declaracion_struct_templateContext).GetId() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_struct_templateContext).GetId().GetText()
			}
		}()), localctx.(*Declaracion_struct_templateContext).GetAtt().GetList(), false, fila, columna)

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAtributos_struct_templateContext is an interface to support dynamic dispatch.
type IAtributos_struct_templateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLista_elementos returns the lista_elementos rule contexts.
	GetLista_elementos() IAtributos_struct_templateContext

	// GetAtt returns the att rule contexts.
	GetAtt() IAtributo_struct_templateContext

	// SetLista_elementos sets the lista_elementos rule contexts.
	SetLista_elementos(IAtributos_struct_templateContext)

	// SetAtt sets the att rule contexts.
	SetAtt(IAtributo_struct_templateContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsAtributos_struct_templateContext differentiates from other interfaces.
	IsAtributos_struct_templateContext()
}

type Atributos_struct_templateContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	list            *arraylist.List
	lista_elementos IAtributos_struct_templateContext
	att             IAtributo_struct_templateContext
}

func NewEmptyAtributos_struct_templateContext() *Atributos_struct_templateContext {
	var p = new(Atributos_struct_templateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_atributos_struct_template
	return p
}

func (*Atributos_struct_templateContext) IsAtributos_struct_templateContext() {}

func NewAtributos_struct_templateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Atributos_struct_templateContext {
	var p = new(Atributos_struct_templateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_atributos_struct_template

	return p
}

func (s *Atributos_struct_templateContext) GetParser() antlr.Parser { return s.parser }

func (s *Atributos_struct_templateContext) GetLista_elementos() IAtributos_struct_templateContext {
	return s.lista_elementos
}

func (s *Atributos_struct_templateContext) GetAtt() IAtributo_struct_templateContext { return s.att }

func (s *Atributos_struct_templateContext) SetLista_elementos(v IAtributos_struct_templateContext) {
	s.lista_elementos = v
}

func (s *Atributos_struct_templateContext) SetAtt(v IAtributo_struct_templateContext) { s.att = v }

func (s *Atributos_struct_templateContext) GetList() *arraylist.List { return s.list }

func (s *Atributos_struct_templateContext) SetList(v *arraylist.List) { s.list = v }

func (s *Atributos_struct_templateContext) Atributo_struct_template() IAtributo_struct_templateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtributo_struct_templateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtributo_struct_templateContext)
}

func (s *Atributos_struct_templateContext) COMA() antlr.TerminalNode {
	return s.GetToken(NparserCOMA, 0)
}

func (s *Atributos_struct_templateContext) Atributos_struct_template() IAtributos_struct_templateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtributos_struct_templateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtributos_struct_templateContext)
}

func (s *Atributos_struct_templateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Atributos_struct_templateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Atributos_struct_templateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterAtributos_struct_template(s)
	}
}

func (s *Atributos_struct_templateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitAtributos_struct_template(s)
	}
}

func (p *Nparser) Atributos_struct_template() (localctx IAtributos_struct_templateContext) {
	return p.atributos_struct_template(0)
}

func (p *Nparser) atributos_struct_template(_p int) (localctx IAtributos_struct_templateContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewAtributos_struct_templateContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IAtributos_struct_templateContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 30
	p.EnterRecursionRule(localctx, 30, NparserRULE_atributos_struct_template, _p)
	localctx.(*Atributos_struct_templateContext).list = arraylist.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(468)

		var _x = p.Atributo_struct_template()

		localctx.(*Atributos_struct_templateContext).att = _x
	}

	localctx.(*Atributos_struct_templateContext).list.Add(localctx.(*Atributos_struct_templateContext).GetAtt().GetEx())

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(478)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 11, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewAtributos_struct_templateContext(p, _parentctx, _parentState)
			localctx.(*Atributos_struct_templateContext).lista_elementos = _prevctx
			p.PushNewRecursionContext(localctx, _startState, NparserRULE_atributos_struct_template)
			p.SetState(471)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(472)
				p.Match(NparserCOMA)
			}
			{
				p.SetState(473)

				var _x = p.Atributo_struct_template()

				localctx.(*Atributos_struct_templateContext).att = _x
			}

			localctx.(*Atributos_struct_templateContext).GetLista_elementos().GetList().Add(localctx.(*Atributos_struct_templateContext).GetAtt().GetEx())
			localctx.(*Atributos_struct_templateContext).list = localctx.(*Atributos_struct_templateContext).GetLista_elementos().GetList()

		}
		p.SetState(480)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 11, p.GetParserRuleContext())
	}

	return localctx
}

// IAtributo_struct_templateContext is an interface to support dynamic dispatch.
type IAtributo_struct_templateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// GetTipo returns the tipo rule contexts.
	GetTipo() ITipo_dato_tipoContext

	// SetTipo sets the tipo rule contexts.
	SetTipo(ITipo_dato_tipoContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Expresion

	// SetEx sets the ex attribute.
	SetEx(Ast.Expresion)

	// IsAtributo_struct_templateContext differentiates from other interfaces.
	IsAtributo_struct_templateContext()
}

type Atributo_struct_templateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	ex     Ast.Expresion
	_ID    antlr.Token
	tipo   ITipo_dato_tipoContext
}

func NewEmptyAtributo_struct_templateContext() *Atributo_struct_templateContext {
	var p = new(Atributo_struct_templateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_atributo_struct_template
	return p
}

func (*Atributo_struct_templateContext) IsAtributo_struct_templateContext() {}

func NewAtributo_struct_templateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Atributo_struct_templateContext {
	var p = new(Atributo_struct_templateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_atributo_struct_template

	return p
}

func (s *Atributo_struct_templateContext) GetParser() antlr.Parser { return s.parser }

func (s *Atributo_struct_templateContext) Get_ID() antlr.Token { return s._ID }

func (s *Atributo_struct_templateContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *Atributo_struct_templateContext) GetTipo() ITipo_dato_tipoContext { return s.tipo }

func (s *Atributo_struct_templateContext) SetTipo(v ITipo_dato_tipoContext) { s.tipo = v }

func (s *Atributo_struct_templateContext) GetEx() Ast.Expresion { return s.ex }

func (s *Atributo_struct_templateContext) SetEx(v Ast.Expresion) { s.ex = v }

func (s *Atributo_struct_templateContext) ID() antlr.TerminalNode {
	return s.GetToken(NparserID, 0)
}

func (s *Atributo_struct_templateContext) DOSPUNTOS() antlr.TerminalNode {
	return s.GetToken(NparserDOSPUNTOS, 0)
}

func (s *Atributo_struct_templateContext) Tipo_dato_tipo() ITipo_dato_tipoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipo_dato_tipoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipo_dato_tipoContext)
}

func (s *Atributo_struct_templateContext) PUB() antlr.TerminalNode {
	return s.GetToken(NparserPUB, 0)
}

func (s *Atributo_struct_templateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Atributo_struct_templateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Atributo_struct_templateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterAtributo_struct_template(s)
	}
}

func (s *Atributo_struct_templateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitAtributo_struct_template(s)
	}
}

func (p *Nparser) Atributo_struct_template() (localctx IAtributo_struct_templateContext) {
	this := p
	_ = this

	localctx = NewAtributo_struct_templateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, NparserRULE_atributo_struct_template)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(492)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case NparserID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(481)

			var _m = p.Match(NparserID)

			localctx.(*Atributo_struct_templateContext)._ID = _m
		}
		{
			p.SetState(482)
			p.Match(NparserDOSPUNTOS)
		}
		{
			p.SetState(483)

			var _x = p.Tipo_dato_tipo()

			localctx.(*Atributo_struct_templateContext).tipo = _x
		}

		fila := (func() int {
			if localctx.(*Atributo_struct_templateContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Atributo_struct_templateContext).Get_ID().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Atributo_struct_templateContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Atributo_struct_templateContext).Get_ID().GetColumn()
			}
		}())
		localctx.(*Atributo_struct_templateContext).ex = simbolos.NewAtributoTemplate((func() string {
			if localctx.(*Atributo_struct_templateContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Atributo_struct_templateContext).Get_ID().GetText()
			}
		}()), localctx.(*Atributo_struct_templateContext).GetTipo().GetEx(), false, fila, columna)

	case NparserPUB:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(486)
			p.Match(NparserPUB)
		}
		{
			p.SetState(487)

			var _m = p.Match(NparserID)

			localctx.(*Atributo_struct_templateContext)._ID = _m
		}
		{
			p.SetState(488)
			p.Match(NparserDOSPUNTOS)
		}
		{
			p.SetState(489)

			var _x = p.Tipo_dato_tipo()

			localctx.(*Atributo_struct_templateContext).tipo = _x
		}

		fila := (func() int {
			if localctx.(*Atributo_struct_templateContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Atributo_struct_templateContext).Get_ID().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Atributo_struct_templateContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Atributo_struct_templateContext).Get_ID().GetColumn()
			}
		}())
		localctx.(*Atributo_struct_templateContext).ex = simbolos.NewAtributoTemplate((func() string {
			if localctx.(*Atributo_struct_templateContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Atributo_struct_templateContext).Get_ID().GetText()
			}
		}()), localctx.(*Atributo_struct_templateContext).GetTipo().GetEx(), true, fila, columna)

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IStruct_instanciaContext is an interface to support dynamic dispatch.
type IStruct_instanciaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetId returns the id token.
	GetId() antlr.Token

	// Get_LLAVE_IZQ returns the _LLAVE_IZQ token.
	Get_LLAVE_IZQ() antlr.Token

	// SetId sets the id token.
	SetId(antlr.Token)

	// Set_LLAVE_IZQ sets the _LLAVE_IZQ token.
	Set_LLAVE_IZQ(antlr.Token)

	// GetAtt returns the att rule contexts.
	GetAtt() IAtributos_struct_instanciaContext

	// Get_tipo_dato_tipo returns the _tipo_dato_tipo rule contexts.
	Get_tipo_dato_tipo() ITipo_dato_tipoContext

	// SetAtt sets the att rule contexts.
	SetAtt(IAtributos_struct_instanciaContext)

	// Set_tipo_dato_tipo sets the _tipo_dato_tipo rule contexts.
	Set_tipo_dato_tipo(ITipo_dato_tipoContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Expresion

	// SetEx sets the ex attribute.
	SetEx(Ast.Expresion)

	// IsStruct_instanciaContext differentiates from other interfaces.
	IsStruct_instanciaContext()
}

type Struct_instanciaContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	ex              Ast.Expresion
	id              antlr.Token
	att             IAtributos_struct_instanciaContext
	_tipo_dato_tipo ITipo_dato_tipoContext
	_LLAVE_IZQ      antlr.Token
}

func NewEmptyStruct_instanciaContext() *Struct_instanciaContext {
	var p = new(Struct_instanciaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_struct_instancia
	return p
}

func (*Struct_instanciaContext) IsStruct_instanciaContext() {}

func NewStruct_instanciaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Struct_instanciaContext {
	var p = new(Struct_instanciaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_struct_instancia

	return p
}

func (s *Struct_instanciaContext) GetParser() antlr.Parser { return s.parser }

func (s *Struct_instanciaContext) GetId() antlr.Token { return s.id }

func (s *Struct_instanciaContext) Get_LLAVE_IZQ() antlr.Token { return s._LLAVE_IZQ }

func (s *Struct_instanciaContext) SetId(v antlr.Token) { s.id = v }

func (s *Struct_instanciaContext) Set_LLAVE_IZQ(v antlr.Token) { s._LLAVE_IZQ = v }

func (s *Struct_instanciaContext) GetAtt() IAtributos_struct_instanciaContext { return s.att }

func (s *Struct_instanciaContext) Get_tipo_dato_tipo() ITipo_dato_tipoContext {
	return s._tipo_dato_tipo
}

func (s *Struct_instanciaContext) SetAtt(v IAtributos_struct_instanciaContext) { s.att = v }

func (s *Struct_instanciaContext) Set_tipo_dato_tipo(v ITipo_dato_tipoContext) { s._tipo_dato_tipo = v }

func (s *Struct_instanciaContext) GetEx() Ast.Expresion { return s.ex }

func (s *Struct_instanciaContext) SetEx(v Ast.Expresion) { s.ex = v }

func (s *Struct_instanciaContext) LLAVE_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserLLAVE_IZQ, 0)
}

func (s *Struct_instanciaContext) LLAVE_DER() antlr.TerminalNode {
	return s.GetToken(NparserLLAVE_DER, 0)
}

func (s *Struct_instanciaContext) ID_CAMEL() antlr.TerminalNode {
	return s.GetToken(NparserID_CAMEL, 0)
}

func (s *Struct_instanciaContext) Atributos_struct_instancia() IAtributos_struct_instanciaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtributos_struct_instanciaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtributos_struct_instanciaContext)
}

func (s *Struct_instanciaContext) Tipo_dato_tipo() ITipo_dato_tipoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipo_dato_tipoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipo_dato_tipoContext)
}

func (s *Struct_instanciaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Struct_instanciaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Struct_instanciaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterStruct_instancia(s)
	}
}

func (s *Struct_instanciaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitStruct_instancia(s)
	}
}

func (p *Nparser) Struct_instancia() (localctx IStruct_instanciaContext) {
	this := p
	_ = this

	localctx = NewStruct_instanciaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, NparserRULE_struct_instancia)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(506)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 13, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(494)

			var _m = p.Match(NparserID_CAMEL)

			localctx.(*Struct_instanciaContext).id = _m
		}
		{
			p.SetState(495)
			p.Match(NparserLLAVE_IZQ)
		}
		{
			p.SetState(496)

			var _x = p.atributos_struct_instancia(0)

			localctx.(*Struct_instanciaContext).att = _x
		}
		{
			p.SetState(497)
			p.Match(NparserLLAVE_DER)
		}

		fila := (func() int {
			if localctx.(*Struct_instanciaContext).GetId() == nil {
				return 0
			} else {
				return localctx.(*Struct_instanciaContext).GetId().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Struct_instanciaContext).GetId() == nil {
				return 0
			} else {
				return localctx.(*Struct_instanciaContext).GetId().GetColumn()
			}
		}())
		tipo := Ast.TipoRetornado{Tipo: Ast.STRUCT, Valor: (func() string {
			if localctx.(*Struct_instanciaContext).GetId() == nil {
				return ""
			} else {
				return localctx.(*Struct_instanciaContext).GetId().GetText()
			}
		}())}
		localctx.(*Struct_instanciaContext).ex = simbolos.NewStructInstancia(tipo, localctx.(*Struct_instanciaContext).GetAtt().GetList(), false, fila, columna)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(500)

			var _x = p.Tipo_dato_tipo()

			localctx.(*Struct_instanciaContext)._tipo_dato_tipo = _x
		}
		{
			p.SetState(501)

			var _m = p.Match(NparserLLAVE_IZQ)

			localctx.(*Struct_instanciaContext)._LLAVE_IZQ = _m
		}
		{
			p.SetState(502)

			var _x = p.atributos_struct_instancia(0)

			localctx.(*Struct_instanciaContext).att = _x
		}
		{
			p.SetState(503)
			p.Match(NparserLLAVE_DER)
		}

		fila := (func() int {
			if localctx.(*Struct_instanciaContext).Get_LLAVE_IZQ() == nil {
				return 0
			} else {
				return localctx.(*Struct_instanciaContext).Get_LLAVE_IZQ().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Struct_instanciaContext).Get_LLAVE_IZQ() == nil {
				return 0
			} else {
				return localctx.(*Struct_instanciaContext).Get_LLAVE_IZQ().GetColumn()
			}
		}()) - 1
		//tipo := Ast.TipoRetornado{Tipo:Ast.ACCESO_MODULO, Valor:localctx.(*Struct_instanciaContext).Get_tipo_dato_tipo().GetEx()}
		localctx.(*Struct_instanciaContext).ex = simbolos.NewStructInstancia(localctx.(*Struct_instanciaContext).Get_tipo_dato_tipo().GetEx(), localctx.(*Struct_instanciaContext).GetAtt().GetList(), false, fila, columna)

	}

	return localctx
}

// IAtributos_struct_instanciaContext is an interface to support dynamic dispatch.
type IAtributos_struct_instanciaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLista_elementos returns the lista_elementos rule contexts.
	GetLista_elementos() IAtributos_struct_instanciaContext

	// GetAtt2 returns the att2 rule contexts.
	GetAtt2() IAtributo_struct_instanciaContext

	// GetAtt1 returns the att1 rule contexts.
	GetAtt1() IAtributo_struct_instanciaContext

	// SetLista_elementos sets the lista_elementos rule contexts.
	SetLista_elementos(IAtributos_struct_instanciaContext)

	// SetAtt2 sets the att2 rule contexts.
	SetAtt2(IAtributo_struct_instanciaContext)

	// SetAtt1 sets the att1 rule contexts.
	SetAtt1(IAtributo_struct_instanciaContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsAtributos_struct_instanciaContext differentiates from other interfaces.
	IsAtributos_struct_instanciaContext()
}

type Atributos_struct_instanciaContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	list            *arraylist.List
	lista_elementos IAtributos_struct_instanciaContext
	att2            IAtributo_struct_instanciaContext
	att1            IAtributo_struct_instanciaContext
}

func NewEmptyAtributos_struct_instanciaContext() *Atributos_struct_instanciaContext {
	var p = new(Atributos_struct_instanciaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_atributos_struct_instancia
	return p
}

func (*Atributos_struct_instanciaContext) IsAtributos_struct_instanciaContext() {}

func NewAtributos_struct_instanciaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Atributos_struct_instanciaContext {
	var p = new(Atributos_struct_instanciaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_atributos_struct_instancia

	return p
}

func (s *Atributos_struct_instanciaContext) GetParser() antlr.Parser { return s.parser }

func (s *Atributos_struct_instanciaContext) GetLista_elementos() IAtributos_struct_instanciaContext {
	return s.lista_elementos
}

func (s *Atributos_struct_instanciaContext) GetAtt2() IAtributo_struct_instanciaContext {
	return s.att2
}

func (s *Atributos_struct_instanciaContext) GetAtt1() IAtributo_struct_instanciaContext {
	return s.att1
}

func (s *Atributos_struct_instanciaContext) SetLista_elementos(v IAtributos_struct_instanciaContext) {
	s.lista_elementos = v
}

func (s *Atributos_struct_instanciaContext) SetAtt2(v IAtributo_struct_instanciaContext) { s.att2 = v }

func (s *Atributos_struct_instanciaContext) SetAtt1(v IAtributo_struct_instanciaContext) { s.att1 = v }

func (s *Atributos_struct_instanciaContext) GetList() *arraylist.List { return s.list }

func (s *Atributos_struct_instanciaContext) SetList(v *arraylist.List) { s.list = v }

func (s *Atributos_struct_instanciaContext) Atributo_struct_instancia() IAtributo_struct_instanciaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtributo_struct_instanciaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtributo_struct_instanciaContext)
}

func (s *Atributos_struct_instanciaContext) COMA() antlr.TerminalNode {
	return s.GetToken(NparserCOMA, 0)
}

func (s *Atributos_struct_instanciaContext) Atributos_struct_instancia() IAtributos_struct_instanciaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtributos_struct_instanciaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtributos_struct_instanciaContext)
}

func (s *Atributos_struct_instanciaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Atributos_struct_instanciaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Atributos_struct_instanciaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterAtributos_struct_instancia(s)
	}
}

func (s *Atributos_struct_instanciaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitAtributos_struct_instancia(s)
	}
}

func (p *Nparser) Atributos_struct_instancia() (localctx IAtributos_struct_instanciaContext) {
	return p.atributos_struct_instancia(0)
}

func (p *Nparser) atributos_struct_instancia(_p int) (localctx IAtributos_struct_instanciaContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewAtributos_struct_instanciaContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IAtributos_struct_instanciaContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 36
	p.EnterRecursionRule(localctx, 36, NparserRULE_atributos_struct_instancia, _p)
	localctx.(*Atributos_struct_instanciaContext).list = arraylist.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(509)

		var _x = p.Atributo_struct_instancia()

		localctx.(*Atributos_struct_instanciaContext).att2 = _x
	}

	localctx.(*Atributos_struct_instanciaContext).list.Add(localctx.(*Atributos_struct_instanciaContext).GetAtt2().GetEx())

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(519)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 14, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewAtributos_struct_instanciaContext(p, _parentctx, _parentState)
			localctx.(*Atributos_struct_instanciaContext).lista_elementos = _prevctx
			p.PushNewRecursionContext(localctx, _startState, NparserRULE_atributos_struct_instancia)
			p.SetState(512)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(513)
				p.Match(NparserCOMA)
			}
			{
				p.SetState(514)

				var _x = p.Atributo_struct_instancia()

				localctx.(*Atributos_struct_instanciaContext).att1 = _x
			}

			localctx.(*Atributos_struct_instanciaContext).GetLista_elementos().GetList().Add(localctx.(*Atributos_struct_instanciaContext).GetAtt1().GetEx())
			localctx.(*Atributos_struct_instanciaContext).list = localctx.(*Atributos_struct_instanciaContext).GetLista_elementos().GetList()

		}
		p.SetState(521)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 14, p.GetParserRuleContext())
	}

	return localctx
}

// IAtributo_struct_instanciaContext is an interface to support dynamic dispatch.
type IAtributo_struct_instanciaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Expresion

	// SetEx sets the ex attribute.
	SetEx(Ast.Expresion)

	// IsAtributo_struct_instanciaContext differentiates from other interfaces.
	IsAtributo_struct_instanciaContext()
}

type Atributo_struct_instanciaContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	ex         Ast.Expresion
	_ID        antlr.Token
	_expresion IExpresionContext
}

func NewEmptyAtributo_struct_instanciaContext() *Atributo_struct_instanciaContext {
	var p = new(Atributo_struct_instanciaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_atributo_struct_instancia
	return p
}

func (*Atributo_struct_instanciaContext) IsAtributo_struct_instanciaContext() {}

func NewAtributo_struct_instanciaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Atributo_struct_instanciaContext {
	var p = new(Atributo_struct_instanciaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_atributo_struct_instancia

	return p
}

func (s *Atributo_struct_instanciaContext) GetParser() antlr.Parser { return s.parser }

func (s *Atributo_struct_instanciaContext) Get_ID() antlr.Token { return s._ID }

func (s *Atributo_struct_instanciaContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *Atributo_struct_instanciaContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *Atributo_struct_instanciaContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *Atributo_struct_instanciaContext) GetEx() Ast.Expresion { return s.ex }

func (s *Atributo_struct_instanciaContext) SetEx(v Ast.Expresion) { s.ex = v }

func (s *Atributo_struct_instanciaContext) ID() antlr.TerminalNode {
	return s.GetToken(NparserID, 0)
}

func (s *Atributo_struct_instanciaContext) DOSPUNTOS() antlr.TerminalNode {
	return s.GetToken(NparserDOSPUNTOS, 0)
}

func (s *Atributo_struct_instanciaContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Atributo_struct_instanciaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Atributo_struct_instanciaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Atributo_struct_instanciaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterAtributo_struct_instancia(s)
	}
}

func (s *Atributo_struct_instanciaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitAtributo_struct_instancia(s)
	}
}

func (p *Nparser) Atributo_struct_instancia() (localctx IAtributo_struct_instanciaContext) {
	this := p
	_ = this

	localctx = NewAtributo_struct_instanciaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, NparserRULE_atributo_struct_instancia)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(522)

		var _m = p.Match(NparserID)

		localctx.(*Atributo_struct_instanciaContext)._ID = _m
	}
	{
		p.SetState(523)
		p.Match(NparserDOSPUNTOS)
	}
	{
		p.SetState(524)

		var _x = p.expresion(0)

		localctx.(*Atributo_struct_instanciaContext)._expresion = _x
	}

	fila := (func() int {
		if localctx.(*Atributo_struct_instanciaContext).Get_ID() == nil {
			return 0
		} else {
			return localctx.(*Atributo_struct_instanciaContext).Get_ID().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*Atributo_struct_instanciaContext).Get_ID() == nil {
			return 0
		} else {
			return localctx.(*Atributo_struct_instanciaContext).Get_ID().GetColumn()
		}
	}())
	localctx.(*Atributo_struct_instanciaContext).ex = simbolos.NewAtributo((func() string {
		if localctx.(*Atributo_struct_instanciaContext).Get_ID() == nil {
			return ""
		} else {
			return localctx.(*Atributo_struct_instanciaContext).Get_ID().GetText()
		}
	}()), localctx.(*Atributo_struct_instanciaContext).Get_expresion().GetEx(), false, fila, columna)

	return localctx
}

// IDeclaracion_moduloContext is an interface to support dynamic dispatch.
type IDeclaracion_moduloContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_MOD returns the _MOD token.
	Get_MOD() antlr.Token

	// Get_ID_CAMEL returns the _ID_CAMEL token.
	Get_ID_CAMEL() antlr.Token

	// Get_PUB returns the _PUB token.
	Get_PUB() antlr.Token

	// Set_MOD sets the _MOD token.
	Set_MOD(antlr.Token)

	// Set_ID_CAMEL sets the _ID_CAMEL token.
	Set_ID_CAMEL(antlr.Token)

	// Set_PUB sets the _PUB token.
	Set_PUB(antlr.Token)

	// Get_bloque_modulo returns the _bloque_modulo rule contexts.
	Get_bloque_modulo() IBloque_moduloContext

	// Set_bloque_modulo sets the _bloque_modulo rule contexts.
	Set_bloque_modulo(IBloque_moduloContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsDeclaracion_moduloContext differentiates from other interfaces.
	IsDeclaracion_moduloContext()
}

type Declaracion_moduloContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	ex             Ast.Instruccion
	_MOD           antlr.Token
	_ID_CAMEL      antlr.Token
	_bloque_modulo IBloque_moduloContext
	_PUB           antlr.Token
}

func NewEmptyDeclaracion_moduloContext() *Declaracion_moduloContext {
	var p = new(Declaracion_moduloContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_declaracion_modulo
	return p
}

func (*Declaracion_moduloContext) IsDeclaracion_moduloContext() {}

func NewDeclaracion_moduloContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Declaracion_moduloContext {
	var p = new(Declaracion_moduloContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_declaracion_modulo

	return p
}

func (s *Declaracion_moduloContext) GetParser() antlr.Parser { return s.parser }

func (s *Declaracion_moduloContext) Get_MOD() antlr.Token { return s._MOD }

func (s *Declaracion_moduloContext) Get_ID_CAMEL() antlr.Token { return s._ID_CAMEL }

func (s *Declaracion_moduloContext) Get_PUB() antlr.Token { return s._PUB }

func (s *Declaracion_moduloContext) Set_MOD(v antlr.Token) { s._MOD = v }

func (s *Declaracion_moduloContext) Set_ID_CAMEL(v antlr.Token) { s._ID_CAMEL = v }

func (s *Declaracion_moduloContext) Set_PUB(v antlr.Token) { s._PUB = v }

func (s *Declaracion_moduloContext) Get_bloque_modulo() IBloque_moduloContext {
	return s._bloque_modulo
}

func (s *Declaracion_moduloContext) Set_bloque_modulo(v IBloque_moduloContext) { s._bloque_modulo = v }

func (s *Declaracion_moduloContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Declaracion_moduloContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Declaracion_moduloContext) MOD() antlr.TerminalNode {
	return s.GetToken(NparserMOD, 0)
}

func (s *Declaracion_moduloContext) ID_CAMEL() antlr.TerminalNode {
	return s.GetToken(NparserID_CAMEL, 0)
}

func (s *Declaracion_moduloContext) Bloque_modulo() IBloque_moduloContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloque_moduloContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloque_moduloContext)
}

func (s *Declaracion_moduloContext) PUB() antlr.TerminalNode {
	return s.GetToken(NparserPUB, 0)
}

func (s *Declaracion_moduloContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Declaracion_moduloContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Declaracion_moduloContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterDeclaracion_modulo(s)
	}
}

func (s *Declaracion_moduloContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitDeclaracion_modulo(s)
	}
}

func (p *Nparser) Declaracion_modulo() (localctx IDeclaracion_moduloContext) {
	this := p
	_ = this

	localctx = NewDeclaracion_moduloContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, NparserRULE_declaracion_modulo)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(538)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case NparserMOD:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(527)

			var _m = p.Match(NparserMOD)

			localctx.(*Declaracion_moduloContext)._MOD = _m
		}
		{
			p.SetState(528)

			var _m = p.Match(NparserID_CAMEL)

			localctx.(*Declaracion_moduloContext)._ID_CAMEL = _m
		}
		{
			p.SetState(529)

			var _x = p.Bloque_modulo()

			localctx.(*Declaracion_moduloContext)._bloque_modulo = _x
		}

		fila := (func() int {
			if localctx.(*Declaracion_moduloContext).Get_MOD() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_moduloContext).Get_MOD().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Declaracion_moduloContext).Get_MOD() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_moduloContext).Get_MOD().GetColumn()
			}
		}()) - 1
		id := expresiones.NewIdentificador((func() string {
			if localctx.(*Declaracion_moduloContext).Get_ID_CAMEL() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_moduloContext).Get_ID_CAMEL().GetText()
			}
		}()), Ast.IDENTIFICADOR, fila, columna)
		modulo := simbolos.NewModulo(id, localctx.(*Declaracion_moduloContext).Get_bloque_modulo().GetList(), false, fila, columna)
		localctx.(*Declaracion_moduloContext).ex = simbolos.NewDeclaracionModulo(modulo, false, fila, columna)

	case NparserPUB:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(532)

			var _m = p.Match(NparserPUB)

			localctx.(*Declaracion_moduloContext)._PUB = _m
		}
		{
			p.SetState(533)
			p.Match(NparserMOD)
		}
		{
			p.SetState(534)

			var _m = p.Match(NparserID_CAMEL)

			localctx.(*Declaracion_moduloContext)._ID_CAMEL = _m
		}
		{
			p.SetState(535)

			var _x = p.Bloque_modulo()

			localctx.(*Declaracion_moduloContext)._bloque_modulo = _x
		}

		fila := (func() int {
			if localctx.(*Declaracion_moduloContext).Get_PUB() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_moduloContext).Get_PUB().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Declaracion_moduloContext).Get_PUB() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_moduloContext).Get_PUB().GetColumn()
			}
		}()) - 1
		id := expresiones.NewIdentificador((func() string {
			if localctx.(*Declaracion_moduloContext).Get_ID_CAMEL() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_moduloContext).Get_ID_CAMEL().GetText()
			}
		}()), Ast.IDENTIFICADOR, fila, columna)
		modulo := simbolos.NewModulo(id, localctx.(*Declaracion_moduloContext).Get_bloque_modulo().GetList(), true, fila, columna)
		localctx.(*Declaracion_moduloContext).ex = simbolos.NewDeclaracionModulo(modulo, true, fila, columna)

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDeclaracion_funcionContext is an interface to support dynamic dispatch.
type IDeclaracion_funcionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_FN returns the _FN token.
	Get_FN() antlr.Token

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Set_FN sets the _FN token.
	Set_FN(antlr.Token)

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// Get_tipo_dato_tipo returns the _tipo_dato_tipo rule contexts.
	Get_tipo_dato_tipo() ITipo_dato_tipoContext

	// Get_bloque returns the _bloque rule contexts.
	Get_bloque() IBloqueContext

	// Get_parametros_funcion returns the _parametros_funcion rule contexts.
	Get_parametros_funcion() IParametros_funcionContext

	// Set_tipo_dato_tipo sets the _tipo_dato_tipo rule contexts.
	Set_tipo_dato_tipo(ITipo_dato_tipoContext)

	// Set_bloque sets the _bloque rule contexts.
	Set_bloque(IBloqueContext)

	// Set_parametros_funcion sets the _parametros_funcion rule contexts.
	Set_parametros_funcion(IParametros_funcionContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsDeclaracion_funcionContext differentiates from other interfaces.
	IsDeclaracion_funcionContext()
}

type Declaracion_funcionContext struct {
	*antlr.BaseParserRuleContext
	parser              antlr.Parser
	ex                  Ast.Instruccion
	_FN                 antlr.Token
	_ID                 antlr.Token
	_tipo_dato_tipo     ITipo_dato_tipoContext
	_bloque             IBloqueContext
	_parametros_funcion IParametros_funcionContext
}

func NewEmptyDeclaracion_funcionContext() *Declaracion_funcionContext {
	var p = new(Declaracion_funcionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_declaracion_funcion
	return p
}

func (*Declaracion_funcionContext) IsDeclaracion_funcionContext() {}

func NewDeclaracion_funcionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Declaracion_funcionContext {
	var p = new(Declaracion_funcionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_declaracion_funcion

	return p
}

func (s *Declaracion_funcionContext) GetParser() antlr.Parser { return s.parser }

func (s *Declaracion_funcionContext) Get_FN() antlr.Token { return s._FN }

func (s *Declaracion_funcionContext) Get_ID() antlr.Token { return s._ID }

func (s *Declaracion_funcionContext) Set_FN(v antlr.Token) { s._FN = v }

func (s *Declaracion_funcionContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *Declaracion_funcionContext) Get_tipo_dato_tipo() ITipo_dato_tipoContext {
	return s._tipo_dato_tipo
}

func (s *Declaracion_funcionContext) Get_bloque() IBloqueContext { return s._bloque }

func (s *Declaracion_funcionContext) Get_parametros_funcion() IParametros_funcionContext {
	return s._parametros_funcion
}

func (s *Declaracion_funcionContext) Set_tipo_dato_tipo(v ITipo_dato_tipoContext) {
	s._tipo_dato_tipo = v
}

func (s *Declaracion_funcionContext) Set_bloque(v IBloqueContext) { s._bloque = v }

func (s *Declaracion_funcionContext) Set_parametros_funcion(v IParametros_funcionContext) {
	s._parametros_funcion = v
}

func (s *Declaracion_funcionContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Declaracion_funcionContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Declaracion_funcionContext) PUB() antlr.TerminalNode {
	return s.GetToken(NparserPUB, 0)
}

func (s *Declaracion_funcionContext) FN() antlr.TerminalNode {
	return s.GetToken(NparserFN, 0)
}

func (s *Declaracion_funcionContext) ID() antlr.TerminalNode {
	return s.GetToken(NparserID, 0)
}

func (s *Declaracion_funcionContext) PAR_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserPAR_IZQ, 0)
}

func (s *Declaracion_funcionContext) PAR_DER() antlr.TerminalNode {
	return s.GetToken(NparserPAR_DER, 0)
}

func (s *Declaracion_funcionContext) FN_TIPO_RETORNO() antlr.TerminalNode {
	return s.GetToken(NparserFN_TIPO_RETORNO, 0)
}

func (s *Declaracion_funcionContext) Tipo_dato_tipo() ITipo_dato_tipoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipo_dato_tipoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipo_dato_tipoContext)
}

func (s *Declaracion_funcionContext) Bloque() IBloqueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloqueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloqueContext)
}

func (s *Declaracion_funcionContext) Parametros_funcion() IParametros_funcionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParametros_funcionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParametros_funcionContext)
}

func (s *Declaracion_funcionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Declaracion_funcionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Declaracion_funcionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterDeclaracion_funcion(s)
	}
}

func (s *Declaracion_funcionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitDeclaracion_funcion(s)
	}
}

func (p *Nparser) Declaracion_funcion() (localctx IDeclaracion_funcionContext) {
	this := p
	_ = this

	localctx = NewDeclaracion_funcionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, NparserRULE_declaracion_funcion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(612)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 16, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(540)
			p.Match(NparserPUB)
		}
		{
			p.SetState(541)

			var _m = p.Match(NparserFN)

			localctx.(*Declaracion_funcionContext)._FN = _m
		}
		{
			p.SetState(542)

			var _m = p.Match(NparserID)

			localctx.(*Declaracion_funcionContext)._ID = _m
		}
		{
			p.SetState(543)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(544)
			p.Match(NparserPAR_DER)
		}
		{
			p.SetState(545)
			p.Match(NparserFN_TIPO_RETORNO)
		}
		{
			p.SetState(546)

			var _x = p.Tipo_dato_tipo()

			localctx.(*Declaracion_funcionContext)._tipo_dato_tipo = _x
		}
		{
			p.SetState(547)

			var _x = p.Bloque()

			localctx.(*Declaracion_funcionContext)._bloque = _x
		}

		parametros := arraylist.New()
		fila := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetColumn()
			}
		}())
		funcion := simbolos.NewFuncion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, localctx.(*Declaracion_funcionContext).Get_bloque().GetList(),
			parametros, localctx.(*Declaracion_funcionContext).Get_tipo_dato_tipo().GetEx(), true, fila, columna)
		localctx.(*Declaracion_funcionContext).ex = simbolos.NewDeclaracionFuncion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), funcion, localctx.(*Declaracion_funcionContext).Get_tipo_dato_tipo().GetEx(),
			false, true, fila, columna)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(550)
			p.Match(NparserPUB)
		}
		{
			p.SetState(551)

			var _m = p.Match(NparserFN)

			localctx.(*Declaracion_funcionContext)._FN = _m
		}
		{
			p.SetState(552)

			var _m = p.Match(NparserID)

			localctx.(*Declaracion_funcionContext)._ID = _m
		}
		{
			p.SetState(553)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(554)
			p.Match(NparserPAR_DER)
		}
		{
			p.SetState(555)

			var _x = p.Bloque()

			localctx.(*Declaracion_funcionContext)._bloque = _x
		}

		parametros := arraylist.New()
		fila := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetColumn()
			}
		}())
		funcion := simbolos.NewFuncion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, localctx.(*Declaracion_funcionContext).Get_bloque().GetList(),
			parametros, Ast.TipoRetornado{Tipo: Ast.VOID, Valor: true}, true, fila, columna)
		nTipo := Ast.TipoRetornado{Tipo: Ast.VOID, Valor: true}
		localctx.(*Declaracion_funcionContext).ex = simbolos.NewDeclaracionFuncion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), funcion, nTipo,
			false, true, fila, columna)

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(558)

			var _m = p.Match(NparserFN)

			localctx.(*Declaracion_funcionContext)._FN = _m
		}
		{
			p.SetState(559)

			var _m = p.Match(NparserID)

			localctx.(*Declaracion_funcionContext)._ID = _m
		}
		{
			p.SetState(560)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(561)
			p.Match(NparserPAR_DER)
		}
		{
			p.SetState(562)
			p.Match(NparserFN_TIPO_RETORNO)
		}
		{
			p.SetState(563)

			var _x = p.Tipo_dato_tipo()

			localctx.(*Declaracion_funcionContext)._tipo_dato_tipo = _x
		}
		{
			p.SetState(564)

			var _x = p.Bloque()

			localctx.(*Declaracion_funcionContext)._bloque = _x
		}

		fila := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetColumn()
			}
		}())
		parametros := arraylist.New()
		funcion := simbolos.NewFuncion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, localctx.(*Declaracion_funcionContext).Get_bloque().GetList(),
			parametros, localctx.(*Declaracion_funcionContext).Get_tipo_dato_tipo().GetEx(), false, fila, columna)
		localctx.(*Declaracion_funcionContext).ex = simbolos.NewDeclaracionFuncion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), funcion, localctx.(*Declaracion_funcionContext).Get_tipo_dato_tipo().GetEx(),
			false, false, fila, columna)

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(567)

			var _m = p.Match(NparserFN)

			localctx.(*Declaracion_funcionContext)._FN = _m
		}
		{
			p.SetState(568)

			var _m = p.Match(NparserID)

			localctx.(*Declaracion_funcionContext)._ID = _m
		}
		{
			p.SetState(569)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(570)
			p.Match(NparserPAR_DER)
		}
		{
			p.SetState(571)

			var _x = p.Bloque()

			localctx.(*Declaracion_funcionContext)._bloque = _x
		}

		fila := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetColumn()
			}
		}())
		parametros := arraylist.New()
		funcion := simbolos.NewFuncion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, localctx.(*Declaracion_funcionContext).Get_bloque().GetList(),
			parametros, Ast.TipoRetornado{Tipo: Ast.VOID, Valor: true}, false, fila, columna)
		nTipo := Ast.TipoRetornado{Tipo: Ast.VOID, Valor: true}
		localctx.(*Declaracion_funcionContext).ex = simbolos.NewDeclaracionFuncion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), funcion, nTipo,
			false, false, fila, columna)

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(574)
			p.Match(NparserPUB)
		}
		{
			p.SetState(575)

			var _m = p.Match(NparserFN)

			localctx.(*Declaracion_funcionContext)._FN = _m
		}
		{
			p.SetState(576)

			var _m = p.Match(NparserID)

			localctx.(*Declaracion_funcionContext)._ID = _m
		}
		{
			p.SetState(577)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(578)

			var _x = p.parametros_funcion(0)

			localctx.(*Declaracion_funcionContext)._parametros_funcion = _x
		}
		{
			p.SetState(579)
			p.Match(NparserPAR_DER)
		}
		{
			p.SetState(580)
			p.Match(NparserFN_TIPO_RETORNO)
		}
		{
			p.SetState(581)

			var _x = p.Tipo_dato_tipo()

			localctx.(*Declaracion_funcionContext)._tipo_dato_tipo = _x
		}
		{
			p.SetState(582)

			var _x = p.Bloque()

			localctx.(*Declaracion_funcionContext)._bloque = _x
		}

		fila := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetColumn()
			}
		}())
		funcion := simbolos.NewFuncion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, localctx.(*Declaracion_funcionContext).Get_bloque().GetList(),
			localctx.(*Declaracion_funcionContext).Get_parametros_funcion().GetList(), localctx.(*Declaracion_funcionContext).Get_tipo_dato_tipo().GetEx(), true, fila, columna)
		localctx.(*Declaracion_funcionContext).ex = simbolos.NewDeclaracionFuncion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), funcion, localctx.(*Declaracion_funcionContext).Get_tipo_dato_tipo().GetEx(),
			false, true, fila, columna)

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(585)
			p.Match(NparserPUB)
		}
		{
			p.SetState(586)

			var _m = p.Match(NparserFN)

			localctx.(*Declaracion_funcionContext)._FN = _m
		}
		{
			p.SetState(587)

			var _m = p.Match(NparserID)

			localctx.(*Declaracion_funcionContext)._ID = _m
		}
		{
			p.SetState(588)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(589)

			var _x = p.parametros_funcion(0)

			localctx.(*Declaracion_funcionContext)._parametros_funcion = _x
		}
		{
			p.SetState(590)
			p.Match(NparserPAR_DER)
		}
		{
			p.SetState(591)

			var _x = p.Bloque()

			localctx.(*Declaracion_funcionContext)._bloque = _x
		}

		fila := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetColumn()
			}
		}())
		funcion := simbolos.NewFuncion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, localctx.(*Declaracion_funcionContext).Get_bloque().GetList(),
			localctx.(*Declaracion_funcionContext).Get_parametros_funcion().GetList(), Ast.TipoRetornado{Tipo: Ast.VOID, Valor: true}, true, fila, columna)
		nTipo := Ast.TipoRetornado{Tipo: Ast.VOID, Valor: true}
		localctx.(*Declaracion_funcionContext).ex = simbolos.NewDeclaracionFuncion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), funcion, nTipo,
			false, true, fila, columna)

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(594)

			var _m = p.Match(NparserFN)

			localctx.(*Declaracion_funcionContext)._FN = _m
		}
		{
			p.SetState(595)

			var _m = p.Match(NparserID)

			localctx.(*Declaracion_funcionContext)._ID = _m
		}
		{
			p.SetState(596)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(597)

			var _x = p.parametros_funcion(0)

			localctx.(*Declaracion_funcionContext)._parametros_funcion = _x
		}
		{
			p.SetState(598)
			p.Match(NparserPAR_DER)
		}
		{
			p.SetState(599)
			p.Match(NparserFN_TIPO_RETORNO)
		}
		{
			p.SetState(600)

			var _x = p.Tipo_dato_tipo()

			localctx.(*Declaracion_funcionContext)._tipo_dato_tipo = _x
		}
		{
			p.SetState(601)

			var _x = p.Bloque()

			localctx.(*Declaracion_funcionContext)._bloque = _x
		}

		fila := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetColumn()
			}
		}())
		funcion := simbolos.NewFuncion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, localctx.(*Declaracion_funcionContext).Get_bloque().GetList(),
			localctx.(*Declaracion_funcionContext).Get_parametros_funcion().GetList(), localctx.(*Declaracion_funcionContext).Get_tipo_dato_tipo().GetEx(), true, fila, columna)
		localctx.(*Declaracion_funcionContext).ex = simbolos.NewDeclaracionFuncion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), funcion, localctx.(*Declaracion_funcionContext).Get_tipo_dato_tipo().GetEx(),
			false, false, fila, columna)

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(604)

			var _m = p.Match(NparserFN)

			localctx.(*Declaracion_funcionContext)._FN = _m
		}
		{
			p.SetState(605)

			var _m = p.Match(NparserID)

			localctx.(*Declaracion_funcionContext)._ID = _m
		}
		{
			p.SetState(606)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(607)

			var _x = p.parametros_funcion(0)

			localctx.(*Declaracion_funcionContext)._parametros_funcion = _x
		}
		{
			p.SetState(608)
			p.Match(NparserPAR_DER)
		}
		{
			p.SetState(609)

			var _x = p.Bloque()

			localctx.(*Declaracion_funcionContext)._bloque = _x
		}

		fila := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Declaracion_funcionContext).Get_FN() == nil {
				return 0
			} else {
				return localctx.(*Declaracion_funcionContext).Get_FN().GetColumn()
			}
		}())
		funcion := simbolos.NewFuncion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), Ast.FUNCION, localctx.(*Declaracion_funcionContext).Get_bloque().GetList(),
			localctx.(*Declaracion_funcionContext).Get_parametros_funcion().GetList(), Ast.TipoRetornado{Tipo: Ast.VOID, Valor: true}, true, fila, columna)
		nTipo := Ast.TipoRetornado{Tipo: Ast.VOID, Valor: true}
		localctx.(*Declaracion_funcionContext).ex = simbolos.NewDeclaracionFuncion((func() string {
			if localctx.(*Declaracion_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Declaracion_funcionContext).Get_ID().GetText()
			}
		}()), funcion, nTipo,
			false, false, fila, columna)

	}

	return localctx
}

// IAsignacionContext is an interface to support dynamic dispatch.
type IAsignacionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_IGUAL returns the _IGUAL token.
	Get_IGUAL() antlr.Token

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Get_PUNTO returns the _PUNTO token.
	Get_PUNTO() antlr.Token

	// GetAtributo returns the atributo token.
	GetAtributo() antlr.Token

	// Set_IGUAL sets the _IGUAL token.
	Set_IGUAL(antlr.Token)

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// Set_PUNTO sets the _PUNTO token.
	Set_PUNTO(antlr.Token)

	// SetAtributo sets the atributo token.
	SetAtributo(antlr.Token)

	// GetId returns the id rule contexts.
	GetId() IAccesos_vector_array_asignacionContext

	// GetElemento returns the elemento rule contexts.
	GetElemento() IExpresionContext

	// Get_control_expresion returns the _control_expresion rule contexts.
	Get_control_expresion() IControl_expresionContext

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// GetIdExp returns the idExp rule contexts.
	GetIdExp() IExpresionContext

	// GetValor returns the valor rule contexts.
	GetValor() IExpresionContext

	// GetEx1 returns the ex1 rule contexts.
	GetEx1() IExpresionContext

	// GetEx2 returns the ex2 rule contexts.
	GetEx2() IExpresionContext

	// GetEx3 returns the ex3 rule contexts.
	GetEx3() IControl_expresionContext

	// SetId sets the id rule contexts.
	SetId(IAccesos_vector_array_asignacionContext)

	// SetElemento sets the elemento rule contexts.
	SetElemento(IExpresionContext)

	// Set_control_expresion sets the _control_expresion rule contexts.
	Set_control_expresion(IControl_expresionContext)

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// SetIdExp sets the idExp rule contexts.
	SetIdExp(IExpresionContext)

	// SetValor sets the valor rule contexts.
	SetValor(IExpresionContext)

	// SetEx1 sets the ex1 rule contexts.
	SetEx1(IExpresionContext)

	// SetEx2 sets the ex2 rule contexts.
	SetEx2(IExpresionContext)

	// SetEx3 sets the ex3 rule contexts.
	SetEx3(IControl_expresionContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsAsignacionContext differentiates from other interfaces.
	IsAsignacionContext()
}

type AsignacionContext struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	ex                 Ast.Instruccion
	id                 IAccesos_vector_array_asignacionContext
	_IGUAL             antlr.Token
	elemento           IExpresionContext
	_control_expresion IControl_expresionContext
	_ID                antlr.Token
	_expresion         IExpresionContext
	idExp              IExpresionContext
	valor              IExpresionContext
	ex1                IExpresionContext
	_PUNTO             antlr.Token
	atributo           antlr.Token
	ex2                IExpresionContext
	ex3                IControl_expresionContext
}

func NewEmptyAsignacionContext() *AsignacionContext {
	var p = new(AsignacionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_asignacion
	return p
}

func (*AsignacionContext) IsAsignacionContext() {}

func NewAsignacionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsignacionContext {
	var p = new(AsignacionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_asignacion

	return p
}

func (s *AsignacionContext) GetParser() antlr.Parser { return s.parser }

func (s *AsignacionContext) Get_IGUAL() antlr.Token { return s._IGUAL }

func (s *AsignacionContext) Get_ID() antlr.Token { return s._ID }

func (s *AsignacionContext) Get_PUNTO() antlr.Token { return s._PUNTO }

func (s *AsignacionContext) GetAtributo() antlr.Token { return s.atributo }

func (s *AsignacionContext) Set_IGUAL(v antlr.Token) { s._IGUAL = v }

func (s *AsignacionContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *AsignacionContext) Set_PUNTO(v antlr.Token) { s._PUNTO = v }

func (s *AsignacionContext) SetAtributo(v antlr.Token) { s.atributo = v }

func (s *AsignacionContext) GetId() IAccesos_vector_array_asignacionContext { return s.id }

func (s *AsignacionContext) GetElemento() IExpresionContext { return s.elemento }

func (s *AsignacionContext) Get_control_expresion() IControl_expresionContext {
	return s._control_expresion
}

func (s *AsignacionContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *AsignacionContext) GetIdExp() IExpresionContext { return s.idExp }

func (s *AsignacionContext) GetValor() IExpresionContext { return s.valor }

func (s *AsignacionContext) GetEx1() IExpresionContext { return s.ex1 }

func (s *AsignacionContext) GetEx2() IExpresionContext { return s.ex2 }

func (s *AsignacionContext) GetEx3() IControl_expresionContext { return s.ex3 }

func (s *AsignacionContext) SetId(v IAccesos_vector_array_asignacionContext) { s.id = v }

func (s *AsignacionContext) SetElemento(v IExpresionContext) { s.elemento = v }

func (s *AsignacionContext) Set_control_expresion(v IControl_expresionContext) {
	s._control_expresion = v
}

func (s *AsignacionContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *AsignacionContext) SetIdExp(v IExpresionContext) { s.idExp = v }

func (s *AsignacionContext) SetValor(v IExpresionContext) { s.valor = v }

func (s *AsignacionContext) SetEx1(v IExpresionContext) { s.ex1 = v }

func (s *AsignacionContext) SetEx2(v IExpresionContext) { s.ex2 = v }

func (s *AsignacionContext) SetEx3(v IControl_expresionContext) { s.ex3 = v }

func (s *AsignacionContext) GetEx() Ast.Instruccion { return s.ex }

func (s *AsignacionContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *AsignacionContext) IGUAL() antlr.TerminalNode {
	return s.GetToken(NparserIGUAL, 0)
}

func (s *AsignacionContext) Accesos_vector_array_asignacion() IAccesos_vector_array_asignacionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAccesos_vector_array_asignacionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAccesos_vector_array_asignacionContext)
}

func (s *AsignacionContext) AllExpresion() []IExpresionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpresionContext)(nil)).Elem())
	var tst = make([]IExpresionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpresionContext)
		}
	}

	return tst
}

func (s *AsignacionContext) Expresion(i int) IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *AsignacionContext) Control_expresion() IControl_expresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_expresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_expresionContext)
}

func (s *AsignacionContext) ID() antlr.TerminalNode {
	return s.GetToken(NparserID, 0)
}

func (s *AsignacionContext) PUNTO() antlr.TerminalNode {
	return s.GetToken(NparserPUNTO, 0)
}

func (s *AsignacionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsignacionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsignacionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterAsignacion(s)
	}
}

func (s *AsignacionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitAsignacion(s)
	}
}

func (p *Nparser) Asignacion() (localctx IAsignacionContext) {
	this := p
	_ = this

	localctx = NewAsignacionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, NparserRULE_asignacion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(653)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 17, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(614)

			var _x = p.Accesos_vector_array_asignacion()

			localctx.(*AsignacionContext).id = _x
		}
		{
			p.SetState(615)

			var _m = p.Match(NparserIGUAL)

			localctx.(*AsignacionContext)._IGUAL = _m
		}
		{
			p.SetState(616)

			var _x = p.expresion(0)

			localctx.(*AsignacionContext).elemento = _x
		}

		fila := (func() int {
			if localctx.(*AsignacionContext).Get_IGUAL() == nil {
				return 0
			} else {
				return localctx.(*AsignacionContext).Get_IGUAL().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*AsignacionContext).Get_IGUAL() == nil {
				return 0
			} else {
				return localctx.(*AsignacionContext).Get_IGUAL().GetColumn()
			}
		}()) - 1
		localctx.(*AsignacionContext).ex = instrucciones.NewAsignacion(localctx.(*AsignacionContext).GetId().GetEx(), localctx.(*AsignacionContext).GetElemento().GetEx(), fila, columna)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(619)

			var _x = p.Accesos_vector_array_asignacion()

			localctx.(*AsignacionContext).id = _x
		}
		{
			p.SetState(620)

			var _m = p.Match(NparserIGUAL)

			localctx.(*AsignacionContext)._IGUAL = _m
		}
		{
			p.SetState(621)

			var _x = p.Control_expresion()

			localctx.(*AsignacionContext)._control_expresion = _x
		}

		fila := (func() int {
			if localctx.(*AsignacionContext).Get_IGUAL() == nil {
				return 0
			} else {
				return localctx.(*AsignacionContext).Get_IGUAL().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*AsignacionContext).Get_IGUAL() == nil {
				return 0
			} else {
				return localctx.(*AsignacionContext).Get_IGUAL().GetColumn()
			}
		}())
		localctx.(*AsignacionContext).ex = instrucciones.NewAsignacion(localctx.(*AsignacionContext).GetId().GetEx(), localctx.(*AsignacionContext).Get_control_expresion().GetEx(), fila, columna)

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(624)

			var _m = p.Match(NparserID)

			localctx.(*AsignacionContext)._ID = _m
		}
		{
			p.SetState(625)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(626)

			var _x = p.expresion(0)

			localctx.(*AsignacionContext)._expresion = _x
		}

		fila := (func() int {
			if localctx.(*AsignacionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*AsignacionContext).Get_ID().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*AsignacionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*AsignacionContext).Get_ID().GetColumn()
			}
		}())
		id := expresiones.NewIdentificador((func() string {
			if localctx.(*AsignacionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*AsignacionContext).Get_ID().GetText()
			}
		}()), Ast.IDENTIFICADOR, fila, columna)
		localctx.(*AsignacionContext).ex = instrucciones.NewAsignacion(id, localctx.(*AsignacionContext).Get_expresion().GetEx(), fila, columna)

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(629)

			var _m = p.Match(NparserID)

			localctx.(*AsignacionContext)._ID = _m
		}
		{
			p.SetState(630)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(631)

			var _x = p.Control_expresion()

			localctx.(*AsignacionContext)._control_expresion = _x
		}

		fila := (func() int {
			if localctx.(*AsignacionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*AsignacionContext).Get_ID().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*AsignacionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*AsignacionContext).Get_ID().GetColumn()
			}
		}())
		id := expresiones.NewIdentificador((func() string {
			if localctx.(*AsignacionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*AsignacionContext).Get_ID().GetText()
			}
		}()), Ast.IDENTIFICADOR, fila, columna)
		localctx.(*AsignacionContext).ex = instrucciones.NewAsignacion(id, localctx.(*AsignacionContext).Get_control_expresion().GetEx(), fila, columna)

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(634)

			var _x = p.expresion(0)

			localctx.(*AsignacionContext).idExp = _x
		}
		{
			p.SetState(635)

			var _m = p.Match(NparserIGUAL)

			localctx.(*AsignacionContext)._IGUAL = _m
		}
		{
			p.SetState(636)

			var _x = p.expresion(0)

			localctx.(*AsignacionContext).valor = _x
		}

		fila := (func() int {
			if localctx.(*AsignacionContext).Get_IGUAL() == nil {
				return 0
			} else {
				return localctx.(*AsignacionContext).Get_IGUAL().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*AsignacionContext).Get_IGUAL() == nil {
				return 0
			} else {
				return localctx.(*AsignacionContext).Get_IGUAL().GetColumn()
			}
		}()) - 1
		localctx.(*AsignacionContext).ex = instrucciones.NewAsignacion(localctx.(*AsignacionContext).GetIdExp().GetEx(), localctx.(*AsignacionContext).GetValor().GetEx(), fila, columna)

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(639)

			var _x = p.expresion(0)

			localctx.(*AsignacionContext).ex1 = _x
		}
		{
			p.SetState(640)

			var _m = p.Match(NparserPUNTO)

			localctx.(*AsignacionContext)._PUNTO = _m
		}
		{
			p.SetState(641)

			var _m = p.Match(NparserID)

			localctx.(*AsignacionContext).atributo = _m
		}
		{
			p.SetState(642)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(643)

			var _x = p.expresion(0)

			localctx.(*AsignacionContext).ex2 = _x
		}

		filaS := (func() int {
			if localctx.(*AsignacionContext).Get_PUNTO() == nil {
				return 0
			} else {
				return localctx.(*AsignacionContext).Get_PUNTO().GetLine()
			}
		}())
		columnaS := (func() int {
			if localctx.(*AsignacionContext).Get_PUNTO() == nil {
				return 0
			} else {
				return localctx.(*AsignacionContext).Get_PUNTO().GetColumn()
			}
		}()) - 1
		filaA := (func() int {
			if localctx.(*AsignacionContext).GetAtributo() == nil {
				return 0
			} else {
				return localctx.(*AsignacionContext).GetAtributo().GetLine()
			}
		}())
		columnaA := (func() int {
			if localctx.(*AsignacionContext).GetAtributo() == nil {
				return 0
			} else {
				return localctx.(*AsignacionContext).GetAtributo().GetColumn()
			}
		}()) - 1
		idAtributo := expresiones.NewIdentificador((func() string {
			if localctx.(*AsignacionContext).GetAtributo() == nil {
				return ""
			} else {
				return localctx.(*AsignacionContext).GetAtributo().GetText()
			}
		}()), Ast.IDENTIFICADOR, filaA, columnaA)
		acceso := simbolos.NewAccesoStruct(localctx.(*AsignacionContext).GetEx1().GetEx(), idAtributo, filaS, columnaS)
		elemento := localctx.(*AsignacionContext).GetEx1().GetEx()
		fila := elemento.(Ast.Abstracto).GetFila()
		columna := elemento.(Ast.Abstracto).GetColumna()
		localctx.(*AsignacionContext).ex = simbolos.NewAsignacionStruct(acceso, localctx.(*AsignacionContext).GetEx2().GetEx(), fila, columna)

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(646)

			var _x = p.expresion(0)

			localctx.(*AsignacionContext).ex1 = _x
		}
		{
			p.SetState(647)

			var _m = p.Match(NparserPUNTO)

			localctx.(*AsignacionContext)._PUNTO = _m
		}
		{
			p.SetState(648)

			var _m = p.Match(NparserID)

			localctx.(*AsignacionContext).atributo = _m
		}
		{
			p.SetState(649)
			p.Match(NparserIGUAL)
		}
		{
			p.SetState(650)

			var _x = p.Control_expresion()

			localctx.(*AsignacionContext).ex3 = _x
		}

		filaS := (func() int {
			if localctx.(*AsignacionContext).Get_PUNTO() == nil {
				return 0
			} else {
				return localctx.(*AsignacionContext).Get_PUNTO().GetLine()
			}
		}())
		columnaS := (func() int {
			if localctx.(*AsignacionContext).Get_PUNTO() == nil {
				return 0
			} else {
				return localctx.(*AsignacionContext).Get_PUNTO().GetColumn()
			}
		}()) - 1
		filaA := (func() int {
			if localctx.(*AsignacionContext).GetAtributo() == nil {
				return 0
			} else {
				return localctx.(*AsignacionContext).GetAtributo().GetLine()
			}
		}())
		columnaA := (func() int {
			if localctx.(*AsignacionContext).GetAtributo() == nil {
				return 0
			} else {
				return localctx.(*AsignacionContext).GetAtributo().GetColumn()
			}
		}()) - 1
		idAtributo := expresiones.NewIdentificador((func() string {
			if localctx.(*AsignacionContext).GetAtributo() == nil {
				return ""
			} else {
				return localctx.(*AsignacionContext).GetAtributo().GetText()
			}
		}()), Ast.IDENTIFICADOR, filaA, columnaA)
		acceso := simbolos.NewAccesoStruct(localctx.(*AsignacionContext).GetEx1().GetEx(), idAtributo, filaS, columnaS)
		elemento := localctx.(*AsignacionContext).GetEx1().GetEx()
		fila := elemento.(Ast.Abstracto).GetFila()
		columna := elemento.(Ast.Abstracto).GetColumna()
		localctx.(*AsignacionContext).ex = simbolos.NewAsignacionStruct(acceso, localctx.(*AsignacionContext).GetEx3().GetEx(), fila, columna)

	}

	return localctx
}

// IAccesos_vector_array_asignacionContext is an interface to support dynamic dispatch.
type IAccesos_vector_array_asignacionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// GetLista returns the lista rule contexts.
	GetLista() IDimension_acceso_arrayContext

	// GetIndex returns the index rule contexts.
	GetIndex() IExpresionContext

	// SetLista sets the lista rule contexts.
	SetLista(IDimension_acceso_arrayContext)

	// SetIndex sets the index rule contexts.
	SetIndex(IExpresionContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Expresion

	// SetEx sets the ex attribute.
	SetEx(Ast.Expresion)

	// IsAccesos_vector_array_asignacionContext differentiates from other interfaces.
	IsAccesos_vector_array_asignacionContext()
}

type Accesos_vector_array_asignacionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	ex     Ast.Expresion
	_ID    antlr.Token
	lista  IDimension_acceso_arrayContext
	index  IExpresionContext
}

func NewEmptyAccesos_vector_array_asignacionContext() *Accesos_vector_array_asignacionContext {
	var p = new(Accesos_vector_array_asignacionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_accesos_vector_array_asignacion
	return p
}

func (*Accesos_vector_array_asignacionContext) IsAccesos_vector_array_asignacionContext() {}

func NewAccesos_vector_array_asignacionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Accesos_vector_array_asignacionContext {
	var p = new(Accesos_vector_array_asignacionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_accesos_vector_array_asignacion

	return p
}

func (s *Accesos_vector_array_asignacionContext) GetParser() antlr.Parser { return s.parser }

func (s *Accesos_vector_array_asignacionContext) Get_ID() antlr.Token { return s._ID }

func (s *Accesos_vector_array_asignacionContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *Accesos_vector_array_asignacionContext) GetLista() IDimension_acceso_arrayContext {
	return s.lista
}

func (s *Accesos_vector_array_asignacionContext) GetIndex() IExpresionContext { return s.index }

func (s *Accesos_vector_array_asignacionContext) SetLista(v IDimension_acceso_arrayContext) {
	s.lista = v
}

func (s *Accesos_vector_array_asignacionContext) SetIndex(v IExpresionContext) { s.index = v }

func (s *Accesos_vector_array_asignacionContext) GetEx() Ast.Expresion { return s.ex }

func (s *Accesos_vector_array_asignacionContext) SetEx(v Ast.Expresion) { s.ex = v }

func (s *Accesos_vector_array_asignacionContext) ID() antlr.TerminalNode {
	return s.GetToken(NparserID, 0)
}

func (s *Accesos_vector_array_asignacionContext) Dimension_acceso_array() IDimension_acceso_arrayContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDimension_acceso_arrayContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDimension_acceso_arrayContext)
}

func (s *Accesos_vector_array_asignacionContext) CORCHETE_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserCORCHETE_IZQ, 0)
}

func (s *Accesos_vector_array_asignacionContext) CORCHETE_DER() antlr.TerminalNode {
	return s.GetToken(NparserCORCHETE_DER, 0)
}

func (s *Accesos_vector_array_asignacionContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Accesos_vector_array_asignacionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Accesos_vector_array_asignacionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Accesos_vector_array_asignacionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterAccesos_vector_array_asignacion(s)
	}
}

func (s *Accesos_vector_array_asignacionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitAccesos_vector_array_asignacion(s)
	}
}

func (p *Nparser) Accesos_vector_array_asignacion() (localctx IAccesos_vector_array_asignacionContext) {
	this := p
	_ = this

	localctx = NewAccesos_vector_array_asignacionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, NparserRULE_accesos_vector_array_asignacion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(667)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 18, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(655)

			var _m = p.Match(NparserID)

			localctx.(*Accesos_vector_array_asignacionContext)._ID = _m
		}
		{
			p.SetState(656)

			var _x = p.dimension_acceso_array(0)

			localctx.(*Accesos_vector_array_asignacionContext).lista = _x
		}

		id := (func() string {
			if localctx.(*Accesos_vector_array_asignacionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Accesos_vector_array_asignacionContext).Get_ID().GetText()
			}
		}())
		fila := (func() int {
			if localctx.(*Accesos_vector_array_asignacionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Accesos_vector_array_asignacionContext).Get_ID().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Accesos_vector_array_asignacionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Accesos_vector_array_asignacionContext).Get_ID().GetColumn()
			}
		}()) - 1
		idE := expresiones.NewIdentificador(id, Ast.IDENTIFICADOR, fila, columna)
		localctx.(*Accesos_vector_array_asignacionContext).ex = fn_array.NewAccesoArray(idE, localctx.(*Accesos_vector_array_asignacionContext).GetLista().GetList(), fila, columna)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(659)

			var _m = p.Match(NparserID)

			localctx.(*Accesos_vector_array_asignacionContext)._ID = _m
		}
		{
			p.SetState(660)
			p.Match(NparserCORCHETE_IZQ)
		}
		{
			p.SetState(661)

			var _x = p.expresion(0)

			localctx.(*Accesos_vector_array_asignacionContext).index = _x
		}
		{
			p.SetState(662)
			p.Match(NparserCORCHETE_DER)
		}

		id := (func() string {
			if localctx.(*Accesos_vector_array_asignacionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Accesos_vector_array_asignacionContext).Get_ID().GetText()
			}
		}())
		fila := (func() int {
			if localctx.(*Accesos_vector_array_asignacionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Accesos_vector_array_asignacionContext).Get_ID().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Accesos_vector_array_asignacionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Accesos_vector_array_asignacionContext).Get_ID().GetColumn()
			}
		}()) - 1
		idE := expresiones.NewIdentificador(id, Ast.IDENTIFICADOR, fila, columna)
		localctx.(*Accesos_vector_array_asignacionContext).ex = fn_vectores.NewAccesoVec(idE, localctx.(*Accesos_vector_array_asignacionContext).GetIndex().GetEx(), Ast.VEC_ACCESO, fila, columna)

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(665)

			var _m = p.Match(NparserID)

			localctx.(*Accesos_vector_array_asignacionContext)._ID = _m
		}

		id := (func() string {
			if localctx.(*Accesos_vector_array_asignacionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Accesos_vector_array_asignacionContext).Get_ID().GetText()
			}
		}())
		fila := (func() int {
			if localctx.(*Accesos_vector_array_asignacionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Accesos_vector_array_asignacionContext).Get_ID().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Accesos_vector_array_asignacionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Accesos_vector_array_asignacionContext).Get_ID().GetColumn()
			}
		}())
		localctx.(*Accesos_vector_array_asignacionContext).ex = expresiones.NewIdentificador(id, Ast.IDENTIFICADOR, fila, columna)

	}

	return localctx
}

// IExpresionContext is an interface to support dynamic dispatch.
type IExpresionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// Get_PAR_IZQ returns the _PAR_IZQ token.
	Get_PAR_IZQ() antlr.Token

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Get_TRUE returns the _TRUE token.
	Get_TRUE() antlr.Token

	// Get_FALSE returns the _FALSE token.
	Get_FALSE() antlr.Token

	// Get_CARACTER returns the _CARACTER token.
	Get_CARACTER() antlr.Token

	// Get_DECIMAL returns the _DECIMAL token.
	Get_DECIMAL() antlr.Token

	// Get_NUMERO returns the _NUMERO token.
	Get_NUMERO() antlr.Token

	// Get_CADENA returns the _CADENA token.
	Get_CADENA() antlr.Token

	// Get_AND returns the _AND token.
	Get_AND() antlr.Token

	// Get_OR returns the _OR token.
	Get_OR() antlr.Token

	// Get_PUNTO returns the _PUNTO token.
	Get_PUNTO() antlr.Token

	// GetAtributo returns the atributo token.
	GetAtributo() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// Set_PAR_IZQ sets the _PAR_IZQ token.
	Set_PAR_IZQ(antlr.Token)

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// Set_TRUE sets the _TRUE token.
	Set_TRUE(antlr.Token)

	// Set_FALSE sets the _FALSE token.
	Set_FALSE(antlr.Token)

	// Set_CARACTER sets the _CARACTER token.
	Set_CARACTER(antlr.Token)

	// Set_DECIMAL sets the _DECIMAL token.
	Set_DECIMAL(antlr.Token)

	// Set_NUMERO sets the _NUMERO token.
	Set_NUMERO(antlr.Token)

	// Set_CADENA sets the _CADENA token.
	Set_CADENA(antlr.Token)

	// Set_AND sets the _AND token.
	Set_AND(antlr.Token)

	// Set_OR sets the _OR token.
	Set_OR(antlr.Token)

	// Set_PUNTO sets the _PUNTO token.
	Set_PUNTO(antlr.Token)

	// SetAtributo sets the atributo token.
	SetAtributo(antlr.Token)

	// GetE returns the e rule contexts.
	GetE() IExpresionContext

	// GetOp_izq returns the op_izq rule contexts.
	GetOp_izq() IExpresionContext

	// GetObj returns the obj rule contexts.
	GetObj() IExpresionContext

	// GetId returns the id rule contexts.
	GetId() IExpresionContext

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// Get_tipo_dato returns the _tipo_dato rule contexts.
	Get_tipo_dato() ITipo_datoContext

	// Get_llamada_funcion returns the _llamada_funcion rule contexts.
	Get_llamada_funcion() ILlamada_funcionContext

	// Get_metodos_iniciar_vector returns the _metodos_iniciar_vector rule contexts.
	Get_metodos_iniciar_vector() IMetodos_iniciar_vectorContext

	// Get_potencia returns the _potencia rule contexts.
	Get_potencia() IPotenciaContext

	// Get_array returns the _array rule contexts.
	Get_array() IArrayContext

	// Get_struct_instancia returns the _struct_instancia rule contexts.
	Get_struct_instancia() IStruct_instanciaContext

	// Get_acceso_modulo returns the _acceso_modulo rule contexts.
	Get_acceso_modulo() IAcceso_moduloContext

	// GetOp_der returns the op_der rule contexts.
	GetOp_der() IExpresionContext

	// GetLista returns the lista rule contexts.
	GetLista() IDimension_acceso_arrayContext

	// GetExp returns the exp rule contexts.
	GetExp() IExpresionContext

	// GetIndex returns the index rule contexts.
	GetIndex() IExpresionContext

	// SetE sets the e rule contexts.
	SetE(IExpresionContext)

	// SetOp_izq sets the op_izq rule contexts.
	SetOp_izq(IExpresionContext)

	// SetObj sets the obj rule contexts.
	SetObj(IExpresionContext)

	// SetId sets the id rule contexts.
	SetId(IExpresionContext)

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// Set_tipo_dato sets the _tipo_dato rule contexts.
	Set_tipo_dato(ITipo_datoContext)

	// Set_llamada_funcion sets the _llamada_funcion rule contexts.
	Set_llamada_funcion(ILlamada_funcionContext)

	// Set_metodos_iniciar_vector sets the _metodos_iniciar_vector rule contexts.
	Set_metodos_iniciar_vector(IMetodos_iniciar_vectorContext)

	// Set_potencia sets the _potencia rule contexts.
	Set_potencia(IPotenciaContext)

	// Set_array sets the _array rule contexts.
	Set_array(IArrayContext)

	// Set_struct_instancia sets the _struct_instancia rule contexts.
	Set_struct_instancia(IStruct_instanciaContext)

	// Set_acceso_modulo sets the _acceso_modulo rule contexts.
	Set_acceso_modulo(IAcceso_moduloContext)

	// SetOp_der sets the op_der rule contexts.
	SetOp_der(IExpresionContext)

	// SetLista sets the lista rule contexts.
	SetLista(IDimension_acceso_arrayContext)

	// SetExp sets the exp rule contexts.
	SetExp(IExpresionContext)

	// SetIndex sets the index rule contexts.
	SetIndex(IExpresionContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Expresion

	// SetEx sets the ex attribute.
	SetEx(Ast.Expresion)

	// IsExpresionContext differentiates from other interfaces.
	IsExpresionContext()
}

type ExpresionContext struct {
	*antlr.BaseParserRuleContext
	parser                  antlr.Parser
	ex                      Ast.Expresion
	e                       IExpresionContext
	op_izq                  IExpresionContext
	obj                     IExpresionContext
	id                      IExpresionContext
	op                      antlr.Token
	_expresion              IExpresionContext
	_PAR_IZQ                antlr.Token
	_tipo_dato              ITipo_datoContext
	_llamada_funcion        ILlamada_funcionContext
	_metodos_iniciar_vector IMetodos_iniciar_vectorContext
	_potencia               IPotenciaContext
	_array                  IArrayContext
	_struct_instancia       IStruct_instanciaContext
	_acceso_modulo          IAcceso_moduloContext
	_ID                     antlr.Token
	_TRUE                   antlr.Token
	_FALSE                  antlr.Token
	_CARACTER               antlr.Token
	_DECIMAL                antlr.Token
	_NUMERO                 antlr.Token
	_CADENA                 antlr.Token
	op_der                  IExpresionContext
	_AND                    antlr.Token
	_OR                     antlr.Token
	_PUNTO                  antlr.Token
	atributo                antlr.Token
	lista                   IDimension_acceso_arrayContext
	exp                     IExpresionContext
	index                   IExpresionContext
}

func NewEmptyExpresionContext() *ExpresionContext {
	var p = new(ExpresionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_expresion
	return p
}

func (*ExpresionContext) IsExpresionContext() {}

func NewExpresionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpresionContext {
	var p = new(ExpresionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_expresion

	return p
}

func (s *ExpresionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpresionContext) GetOp() antlr.Token { return s.op }

func (s *ExpresionContext) Get_PAR_IZQ() antlr.Token { return s._PAR_IZQ }

func (s *ExpresionContext) Get_ID() antlr.Token { return s._ID }

func (s *ExpresionContext) Get_TRUE() antlr.Token { return s._TRUE }

func (s *ExpresionContext) Get_FALSE() antlr.Token { return s._FALSE }

func (s *ExpresionContext) Get_CARACTER() antlr.Token { return s._CARACTER }

func (s *ExpresionContext) Get_DECIMAL() antlr.Token { return s._DECIMAL }

func (s *ExpresionContext) Get_NUMERO() antlr.Token { return s._NUMERO }

func (s *ExpresionContext) Get_CADENA() antlr.Token { return s._CADENA }

func (s *ExpresionContext) Get_AND() antlr.Token { return s._AND }

func (s *ExpresionContext) Get_OR() antlr.Token { return s._OR }

func (s *ExpresionContext) Get_PUNTO() antlr.Token { return s._PUNTO }

func (s *ExpresionContext) GetAtributo() antlr.Token { return s.atributo }

func (s *ExpresionContext) SetOp(v antlr.Token) { s.op = v }

func (s *ExpresionContext) Set_PAR_IZQ(v antlr.Token) { s._PAR_IZQ = v }

func (s *ExpresionContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *ExpresionContext) Set_TRUE(v antlr.Token) { s._TRUE = v }

func (s *ExpresionContext) Set_FALSE(v antlr.Token) { s._FALSE = v }

func (s *ExpresionContext) Set_CARACTER(v antlr.Token) { s._CARACTER = v }

func (s *ExpresionContext) Set_DECIMAL(v antlr.Token) { s._DECIMAL = v }

func (s *ExpresionContext) Set_NUMERO(v antlr.Token) { s._NUMERO = v }

func (s *ExpresionContext) Set_CADENA(v antlr.Token) { s._CADENA = v }

func (s *ExpresionContext) Set_AND(v antlr.Token) { s._AND = v }

func (s *ExpresionContext) Set_OR(v antlr.Token) { s._OR = v }

func (s *ExpresionContext) Set_PUNTO(v antlr.Token) { s._PUNTO = v }

func (s *ExpresionContext) SetAtributo(v antlr.Token) { s.atributo = v }

func (s *ExpresionContext) GetE() IExpresionContext { return s.e }

func (s *ExpresionContext) GetOp_izq() IExpresionContext { return s.op_izq }

func (s *ExpresionContext) GetObj() IExpresionContext { return s.obj }

func (s *ExpresionContext) GetId() IExpresionContext { return s.id }

func (s *ExpresionContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *ExpresionContext) Get_tipo_dato() ITipo_datoContext { return s._tipo_dato }

func (s *ExpresionContext) Get_llamada_funcion() ILlamada_funcionContext { return s._llamada_funcion }

func (s *ExpresionContext) Get_metodos_iniciar_vector() IMetodos_iniciar_vectorContext {
	return s._metodos_iniciar_vector
}

func (s *ExpresionContext) Get_potencia() IPotenciaContext { return s._potencia }

func (s *ExpresionContext) Get_array() IArrayContext { return s._array }

func (s *ExpresionContext) Get_struct_instancia() IStruct_instanciaContext {
	return s._struct_instancia
}

func (s *ExpresionContext) Get_acceso_modulo() IAcceso_moduloContext { return s._acceso_modulo }

func (s *ExpresionContext) GetOp_der() IExpresionContext { return s.op_der }

func (s *ExpresionContext) GetLista() IDimension_acceso_arrayContext { return s.lista }

func (s *ExpresionContext) GetExp() IExpresionContext { return s.exp }

func (s *ExpresionContext) GetIndex() IExpresionContext { return s.index }

func (s *ExpresionContext) SetE(v IExpresionContext) { s.e = v }

func (s *ExpresionContext) SetOp_izq(v IExpresionContext) { s.op_izq = v }

func (s *ExpresionContext) SetObj(v IExpresionContext) { s.obj = v }

func (s *ExpresionContext) SetId(v IExpresionContext) { s.id = v }

func (s *ExpresionContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *ExpresionContext) Set_tipo_dato(v ITipo_datoContext) { s._tipo_dato = v }

func (s *ExpresionContext) Set_llamada_funcion(v ILlamada_funcionContext) { s._llamada_funcion = v }

func (s *ExpresionContext) Set_metodos_iniciar_vector(v IMetodos_iniciar_vectorContext) {
	s._metodos_iniciar_vector = v
}

func (s *ExpresionContext) Set_potencia(v IPotenciaContext) { s._potencia = v }

func (s *ExpresionContext) Set_array(v IArrayContext) { s._array = v }

func (s *ExpresionContext) Set_struct_instancia(v IStruct_instanciaContext) { s._struct_instancia = v }

func (s *ExpresionContext) Set_acceso_modulo(v IAcceso_moduloContext) { s._acceso_modulo = v }

func (s *ExpresionContext) SetOp_der(v IExpresionContext) { s.op_der = v }

func (s *ExpresionContext) SetLista(v IDimension_acceso_arrayContext) { s.lista = v }

func (s *ExpresionContext) SetExp(v IExpresionContext) { s.exp = v }

func (s *ExpresionContext) SetIndex(v IExpresionContext) { s.index = v }

func (s *ExpresionContext) GetEx() Ast.Expresion { return s.ex }

func (s *ExpresionContext) SetEx(v Ast.Expresion) { s.ex = v }

func (s *ExpresionContext) AllExpresion() []IExpresionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpresionContext)(nil)).Elem())
	var tst = make([]IExpresionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpresionContext)
		}
	}

	return tst
}

func (s *ExpresionContext) Expresion(i int) IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *ExpresionContext) RESTA() antlr.TerminalNode {
	return s.GetToken(NparserRESTA, 0)
}

func (s *ExpresionContext) NOT() antlr.TerminalNode {
	return s.GetToken(NparserNOT, 0)
}

func (s *ExpresionContext) PAR_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserPAR_IZQ, 0)
}

func (s *ExpresionContext) PAR_DER() antlr.TerminalNode {
	return s.GetToken(NparserPAR_DER, 0)
}

func (s *ExpresionContext) AS() antlr.TerminalNode {
	return s.GetToken(NparserAS, 0)
}

func (s *ExpresionContext) Tipo_dato() ITipo_datoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipo_datoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipo_datoContext)
}

func (s *ExpresionContext) Llamada_funcion() ILlamada_funcionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILlamada_funcionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILlamada_funcionContext)
}

func (s *ExpresionContext) Metodos_iniciar_vector() IMetodos_iniciar_vectorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMetodos_iniciar_vectorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMetodos_iniciar_vectorContext)
}

func (s *ExpresionContext) Potencia() IPotenciaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPotenciaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPotenciaContext)
}

func (s *ExpresionContext) Array() IArrayContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrayContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrayContext)
}

func (s *ExpresionContext) Struct_instancia() IStruct_instanciaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStruct_instanciaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStruct_instanciaContext)
}

func (s *ExpresionContext) Acceso_modulo() IAcceso_moduloContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAcceso_moduloContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAcceso_moduloContext)
}

func (s *ExpresionContext) ID() antlr.TerminalNode {
	return s.GetToken(NparserID, 0)
}

func (s *ExpresionContext) TRUE() antlr.TerminalNode {
	return s.GetToken(NparserTRUE, 0)
}

func (s *ExpresionContext) FALSE() antlr.TerminalNode {
	return s.GetToken(NparserFALSE, 0)
}

func (s *ExpresionContext) CARACTER() antlr.TerminalNode {
	return s.GetToken(NparserCARACTER, 0)
}

func (s *ExpresionContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(NparserDECIMAL, 0)
}

func (s *ExpresionContext) NUMERO() antlr.TerminalNode {
	return s.GetToken(NparserNUMERO, 0)
}

func (s *ExpresionContext) CADENA() antlr.TerminalNode {
	return s.GetToken(NparserCADENA, 0)
}

func (s *ExpresionContext) MULTIPLICACION() antlr.TerminalNode {
	return s.GetToken(NparserMULTIPLICACION, 0)
}

func (s *ExpresionContext) DIVISION() antlr.TerminalNode {
	return s.GetToken(NparserDIVISION, 0)
}

func (s *ExpresionContext) MODULO() antlr.TerminalNode {
	return s.GetToken(NparserMODULO, 0)
}

func (s *ExpresionContext) SUMA() antlr.TerminalNode {
	return s.GetToken(NparserSUMA, 0)
}

func (s *ExpresionContext) MAYOR_I() antlr.TerminalNode {
	return s.GetToken(NparserMAYOR_I, 0)
}

func (s *ExpresionContext) MAYOR() antlr.TerminalNode {
	return s.GetToken(NparserMAYOR, 0)
}

func (s *ExpresionContext) MENOR_I() antlr.TerminalNode {
	return s.GetToken(NparserMENOR_I, 0)
}

func (s *ExpresionContext) MENOR() antlr.TerminalNode {
	return s.GetToken(NparserMENOR, 0)
}

func (s *ExpresionContext) IGUALDAD() antlr.TerminalNode {
	return s.GetToken(NparserIGUALDAD, 0)
}

func (s *ExpresionContext) DISTINTO() antlr.TerminalNode {
	return s.GetToken(NparserDISTINTO, 0)
}

func (s *ExpresionContext) AND() antlr.TerminalNode {
	return s.GetToken(NparserAND, 0)
}

func (s *ExpresionContext) OR() antlr.TerminalNode {
	return s.GetToken(NparserOR, 0)
}

func (s *ExpresionContext) PUNTO() antlr.TerminalNode {
	return s.GetToken(NparserPUNTO, 0)
}

func (s *ExpresionContext) TO_STRING() antlr.TerminalNode {
	return s.GetToken(NparserTO_STRING, 0)
}

func (s *ExpresionContext) SQRT() antlr.TerminalNode {
	return s.GetToken(NparserSQRT, 0)
}

func (s *ExpresionContext) ABS() antlr.TerminalNode {
	return s.GetToken(NparserABS, 0)
}

func (s *ExpresionContext) Dimension_acceso_array() IDimension_acceso_arrayContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDimension_acceso_arrayContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDimension_acceso_arrayContext)
}

func (s *ExpresionContext) LEN() antlr.TerminalNode {
	return s.GetToken(NparserLEN, 0)
}

func (s *ExpresionContext) CAPACITY() antlr.TerminalNode {
	return s.GetToken(NparserCAPACITY, 0)
}

func (s *ExpresionContext) CONTAINS() antlr.TerminalNode {
	return s.GetToken(NparserCONTAINS, 0)
}

func (s *ExpresionContext) AMPERSAND() antlr.TerminalNode {
	return s.GetToken(NparserAMPERSAND, 0)
}

func (s *ExpresionContext) REMOVE() antlr.TerminalNode {
	return s.GetToken(NparserREMOVE, 0)
}

func (s *ExpresionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpresionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpresionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterExpresion(s)
	}
}

func (s *ExpresionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitExpresion(s)
	}
}

func (p *Nparser) Expresion() (localctx IExpresionContext) {
	return p.expresion(0)
}

func (p *Nparser) expresion(_p int) (localctx IExpresionContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpresionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpresionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 48
	p.EnterRecursionRule(localctx, 48, NparserRULE_expresion, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(718)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 19, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(670)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ExpresionContext).op = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == NparserRESTA || _la == NparserNOT) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ExpresionContext).op = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(671)

			var _x = p.expresion(31)

			localctx.(*ExpresionContext).op_izq = _x
			localctx.(*ExpresionContext)._expresion = _x
		}

		fila := (func() int {
			if localctx.(*ExpresionContext).GetOp() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).GetOp().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ExpresionContext).GetOp() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).GetOp().GetColumn()
			}
		}())
		localctx.(*ExpresionContext).ex = expresiones.NewOperation(localctx.(*ExpresionContext).GetOp_izq().GetEx(), (func() string {
			if localctx.(*ExpresionContext).GetOp() == nil {
				return ""
			} else {
				return localctx.(*ExpresionContext).GetOp().GetText()
			}
		}()), nil, true, fila, columna)

	case 2:
		{
			p.SetState(674)

			var _m = p.Match(NparserPAR_IZQ)

			localctx.(*ExpresionContext)._PAR_IZQ = _m
		}
		{
			p.SetState(675)

			var _x = p.expresion(0)

			localctx.(*ExpresionContext)._expresion = _x
		}
		{
			p.SetState(676)
			p.Match(NparserPAR_DER)
		}

		localctx.(*ExpresionContext).ex = localctx.(*ExpresionContext).Get_expresion().GetEx()

	case 3:
		{
			p.SetState(679)

			var _m = p.Match(NparserPAR_IZQ)

			localctx.(*ExpresionContext)._PAR_IZQ = _m
		}
		{
			p.SetState(680)

			var _x = p.expresion(0)

			localctx.(*ExpresionContext)._expresion = _x
		}
		{
			p.SetState(681)
			p.Match(NparserAS)
		}
		{
			p.SetState(682)

			var _x = p.Tipo_dato()

			localctx.(*ExpresionContext)._tipo_dato = _x
		}
		{
			p.SetState(683)
			p.Match(NparserPAR_DER)
		}

		//Cast
		fila := (func() int {
			if localctx.(*ExpresionContext).Get_PAR_IZQ() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_PAR_IZQ().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ExpresionContext).Get_PAR_IZQ() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_PAR_IZQ().GetColumn()
			}
		}())
		localctx.(*ExpresionContext).ex = expresiones.NewCast(localctx.(*ExpresionContext).Get_expresion().GetEx(), Ast.CAST, localctx.(*ExpresionContext).Get_tipo_dato().GetEx(), fila, columna)

	case 4:
		{
			p.SetState(686)

			var _x = p.Llamada_funcion()

			localctx.(*ExpresionContext)._llamada_funcion = _x
		}

		localctx.(*ExpresionContext).ex = localctx.(*ExpresionContext).Get_llamada_funcion().GetEx()

	case 5:
		{
			p.SetState(689)

			var _x = p.Metodos_iniciar_vector()

			localctx.(*ExpresionContext)._metodos_iniciar_vector = _x
		}

		localctx.(*ExpresionContext).ex = localctx.(*ExpresionContext).Get_metodos_iniciar_vector().GetEx()

	case 6:
		{
			p.SetState(692)

			var _x = p.Potencia()

			localctx.(*ExpresionContext)._potencia = _x
		}

		localctx.(*ExpresionContext).ex = localctx.(*ExpresionContext).Get_potencia().GetEx()

	case 7:
		{
			p.SetState(695)

			var _x = p.Array()

			localctx.(*ExpresionContext)._array = _x
		}

		localctx.(*ExpresionContext).ex = localctx.(*ExpresionContext).Get_array().GetEx()

	case 8:
		{
			p.SetState(698)

			var _x = p.Struct_instancia()

			localctx.(*ExpresionContext)._struct_instancia = _x
		}

		localctx.(*ExpresionContext).ex = localctx.(*ExpresionContext).Get_struct_instancia().GetEx()

	case 9:
		{
			p.SetState(701)

			var _x = p.Acceso_modulo()

			localctx.(*ExpresionContext)._acceso_modulo = _x
		}

		localctx.(*ExpresionContext).ex = localctx.(*ExpresionContext).Get_acceso_modulo().GetEx()

	case 10:
		{
			p.SetState(704)

			var _m = p.Match(NparserID)

			localctx.(*ExpresionContext)._ID = _m
		}

		id := (func() string {
			if localctx.(*ExpresionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*ExpresionContext).Get_ID().GetText()
			}
		}())
		fila := (func() int {
			if localctx.(*ExpresionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_ID().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ExpresionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_ID().GetColumn()
			}
		}())
		localctx.(*ExpresionContext).ex = expresiones.NewIdentificador(id, Ast.IDENTIFICADOR, fila, columna)

	case 11:
		{
			p.SetState(706)

			var _m = p.Match(NparserTRUE)

			localctx.(*ExpresionContext)._TRUE = _m
		}

		valor := true
		fila := (func() int {
			if localctx.(*ExpresionContext).Get_TRUE() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_TRUE().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ExpresionContext).Get_TRUE() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_TRUE().GetColumn()
			}
		}())
		localctx.(*ExpresionContext).ex = expresiones.NewPrimitivo(valor, Ast.BOOLEAN, fila, columna)

	case 12:
		{
			p.SetState(708)

			var _m = p.Match(NparserFALSE)

			localctx.(*ExpresionContext)._FALSE = _m
		}

		valor := false
		fila := (func() int {
			if localctx.(*ExpresionContext).Get_FALSE() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_FALSE().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ExpresionContext).Get_FALSE() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_FALSE().GetColumn()
			}
		}())
		localctx.(*ExpresionContext).ex = expresiones.NewPrimitivo(valor, Ast.BOOLEAN, fila, columna)

	case 13:
		{
			p.SetState(710)

			var _m = p.Match(NparserCARACTER)

			localctx.(*ExpresionContext)._CARACTER = _m
		}

		valor := (func() string {
			if localctx.(*ExpresionContext).Get_CARACTER() == nil {
				return ""
			} else {
				return localctx.(*ExpresionContext).Get_CARACTER().GetText()
			}
		}())
		valor = valor[1 : len(valor)-1]
		fila := (func() int {
			if localctx.(*ExpresionContext).Get_CARACTER() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_CARACTER().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ExpresionContext).Get_CARACTER() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_CARACTER().GetColumn()
			}
		}())
		localctx.(*ExpresionContext).ex = expresiones.NewPrimitivo(valor, Ast.CHAR, fila, columna)

	case 14:
		{
			p.SetState(712)

			var _m = p.Match(NparserDECIMAL)

			localctx.(*ExpresionContext)._DECIMAL = _m
		}

		valor, err := strconv.ParseFloat((func() string {
			if localctx.(*ExpresionContext).Get_DECIMAL() == nil {
				return ""
			} else {
				return localctx.(*ExpresionContext).Get_DECIMAL().GetText()
			}
		}()), 64)
		if err != nil {
			fmt.Println("Hay un error en el get número")
			fmt.Println(err)
		}
		fila := (func() int {
			if localctx.(*ExpresionContext).Get_DECIMAL() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_DECIMAL().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ExpresionContext).Get_DECIMAL() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_DECIMAL().GetColumn()
			}
		}())
		localctx.(*ExpresionContext).ex = expresiones.NewPrimitivo(valor, Ast.F64, fila, columna)

	case 15:
		{
			p.SetState(714)

			var _m = p.Match(NparserNUMERO)

			localctx.(*ExpresionContext)._NUMERO = _m
		}

		valor, err := strconv.Atoi((func() string {
			if localctx.(*ExpresionContext).Get_NUMERO() == nil {
				return ""
			} else {
				return localctx.(*ExpresionContext).Get_NUMERO().GetText()
			}
		}()))
		if err != nil {
			fmt.Println("Hay un error en el get número")
			fmt.Println(err)
		}
		fila := (func() int {
			if localctx.(*ExpresionContext).Get_NUMERO() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_NUMERO().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ExpresionContext).Get_NUMERO() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_NUMERO().GetColumn()
			}
		}())
		localctx.(*ExpresionContext).ex = expresiones.NewPrimitivo(valor, Ast.I64, fila, columna)

	case 16:
		{
			p.SetState(716)

			var _m = p.Match(NparserCADENA)

			localctx.(*ExpresionContext)._CADENA = _m
		}

		fila := (func() int {
			if localctx.(*ExpresionContext).Get_CADENA() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_CADENA().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ExpresionContext).Get_CADENA() == nil {
				return 0
			} else {
				return localctx.(*ExpresionContext).Get_CADENA().GetColumn()
			}
		}())
		valor := (func() string {
			if localctx.(*ExpresionContext).Get_CADENA() == nil {
				return ""
			} else {
				return localctx.(*ExpresionContext).Get_CADENA().GetText()
			}
		}())
		valor = valor[1 : len(valor)-1]
		localctx.(*ExpresionContext).ex = expresiones.NewPrimitivo(valor, Ast.STR, fila, columna)

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(807)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 21, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(805)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 20, p.GetParserRuleContext()) {
			case 1:
				localctx = NewExpresionContext(p, _parentctx, _parentState)
				localctx.(*ExpresionContext).op_izq = _prevctx
				p.PushNewRecursionContext(localctx, _startState, NparserRULE_expresion)
				p.SetState(720)

				if !(p.Precpred(p.GetParserRuleContext(), 27)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 27)", ""))
				}
				{
					p.SetState(721)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ExpresionContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(((_la-70)&-(0x1f+1)) == 0 && ((1<<uint((_la-70)))&((1<<(NparserMODULO-70))|(1<<(NparserMULTIPLICACION-70))|(1<<(NparserDIVISION-70)))) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ExpresionContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(722)

					var _x = p.expresion(28)

					localctx.(*ExpresionContext).op_der = _x
					localctx.(*ExpresionContext)._expresion = _x
				}

				fila := (func() int {
					if localctx.(*ExpresionContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).GetOp().GetLine()
					}
				}())
				columna := (func() int {
					if localctx.(*ExpresionContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).GetOp().GetColumn()
					}
				}())
				localctx.(*ExpresionContext).ex = expresiones.NewOperation(localctx.(*ExpresionContext).GetOp_izq().GetEx(), (func() string {
					if localctx.(*ExpresionContext).GetOp() == nil {
						return ""
					} else {
						return localctx.(*ExpresionContext).GetOp().GetText()
					}
				}()), localctx.(*ExpresionContext).GetOp_der().GetEx(), false, fila, columna)

			case 2:
				localctx = NewExpresionContext(p, _parentctx, _parentState)
				localctx.(*ExpresionContext).op_izq = _prevctx
				p.PushNewRecursionContext(localctx, _startState, NparserRULE_expresion)
				p.SetState(725)

				if !(p.Precpred(p.GetParserRuleContext(), 26)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 26)", ""))
				}
				{
					p.SetState(726)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ExpresionContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == NparserRESTA || _la == NparserSUMA) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ExpresionContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(727)

					var _x = p.expresion(27)

					localctx.(*ExpresionContext).op_der = _x
					localctx.(*ExpresionContext)._expresion = _x
				}

				fila := (func() int {
					if localctx.(*ExpresionContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).GetOp().GetLine()
					}
				}())
				columna := (func() int {
					if localctx.(*ExpresionContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).GetOp().GetColumn()
					}
				}())
				localctx.(*ExpresionContext).ex = expresiones.NewOperation(localctx.(*ExpresionContext).GetOp_izq().GetEx(), (func() string {
					if localctx.(*ExpresionContext).GetOp() == nil {
						return ""
					} else {
						return localctx.(*ExpresionContext).GetOp().GetText()
					}
				}()), localctx.(*ExpresionContext).GetOp_der().GetEx(), false, fila, columna)

			case 3:
				localctx = NewExpresionContext(p, _parentctx, _parentState)
				localctx.(*ExpresionContext).op_izq = _prevctx
				p.PushNewRecursionContext(localctx, _startState, NparserRULE_expresion)
				p.SetState(730)

				if !(p.Precpred(p.GetParserRuleContext(), 25)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 25)", ""))
				}
				{
					p.SetState(731)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ExpresionContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(((_la-62)&-(0x1f+1)) == 0 && ((1<<uint((_la-62)))&((1<<(NparserMAYOR_I-62))|(1<<(NparserMAYOR-62))|(1<<(NparserMENOR_I-62))|(1<<(NparserMENOR-62))|(1<<(NparserIGUALDAD-62))|(1<<(NparserDISTINTO-62)))) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ExpresionContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(732)

					var _x = p.expresion(26)

					localctx.(*ExpresionContext).op_der = _x
					localctx.(*ExpresionContext)._expresion = _x
				}

				fila := (func() int {
					if localctx.(*ExpresionContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).GetOp().GetLine()
					}
				}())
				columna := (func() int {
					if localctx.(*ExpresionContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).GetOp().GetColumn()
					}
				}())
				localctx.(*ExpresionContext).ex = expresiones.NewOperation(localctx.(*ExpresionContext).GetOp_izq().GetEx(), (func() string {
					if localctx.(*ExpresionContext).GetOp() == nil {
						return ""
					} else {
						return localctx.(*ExpresionContext).GetOp().GetText()
					}
				}()), localctx.(*ExpresionContext).GetOp_der().GetEx(), false, fila, columna)

			case 4:
				localctx = NewExpresionContext(p, _parentctx, _parentState)
				localctx.(*ExpresionContext).op_izq = _prevctx
				p.PushNewRecursionContext(localctx, _startState, NparserRULE_expresion)
				p.SetState(735)

				if !(p.Precpred(p.GetParserRuleContext(), 24)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 24)", ""))
				}
				{
					p.SetState(736)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ExpresionContext).op = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == NparserIGUALDAD || _la == NparserDISTINTO) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ExpresionContext).op = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(737)

					var _x = p.expresion(25)

					localctx.(*ExpresionContext).op_der = _x
					localctx.(*ExpresionContext)._expresion = _x
				}

				fila := (func() int {
					if localctx.(*ExpresionContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).GetOp().GetLine()
					}
				}())
				columna := (func() int {
					if localctx.(*ExpresionContext).GetOp() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).GetOp().GetColumn()
					}
				}())
				localctx.(*ExpresionContext).ex = expresiones.NewOperation(localctx.(*ExpresionContext).GetOp_izq().GetEx(), (func() string {
					if localctx.(*ExpresionContext).GetOp() == nil {
						return ""
					} else {
						return localctx.(*ExpresionContext).GetOp().GetText()
					}
				}()), localctx.(*ExpresionContext).GetOp_der().GetEx(), false, fila, columna)

			case 5:
				localctx = NewExpresionContext(p, _parentctx, _parentState)
				localctx.(*ExpresionContext).op_izq = _prevctx
				p.PushNewRecursionContext(localctx, _startState, NparserRULE_expresion)
				p.SetState(740)

				if !(p.Precpred(p.GetParserRuleContext(), 23)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 23)", ""))
				}
				{
					p.SetState(741)

					var _m = p.Match(NparserAND)

					localctx.(*ExpresionContext)._AND = _m
				}
				{
					p.SetState(742)

					var _x = p.expresion(24)

					localctx.(*ExpresionContext).op_der = _x
					localctx.(*ExpresionContext)._expresion = _x
				}

				fila := (func() int {
					if localctx.(*ExpresionContext).Get_AND() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_AND().GetLine()
					}
				}())
				columna := (func() int {
					if localctx.(*ExpresionContext).Get_AND() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_AND().GetColumn()
					}
				}())
				localctx.(*ExpresionContext).ex = expresiones.NewOperation(localctx.(*ExpresionContext).GetOp_izq().GetEx(), (func() string {
					if localctx.(*ExpresionContext).Get_AND() == nil {
						return ""
					} else {
						return localctx.(*ExpresionContext).Get_AND().GetText()
					}
				}()), localctx.(*ExpresionContext).GetOp_der().GetEx(), false, fila, columna)

			case 6:
				localctx = NewExpresionContext(p, _parentctx, _parentState)
				localctx.(*ExpresionContext).op_izq = _prevctx
				p.PushNewRecursionContext(localctx, _startState, NparserRULE_expresion)
				p.SetState(745)

				if !(p.Precpred(p.GetParserRuleContext(), 22)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 22)", ""))
				}
				{
					p.SetState(746)

					var _m = p.Match(NparserOR)

					localctx.(*ExpresionContext)._OR = _m
				}
				{
					p.SetState(747)

					var _x = p.expresion(23)

					localctx.(*ExpresionContext).op_der = _x
					localctx.(*ExpresionContext)._expresion = _x
				}

				fila := (func() int {
					if localctx.(*ExpresionContext).Get_OR() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_OR().GetLine()
					}
				}())
				columna := (func() int {
					if localctx.(*ExpresionContext).Get_OR() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_OR().GetColumn()
					}
				}())
				localctx.(*ExpresionContext).ex = expresiones.NewOperation(localctx.(*ExpresionContext).GetOp_izq().GetEx(), (func() string {
					if localctx.(*ExpresionContext).Get_OR() == nil {
						return ""
					} else {
						return localctx.(*ExpresionContext).Get_OR().GetText()
					}
				}()), localctx.(*ExpresionContext).GetOp_der().GetEx(), false, fila, columna)

			case 7:
				localctx = NewExpresionContext(p, _parentctx, _parentState)
				localctx.(*ExpresionContext).e = _prevctx
				p.PushNewRecursionContext(localctx, _startState, NparserRULE_expresion)
				p.SetState(750)

				if !(p.Precpred(p.GetParserRuleContext(), 30)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 30)", ""))
				}
				{
					p.SetState(751)

					var _m = p.Match(NparserPUNTO)

					localctx.(*ExpresionContext)._PUNTO = _m
				}
				{
					p.SetState(752)
					p.Match(NparserTO_STRING)
				}
				{
					p.SetState(753)

					var _m = p.Match(NparserPAR_IZQ)

					localctx.(*ExpresionContext)._PAR_IZQ = _m
				}
				{
					p.SetState(754)
					p.Match(NparserPAR_DER)
				}

				fila := (func() int {
					if localctx.(*ExpresionContext).Get_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_PUNTO().GetLine()
					}
				}())
				columna := (func() int {
					if localctx.(*ExpresionContext).Get_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_PUNTO().GetColumn()
					}
				}()) - 1
				localctx.(*ExpresionContext).ex = fn_primitivas.NewToString(Ast.LLAMADA_FUNCION, localctx.(*ExpresionContext).GetE().GetEx(), fila, columna)

			case 8:
				localctx = NewExpresionContext(p, _parentctx, _parentState)
				localctx.(*ExpresionContext).e = _prevctx
				p.PushNewRecursionContext(localctx, _startState, NparserRULE_expresion)
				p.SetState(756)

				if !(p.Precpred(p.GetParserRuleContext(), 29)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 29)", ""))
				}
				{
					p.SetState(757)

					var _m = p.Match(NparserPUNTO)

					localctx.(*ExpresionContext)._PUNTO = _m
				}
				{
					p.SetState(758)
					p.Match(NparserSQRT)
				}
				{
					p.SetState(759)

					var _m = p.Match(NparserPAR_IZQ)

					localctx.(*ExpresionContext)._PAR_IZQ = _m
				}
				{
					p.SetState(760)
					p.Match(NparserPAR_DER)
				}

				fila := (func() int {
					if localctx.(*ExpresionContext).Get_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_PUNTO().GetLine()
					}
				}())
				columna := (func() int {
					if localctx.(*ExpresionContext).Get_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_PUNTO().GetColumn()
					}
				}()) - 1
				localctx.(*ExpresionContext).ex = fn_primitivas.NewSqrt(Ast.LLAMADA_FUNCION, localctx.(*ExpresionContext).GetE().GetEx(), fila, columna)

			case 9:
				localctx = NewExpresionContext(p, _parentctx, _parentState)
				localctx.(*ExpresionContext).e = _prevctx
				p.PushNewRecursionContext(localctx, _startState, NparserRULE_expresion)
				p.SetState(762)

				if !(p.Precpred(p.GetParserRuleContext(), 28)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 28)", ""))
				}
				{
					p.SetState(763)

					var _m = p.Match(NparserPUNTO)

					localctx.(*ExpresionContext)._PUNTO = _m
				}
				{
					p.SetState(764)
					p.Match(NparserABS)
				}
				{
					p.SetState(765)

					var _m = p.Match(NparserPAR_IZQ)

					localctx.(*ExpresionContext)._PAR_IZQ = _m
				}
				{
					p.SetState(766)
					p.Match(NparserPAR_DER)
				}

				fila := (func() int {
					if localctx.(*ExpresionContext).Get_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_PUNTO().GetLine()
					}
				}())
				columna := (func() int {
					if localctx.(*ExpresionContext).Get_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_PUNTO().GetColumn()
					}
				}()) - 1
				localctx.(*ExpresionContext).ex = fn_primitivas.NewAbs(Ast.LLAMADA_FUNCION, localctx.(*ExpresionContext).GetE().GetEx(), fila, columna)

			case 10:
				localctx = NewExpresionContext(p, _parentctx, _parentState)
				localctx.(*ExpresionContext).obj = _prevctx
				p.PushNewRecursionContext(localctx, _startState, NparserRULE_expresion)
				p.SetState(768)

				if !(p.Precpred(p.GetParserRuleContext(), 13)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 13)", ""))
				}
				{
					p.SetState(769)

					var _m = p.Match(NparserPUNTO)

					localctx.(*ExpresionContext)._PUNTO = _m
				}
				{
					p.SetState(770)

					var _m = p.Match(NparserID)

					localctx.(*ExpresionContext).atributo = _m
				}

				filaS := (func() int {
					if localctx.(*ExpresionContext).Get_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_PUNTO().GetLine()
					}
				}())
				columnaS := (func() int {
					if localctx.(*ExpresionContext).Get_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_PUNTO().GetColumn()
					}
				}()) - 1
				filaA := (func() int {
					if localctx.(*ExpresionContext).GetAtributo() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).GetAtributo().GetLine()
					}
				}())
				columnaA := (func() int {
					if localctx.(*ExpresionContext).GetAtributo() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).GetAtributo().GetColumn()
					}
				}()) - 1
				idAtributo := expresiones.NewIdentificador((func() string {
					if localctx.(*ExpresionContext).GetAtributo() == nil {
						return ""
					} else {
						return localctx.(*ExpresionContext).GetAtributo().GetText()
					}
				}()), Ast.IDENTIFICADOR, filaA, columnaA)
				fmt.Println(idAtributo)
				localctx.(*ExpresionContext).ex = simbolos.NewAccesoStruct(localctx.(*ExpresionContext).GetObj().GetEx(), idAtributo, filaS, columnaS)

			case 11:
				localctx = NewExpresionContext(p, _parentctx, _parentState)
				localctx.(*ExpresionContext).id = _prevctx
				p.PushNewRecursionContext(localctx, _startState, NparserRULE_expresion)
				p.SetState(772)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
				}
				{
					p.SetState(773)

					var _x = p.dimension_acceso_array(0)

					localctx.(*ExpresionContext).lista = _x
				}

				elemento := localctx.(*ExpresionContext).GetId().GetEx()
				fila := elemento.(Ast.Abstracto).GetFila()
				columna := elemento.(Ast.Abstracto).GetColumna() - 1
				localctx.(*ExpresionContext).ex = fn_array.NewAccesoArray(localctx.(*ExpresionContext).GetId().GetEx(), localctx.(*ExpresionContext).GetLista().GetList(), fila, columna)

			case 12:
				localctx = NewExpresionContext(p, _parentctx, _parentState)
				localctx.(*ExpresionContext).id = _prevctx
				p.PushNewRecursionContext(localctx, _startState, NparserRULE_expresion)
				p.SetState(776)

				if !(p.Precpred(p.GetParserRuleContext(), 11)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 11)", ""))
				}
				{
					p.SetState(777)

					var _m = p.Match(NparserPUNTO)

					localctx.(*ExpresionContext)._PUNTO = _m
				}
				{
					p.SetState(778)
					p.Match(NparserLEN)
				}
				{
					p.SetState(779)

					var _m = p.Match(NparserPAR_IZQ)

					localctx.(*ExpresionContext)._PAR_IZQ = _m
				}
				{
					p.SetState(780)
					p.Match(NparserPAR_DER)
				}

				fila := (func() int {
					if localctx.(*ExpresionContext).Get_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_PUNTO().GetLine()
					}
				}())
				columna := (func() int {
					if localctx.(*ExpresionContext).Get_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_PUNTO().GetColumn()
					}
				}())
				localctx.(*ExpresionContext).ex = fn_vectores.NewLenVec(localctx.(*ExpresionContext).GetId().GetEx(), Ast.VEC_PUSH, fila, columna)

			case 13:
				localctx = NewExpresionContext(p, _parentctx, _parentState)
				localctx.(*ExpresionContext).id = _prevctx
				p.PushNewRecursionContext(localctx, _startState, NparserRULE_expresion)
				p.SetState(782)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
				}
				{
					p.SetState(783)

					var _m = p.Match(NparserPUNTO)

					localctx.(*ExpresionContext)._PUNTO = _m
				}
				{
					p.SetState(784)
					p.Match(NparserCAPACITY)
				}
				{
					p.SetState(785)

					var _m = p.Match(NparserPAR_IZQ)

					localctx.(*ExpresionContext)._PAR_IZQ = _m
				}
				{
					p.SetState(786)
					p.Match(NparserPAR_DER)
				}

				fila := (func() int {
					if localctx.(*ExpresionContext).Get_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_PUNTO().GetLine()
					}
				}())
				columna := (func() int {
					if localctx.(*ExpresionContext).Get_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_PUNTO().GetColumn()
					}
				}())
				localctx.(*ExpresionContext).ex = fn_vectores.NewCapacityVec(localctx.(*ExpresionContext).GetId().GetEx(), Ast.VEC_CAPACITY, fila, columna)

			case 14:
				localctx = NewExpresionContext(p, _parentctx, _parentState)
				localctx.(*ExpresionContext).id = _prevctx
				p.PushNewRecursionContext(localctx, _startState, NparserRULE_expresion)
				p.SetState(788)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
				}
				{
					p.SetState(789)

					var _m = p.Match(NparserPUNTO)

					localctx.(*ExpresionContext)._PUNTO = _m
				}
				{
					p.SetState(790)
					p.Match(NparserCONTAINS)
				}
				{
					p.SetState(791)

					var _m = p.Match(NparserPAR_IZQ)

					localctx.(*ExpresionContext)._PAR_IZQ = _m
				}
				{
					p.SetState(792)
					p.Match(NparserAMPERSAND)
				}
				{
					p.SetState(793)

					var _x = p.expresion(0)

					localctx.(*ExpresionContext).exp = _x
					localctx.(*ExpresionContext)._expresion = _x
				}
				{
					p.SetState(794)
					p.Match(NparserPAR_DER)
				}

				fila := (func() int {
					if localctx.(*ExpresionContext).Get_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_PUNTO().GetLine()
					}
				}())
				columna := (func() int {
					if localctx.(*ExpresionContext).Get_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_PUNTO().GetColumn()
					}
				}())
				localctx.(*ExpresionContext).ex = fn_vectores.NewContainsVec(localctx.(*ExpresionContext).GetId().GetEx(), localctx.(*ExpresionContext).GetExp().GetEx(), Ast.VEC_CONTAINS, fila, columna)

			case 15:
				localctx = NewExpresionContext(p, _parentctx, _parentState)
				localctx.(*ExpresionContext).id = _prevctx
				p.PushNewRecursionContext(localctx, _startState, NparserRULE_expresion)
				p.SetState(797)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
				}
				{
					p.SetState(798)

					var _m = p.Match(NparserPUNTO)

					localctx.(*ExpresionContext)._PUNTO = _m
				}
				{
					p.SetState(799)
					p.Match(NparserREMOVE)
				}
				{
					p.SetState(800)

					var _m = p.Match(NparserPAR_IZQ)

					localctx.(*ExpresionContext)._PAR_IZQ = _m
				}
				{
					p.SetState(801)

					var _x = p.expresion(0)

					localctx.(*ExpresionContext).index = _x
					localctx.(*ExpresionContext)._expresion = _x
				}
				{
					p.SetState(802)
					p.Match(NparserPAR_DER)
				}

				fila := (func() int {
					if localctx.(*ExpresionContext).Get_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_PUNTO().GetLine()
					}
				}())
				columna := (func() int {
					if localctx.(*ExpresionContext).Get_PUNTO() == nil {
						return 0
					} else {
						return localctx.(*ExpresionContext).Get_PUNTO().GetColumn()
					}
				}())
				localctx.(*ExpresionContext).ex = fn_vectores.NewRemoveVec(localctx.(*ExpresionContext).GetId().GetEx(), localctx.(*ExpresionContext).GetIndex().GetEx(), Ast.VEC_REMOVE, fila, columna)

			}

		}
		p.SetState(809)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 21, p.GetParserRuleContext())
	}

	return localctx
}

// ITipo_datoContext is an interface to support dynamic dispatch.
type ITipo_datoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetEx returns the ex attribute.
	GetEx() Ast.TipoDato

	// SetEx sets the ex attribute.
	SetEx(Ast.TipoDato)

	// IsTipo_datoContext differentiates from other interfaces.
	IsTipo_datoContext()
}

type Tipo_datoContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	ex     Ast.TipoDato
}

func NewEmptyTipo_datoContext() *Tipo_datoContext {
	var p = new(Tipo_datoContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_tipo_dato
	return p
}

func (*Tipo_datoContext) IsTipo_datoContext() {}

func NewTipo_datoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tipo_datoContext {
	var p = new(Tipo_datoContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_tipo_dato

	return p
}

func (s *Tipo_datoContext) GetParser() antlr.Parser { return s.parser }

func (s *Tipo_datoContext) GetEx() Ast.TipoDato { return s.ex }

func (s *Tipo_datoContext) SetEx(v Ast.TipoDato) { s.ex = v }

func (s *Tipo_datoContext) BOOL() antlr.TerminalNode {
	return s.GetToken(NparserBOOL, 0)
}

func (s *Tipo_datoContext) CHAR() antlr.TerminalNode {
	return s.GetToken(NparserCHAR, 0)
}

func (s *Tipo_datoContext) I64() antlr.TerminalNode {
	return s.GetToken(NparserI64, 0)
}

func (s *Tipo_datoContext) F64() antlr.TerminalNode {
	return s.GetToken(NparserF64, 0)
}

func (s *Tipo_datoContext) STR() antlr.TerminalNode {
	return s.GetToken(NparserSTR, 0)
}

func (s *Tipo_datoContext) STRING() antlr.TerminalNode {
	return s.GetToken(NparserSTRING, 0)
}

func (s *Tipo_datoContext) USIZE() antlr.TerminalNode {
	return s.GetToken(NparserUSIZE, 0)
}

func (s *Tipo_datoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tipo_datoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tipo_datoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterTipo_dato(s)
	}
}

func (s *Tipo_datoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitTipo_dato(s)
	}
}

func (p *Nparser) Tipo_dato() (localctx ITipo_datoContext) {
	this := p
	_ = this

	localctx = NewTipo_datoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, NparserRULE_tipo_dato)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(824)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case NparserBOOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(810)
			p.Match(NparserBOOL)
		}
		localctx.(*Tipo_datoContext).ex = Ast.BOOLEAN

	case NparserCHAR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(812)
			p.Match(NparserCHAR)
		}
		localctx.(*Tipo_datoContext).ex = Ast.CHAR

	case NparserI64:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(814)
			p.Match(NparserI64)
		}
		localctx.(*Tipo_datoContext).ex = Ast.I64

	case NparserF64:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(816)
			p.Match(NparserF64)
		}
		localctx.(*Tipo_datoContext).ex = Ast.F64

	case NparserSTR:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(818)
			p.Match(NparserSTR)
		}
		localctx.(*Tipo_datoContext).ex = Ast.STR

	case NparserSTRING:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(820)
			p.Match(NparserSTRING)
		}
		localctx.(*Tipo_datoContext).ex = Ast.STRING

	case NparserUSIZE:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(822)
			p.Match(NparserUSIZE)
		}
		localctx.(*Tipo_datoContext).ex = Ast.USIZE

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IControl_ifContext is an interface to support dynamic dispatch.
type IControl_ifContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_IF returns the _IF token.
	Get_IF() antlr.Token

	// Set_IF sets the _IF token.
	Set_IF(antlr.Token)

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// GetBloqueIf returns the bloqueIf rule contexts.
	GetBloqueIf() IBloqueContext

	// GetBloqueElse returns the bloqueElse rule contexts.
	GetBloqueElse() IBloqueContext

	// Get_bloque_else_if returns the _bloque_else_if rule contexts.
	Get_bloque_else_if() IBloque_else_ifContext

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// SetBloqueIf sets the bloqueIf rule contexts.
	SetBloqueIf(IBloqueContext)

	// SetBloqueElse sets the bloqueElse rule contexts.
	SetBloqueElse(IBloqueContext)

	// Set_bloque_else_if sets the _bloque_else_if rule contexts.
	Set_bloque_else_if(IBloque_else_ifContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsControl_ifContext differentiates from other interfaces.
	IsControl_ifContext()
}

type Control_ifContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	ex              Ast.Instruccion
	_IF             antlr.Token
	_expresion      IExpresionContext
	bloqueIf        IBloqueContext
	bloqueElse      IBloqueContext
	_bloque_else_if IBloque_else_ifContext
}

func NewEmptyControl_ifContext() *Control_ifContext {
	var p = new(Control_ifContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_control_if
	return p
}

func (*Control_ifContext) IsControl_ifContext() {}

func NewControl_ifContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Control_ifContext {
	var p = new(Control_ifContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_control_if

	return p
}

func (s *Control_ifContext) GetParser() antlr.Parser { return s.parser }

func (s *Control_ifContext) Get_IF() antlr.Token { return s._IF }

func (s *Control_ifContext) Set_IF(v antlr.Token) { s._IF = v }

func (s *Control_ifContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *Control_ifContext) GetBloqueIf() IBloqueContext { return s.bloqueIf }

func (s *Control_ifContext) GetBloqueElse() IBloqueContext { return s.bloqueElse }

func (s *Control_ifContext) Get_bloque_else_if() IBloque_else_ifContext { return s._bloque_else_if }

func (s *Control_ifContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *Control_ifContext) SetBloqueIf(v IBloqueContext) { s.bloqueIf = v }

func (s *Control_ifContext) SetBloqueElse(v IBloqueContext) { s.bloqueElse = v }

func (s *Control_ifContext) Set_bloque_else_if(v IBloque_else_ifContext) { s._bloque_else_if = v }

func (s *Control_ifContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Control_ifContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Control_ifContext) IF() antlr.TerminalNode {
	return s.GetToken(NparserIF, 0)
}

func (s *Control_ifContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Control_ifContext) AllBloque() []IBloqueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBloqueContext)(nil)).Elem())
	var tst = make([]IBloqueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBloqueContext)
		}
	}

	return tst
}

func (s *Control_ifContext) Bloque(i int) IBloqueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloqueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBloqueContext)
}

func (s *Control_ifContext) ELSE() antlr.TerminalNode {
	return s.GetToken(NparserELSE, 0)
}

func (s *Control_ifContext) Bloque_else_if() IBloque_else_ifContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloque_else_ifContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloque_else_ifContext)
}

func (s *Control_ifContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Control_ifContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Control_ifContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterControl_if(s)
	}
}

func (s *Control_ifContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitControl_if(s)
	}
}

func (p *Nparser) Control_if() (localctx IControl_ifContext) {
	this := p
	_ = this

	localctx = NewControl_ifContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, NparserRULE_control_if)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(852)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 23, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(826)

			var _m = p.Match(NparserIF)

			localctx.(*Control_ifContext)._IF = _m
		}
		{
			p.SetState(827)

			var _x = p.expresion(0)

			localctx.(*Control_ifContext)._expresion = _x
		}
		{
			p.SetState(828)

			var _x = p.Bloque()

			localctx.(*Control_ifContext).bloqueIf = _x
		}

		fila := (func() int {
			if localctx.(*Control_ifContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_ifContext).Get_IF().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Control_ifContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_ifContext).Get_IF().GetColumn()
			}
		}())
		columna++
		lista_null := arraylist.New()
		localctx.(*Control_ifContext).ex = exp_ins.NewIF(localctx.(*Control_ifContext).Get_expresion().GetEx(), localctx.(*Control_ifContext).GetBloqueIf().GetList(), lista_null, Ast.IF, fila, columna, false)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(831)

			var _m = p.Match(NparserIF)

			localctx.(*Control_ifContext)._IF = _m
		}
		{
			p.SetState(832)

			var _x = p.expresion(0)

			localctx.(*Control_ifContext)._expresion = _x
		}
		{
			p.SetState(833)

			var _x = p.Bloque()

			localctx.(*Control_ifContext).bloqueIf = _x
		}
		{
			p.SetState(834)
			p.Match(NparserELSE)
		}
		{
			p.SetState(835)

			var _x = p.Bloque()

			localctx.(*Control_ifContext).bloqueElse = _x
		}

		fila := (func() int {
			if localctx.(*Control_ifContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_ifContext).Get_IF().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Control_ifContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_ifContext).Get_IF().GetColumn()
			}
		}())
		columna++
		lista_entonces := arraylist.New()
		lista_null := arraylist.New()
		Else := exp_ins.NewIF(localctx.(*Control_ifContext).Get_expresion().GetEx(), localctx.(*Control_ifContext).GetBloqueElse().GetList(), lista_null, Ast.ELSE, fila, columna, false)
		lista_entonces.Add(Else)
		localctx.(*Control_ifContext).ex = exp_ins.NewIF(localctx.(*Control_ifContext).Get_expresion().GetEx(), localctx.(*Control_ifContext).GetBloqueIf().GetList(), lista_entonces, Ast.IF, fila, columna, false)

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(838)

			var _m = p.Match(NparserIF)

			localctx.(*Control_ifContext)._IF = _m
		}
		{
			p.SetState(839)

			var _x = p.expresion(0)

			localctx.(*Control_ifContext)._expresion = _x
		}
		{
			p.SetState(840)

			var _x = p.Bloque()

			localctx.(*Control_ifContext).bloqueIf = _x
		}
		{
			p.SetState(841)

			var _x = p.Bloque_else_if()

			localctx.(*Control_ifContext)._bloque_else_if = _x
		}

		fila := (func() int {
			if localctx.(*Control_ifContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_ifContext).Get_IF().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Control_ifContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_ifContext).Get_IF().GetColumn()
			}
		}())
		columna++
		lista_entonces := localctx.(*Control_ifContext).Get_bloque_else_if().GetList()
		localctx.(*Control_ifContext).ex = exp_ins.NewIF(localctx.(*Control_ifContext).Get_expresion().GetEx(), localctx.(*Control_ifContext).GetBloqueIf().GetList(), lista_entonces, Ast.IF, fila, columna, false)

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(844)

			var _m = p.Match(NparserIF)

			localctx.(*Control_ifContext)._IF = _m
		}
		{
			p.SetState(845)

			var _x = p.expresion(0)

			localctx.(*Control_ifContext)._expresion = _x
		}
		{
			p.SetState(846)

			var _x = p.Bloque()

			localctx.(*Control_ifContext).bloqueIf = _x
		}
		{
			p.SetState(847)

			var _x = p.Bloque_else_if()

			localctx.(*Control_ifContext)._bloque_else_if = _x
		}
		{
			p.SetState(848)
			p.Match(NparserELSE)
		}
		{
			p.SetState(849)

			var _x = p.Bloque()

			localctx.(*Control_ifContext).bloqueElse = _x
		}

		fila := (func() int {
			if localctx.(*Control_ifContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_ifContext).Get_IF().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Control_ifContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_ifContext).Get_IF().GetColumn()
			}
		}())
		columna++
		lista_null := arraylist.New()
		Else := exp_ins.NewIF(localctx.(*Control_ifContext).Get_expresion().GetEx(), localctx.(*Control_ifContext).GetBloqueElse().GetList(), lista_null, Ast.ELSE, fila, columna, false)
		lista_entonces := localctx.(*Control_ifContext).Get_bloque_else_if().GetList()
		lista_entonces.Add(Else)
		localctx.(*Control_ifContext).ex = exp_ins.NewIF(localctx.(*Control_ifContext).Get_expresion().GetEx(), localctx.(*Control_ifContext).GetBloqueIf().GetList(), lista_entonces, Ast.IF, fila, columna, false)

	}

	return localctx
}

// IBloque_else_ifContext is an interface to support dynamic dispatch.
type IBloque_else_ifContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_else_if returns the _else_if rule contexts.
	Get_else_if() IElse_ifContext

	// Set_else_if sets the _else_if rule contexts.
	Set_else_if(IElse_ifContext)

	// GetLista returns the lista rule context list.
	GetLista() []IElse_ifContext

	// SetLista sets the lista rule context list.
	SetLista([]IElse_ifContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsBloque_else_ifContext differentiates from other interfaces.
	IsBloque_else_ifContext()
}

type Bloque_else_ifContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	list     *arraylist.List
	_else_if IElse_ifContext
	lista    []IElse_ifContext
}

func NewEmptyBloque_else_ifContext() *Bloque_else_ifContext {
	var p = new(Bloque_else_ifContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_bloque_else_if
	return p
}

func (*Bloque_else_ifContext) IsBloque_else_ifContext() {}

func NewBloque_else_ifContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bloque_else_ifContext {
	var p = new(Bloque_else_ifContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_bloque_else_if

	return p
}

func (s *Bloque_else_ifContext) GetParser() antlr.Parser { return s.parser }

func (s *Bloque_else_ifContext) Get_else_if() IElse_ifContext { return s._else_if }

func (s *Bloque_else_ifContext) Set_else_if(v IElse_ifContext) { s._else_if = v }

func (s *Bloque_else_ifContext) GetLista() []IElse_ifContext { return s.lista }

func (s *Bloque_else_ifContext) SetLista(v []IElse_ifContext) { s.lista = v }

func (s *Bloque_else_ifContext) GetList() *arraylist.List { return s.list }

func (s *Bloque_else_ifContext) SetList(v *arraylist.List) { s.list = v }

func (s *Bloque_else_ifContext) AllElse_if() []IElse_ifContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IElse_ifContext)(nil)).Elem())
	var tst = make([]IElse_ifContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IElse_ifContext)
		}
	}

	return tst
}

func (s *Bloque_else_ifContext) Else_if(i int) IElse_ifContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElse_ifContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IElse_ifContext)
}

func (s *Bloque_else_ifContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bloque_else_ifContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bloque_else_ifContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterBloque_else_if(s)
	}
}

func (s *Bloque_else_ifContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitBloque_else_if(s)
	}
}

func (p *Nparser) Bloque_else_if() (localctx IBloque_else_ifContext) {
	this := p
	_ = this

	localctx = NewBloque_else_ifContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, NparserRULE_bloque_else_if)
	localctx.(*Bloque_else_ifContext).list = arraylist.New()

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(855)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(854)

				var _x = p.Else_if()

				localctx.(*Bloque_else_ifContext)._else_if = _x
			}
			localctx.(*Bloque_else_ifContext).lista = append(localctx.(*Bloque_else_ifContext).lista, localctx.(*Bloque_else_ifContext)._else_if)

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(857)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 24, p.GetParserRuleContext())
	}

	listas := localctx.(*Bloque_else_ifContext).GetLista()
	for _, e := range listas {
		localctx.(*Bloque_else_ifContext).list.Add(e.GetEx())
	}

	return localctx
}

// IElse_ifContext is an interface to support dynamic dispatch.
type IElse_ifContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ELSE returns the _ELSE token.
	Get_ELSE() antlr.Token

	// Set_ELSE sets the _ELSE token.
	Set_ELSE(antlr.Token)

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// GetBloquec returns the bloquec rule contexts.
	GetBloquec() IBloqueContext

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// SetBloquec sets the bloquec rule contexts.
	SetBloquec(IBloqueContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsElse_ifContext differentiates from other interfaces.
	IsElse_ifContext()
}

type Else_ifContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	ex         Ast.Instruccion
	_ELSE      antlr.Token
	_expresion IExpresionContext
	bloquec    IBloqueContext
}

func NewEmptyElse_ifContext() *Else_ifContext {
	var p = new(Else_ifContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_else_if
	return p
}

func (*Else_ifContext) IsElse_ifContext() {}

func NewElse_ifContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Else_ifContext {
	var p = new(Else_ifContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_else_if

	return p
}

func (s *Else_ifContext) GetParser() antlr.Parser { return s.parser }

func (s *Else_ifContext) Get_ELSE() antlr.Token { return s._ELSE }

func (s *Else_ifContext) Set_ELSE(v antlr.Token) { s._ELSE = v }

func (s *Else_ifContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *Else_ifContext) GetBloquec() IBloqueContext { return s.bloquec }

func (s *Else_ifContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *Else_ifContext) SetBloquec(v IBloqueContext) { s.bloquec = v }

func (s *Else_ifContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Else_ifContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Else_ifContext) ELSE() antlr.TerminalNode {
	return s.GetToken(NparserELSE, 0)
}

func (s *Else_ifContext) IF() antlr.TerminalNode {
	return s.GetToken(NparserIF, 0)
}

func (s *Else_ifContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Else_ifContext) Bloque() IBloqueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloqueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloqueContext)
}

func (s *Else_ifContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Else_ifContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Else_ifContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterElse_if(s)
	}
}

func (s *Else_ifContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitElse_if(s)
	}
}

func (p *Nparser) Else_if() (localctx IElse_ifContext) {
	this := p
	_ = this

	localctx = NewElse_ifContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, NparserRULE_else_if)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(861)

		var _m = p.Match(NparserELSE)

		localctx.(*Else_ifContext)._ELSE = _m
	}
	{
		p.SetState(862)
		p.Match(NparserIF)
	}
	{
		p.SetState(863)

		var _x = p.expresion(0)

		localctx.(*Else_ifContext)._expresion = _x
	}
	{
		p.SetState(864)

		var _x = p.Bloque()

		localctx.(*Else_ifContext).bloquec = _x
	}

	fila := (func() int {
		if localctx.(*Else_ifContext).Get_ELSE() == nil {
			return 0
		} else {
			return localctx.(*Else_ifContext).Get_ELSE().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*Else_ifContext).Get_ELSE() == nil {
			return 0
		} else {
			return localctx.(*Else_ifContext).Get_ELSE().GetColumn()
		}
	}())
	columna++
	lista_null := arraylist.New()
	localctx.(*Else_ifContext).ex = exp_ins.NewIF(localctx.(*Else_ifContext).Get_expresion().GetEx(), localctx.(*Else_ifContext).GetBloquec().GetList(), lista_null, Ast.ELSEIF, fila, columna, false)

	return localctx
}

// IControl_if_expContext is an interface to support dynamic dispatch.
type IControl_if_expContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_IF returns the _IF token.
	Get_IF() antlr.Token

	// Set_IF sets the _IF token.
	Set_IF(antlr.Token)

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// GetBloqueIf returns the bloqueIf rule contexts.
	GetBloqueIf() IBloque_controlContext

	// GetBloqueElse returns the bloqueElse rule contexts.
	GetBloqueElse() IBloque_controlContext

	// Get_bloque_else_if_exp returns the _bloque_else_if_exp rule contexts.
	Get_bloque_else_if_exp() IBloque_else_if_expContext

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// SetBloqueIf sets the bloqueIf rule contexts.
	SetBloqueIf(IBloque_controlContext)

	// SetBloqueElse sets the bloqueElse rule contexts.
	SetBloqueElse(IBloque_controlContext)

	// Set_bloque_else_if_exp sets the _bloque_else_if_exp rule contexts.
	Set_bloque_else_if_exp(IBloque_else_if_expContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsControl_if_expContext differentiates from other interfaces.
	IsControl_if_expContext()
}

type Control_if_expContext struct {
	*antlr.BaseParserRuleContext
	parser              antlr.Parser
	ex                  Ast.Instruccion
	_IF                 antlr.Token
	_expresion          IExpresionContext
	bloqueIf            IBloque_controlContext
	bloqueElse          IBloque_controlContext
	_bloque_else_if_exp IBloque_else_if_expContext
}

func NewEmptyControl_if_expContext() *Control_if_expContext {
	var p = new(Control_if_expContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_control_if_exp
	return p
}

func (*Control_if_expContext) IsControl_if_expContext() {}

func NewControl_if_expContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Control_if_expContext {
	var p = new(Control_if_expContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_control_if_exp

	return p
}

func (s *Control_if_expContext) GetParser() antlr.Parser { return s.parser }

func (s *Control_if_expContext) Get_IF() antlr.Token { return s._IF }

func (s *Control_if_expContext) Set_IF(v antlr.Token) { s._IF = v }

func (s *Control_if_expContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *Control_if_expContext) GetBloqueIf() IBloque_controlContext { return s.bloqueIf }

func (s *Control_if_expContext) GetBloqueElse() IBloque_controlContext { return s.bloqueElse }

func (s *Control_if_expContext) Get_bloque_else_if_exp() IBloque_else_if_expContext {
	return s._bloque_else_if_exp
}

func (s *Control_if_expContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *Control_if_expContext) SetBloqueIf(v IBloque_controlContext) { s.bloqueIf = v }

func (s *Control_if_expContext) SetBloqueElse(v IBloque_controlContext) { s.bloqueElse = v }

func (s *Control_if_expContext) Set_bloque_else_if_exp(v IBloque_else_if_expContext) {
	s._bloque_else_if_exp = v
}

func (s *Control_if_expContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Control_if_expContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Control_if_expContext) IF() antlr.TerminalNode {
	return s.GetToken(NparserIF, 0)
}

func (s *Control_if_expContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Control_if_expContext) AllBloque_control() []IBloque_controlContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBloque_controlContext)(nil)).Elem())
	var tst = make([]IBloque_controlContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBloque_controlContext)
		}
	}

	return tst
}

func (s *Control_if_expContext) Bloque_control(i int) IBloque_controlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloque_controlContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBloque_controlContext)
}

func (s *Control_if_expContext) ELSE() antlr.TerminalNode {
	return s.GetToken(NparserELSE, 0)
}

func (s *Control_if_expContext) Bloque_else_if_exp() IBloque_else_if_expContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloque_else_if_expContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloque_else_if_expContext)
}

func (s *Control_if_expContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Control_if_expContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Control_if_expContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterControl_if_exp(s)
	}
}

func (s *Control_if_expContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitControl_if_exp(s)
	}
}

func (p *Nparser) Control_if_exp() (localctx IControl_if_expContext) {
	this := p
	_ = this

	localctx = NewControl_if_expContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, NparserRULE_control_if_exp)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(893)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 25, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(867)

			var _m = p.Match(NparserIF)

			localctx.(*Control_if_expContext)._IF = _m
		}
		{
			p.SetState(868)

			var _x = p.expresion(0)

			localctx.(*Control_if_expContext)._expresion = _x
		}
		{
			p.SetState(869)

			var _x = p.Bloque_control()

			localctx.(*Control_if_expContext).bloqueIf = _x
		}

		fila := (func() int {
			if localctx.(*Control_if_expContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_if_expContext).Get_IF().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Control_if_expContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_if_expContext).Get_IF().GetColumn()
			}
		}())
		columna++
		lista_null := arraylist.New()
		localctx.(*Control_if_expContext).ex = exp_ins.NewIF(localctx.(*Control_if_expContext).Get_expresion().GetEx(), localctx.(*Control_if_expContext).GetBloqueIf().GetList(), lista_null, Ast.IF_EXPRESION, fila, columna, true)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(872)

			var _m = p.Match(NparserIF)

			localctx.(*Control_if_expContext)._IF = _m
		}
		{
			p.SetState(873)

			var _x = p.expresion(0)

			localctx.(*Control_if_expContext)._expresion = _x
		}
		{
			p.SetState(874)

			var _x = p.Bloque_control()

			localctx.(*Control_if_expContext).bloqueIf = _x
		}
		{
			p.SetState(875)
			p.Match(NparserELSE)
		}
		{
			p.SetState(876)

			var _x = p.Bloque_control()

			localctx.(*Control_if_expContext).bloqueElse = _x
		}

		fila := (func() int {
			if localctx.(*Control_if_expContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_if_expContext).Get_IF().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Control_if_expContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_if_expContext).Get_IF().GetColumn()
			}
		}())
		columna++
		lista_entonces := arraylist.New()
		lista_null := arraylist.New()
		Else := exp_ins.NewIF(localctx.(*Control_if_expContext).Get_expresion().GetEx(), localctx.(*Control_if_expContext).GetBloqueElse().GetList(), lista_null, Ast.ELSE_EXPRESION, fila, columna, true)
		lista_entonces.Add(Else)
		localctx.(*Control_if_expContext).ex = exp_ins.NewIF(localctx.(*Control_if_expContext).Get_expresion().GetEx(), localctx.(*Control_if_expContext).GetBloqueIf().GetList(), lista_entonces, Ast.IF_EXPRESION, fila, columna, true)

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(879)

			var _m = p.Match(NparserIF)

			localctx.(*Control_if_expContext)._IF = _m
		}
		{
			p.SetState(880)

			var _x = p.expresion(0)

			localctx.(*Control_if_expContext)._expresion = _x
		}
		{
			p.SetState(881)

			var _x = p.Bloque_control()

			localctx.(*Control_if_expContext).bloqueIf = _x
		}
		{
			p.SetState(882)

			var _x = p.Bloque_else_if_exp()

			localctx.(*Control_if_expContext)._bloque_else_if_exp = _x
		}

		fila := (func() int {
			if localctx.(*Control_if_expContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_if_expContext).Get_IF().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Control_if_expContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_if_expContext).Get_IF().GetColumn()
			}
		}())
		columna++
		lista_entonces := localctx.(*Control_if_expContext).Get_bloque_else_if_exp().GetList()
		localctx.(*Control_if_expContext).ex = exp_ins.NewIF(localctx.(*Control_if_expContext).Get_expresion().GetEx(), localctx.(*Control_if_expContext).GetBloqueIf().GetList(), lista_entonces, Ast.IF_EXPRESION, fila, columna, true)

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(885)

			var _m = p.Match(NparserIF)

			localctx.(*Control_if_expContext)._IF = _m
		}
		{
			p.SetState(886)

			var _x = p.expresion(0)

			localctx.(*Control_if_expContext)._expresion = _x
		}
		{
			p.SetState(887)

			var _x = p.Bloque_control()

			localctx.(*Control_if_expContext).bloqueIf = _x
		}
		{
			p.SetState(888)

			var _x = p.Bloque_else_if_exp()

			localctx.(*Control_if_expContext)._bloque_else_if_exp = _x
		}
		{
			p.SetState(889)
			p.Match(NparserELSE)
		}
		{
			p.SetState(890)

			var _x = p.Bloque_control()

			localctx.(*Control_if_expContext).bloqueElse = _x
		}

		fila := (func() int {
			if localctx.(*Control_if_expContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_if_expContext).Get_IF().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Control_if_expContext).Get_IF() == nil {
				return 0
			} else {
				return localctx.(*Control_if_expContext).Get_IF().GetColumn()
			}
		}())
		columna++
		lista_null := arraylist.New()
		Else := exp_ins.NewIF(localctx.(*Control_if_expContext).Get_expresion().GetEx(), localctx.(*Control_if_expContext).GetBloqueElse().GetList(), lista_null, Ast.ELSE_EXPRESION, fila, columna, true)
		lista_entonces := localctx.(*Control_if_expContext).Get_bloque_else_if_exp().GetList()
		lista_entonces.Add(Else)
		localctx.(*Control_if_expContext).ex = exp_ins.NewIF(localctx.(*Control_if_expContext).Get_expresion().GetEx(), localctx.(*Control_if_expContext).GetBloqueIf().GetList(), lista_entonces, Ast.IF_EXPRESION, fila, columna, true)

	}

	return localctx
}

// IBloque_else_if_expContext is an interface to support dynamic dispatch.
type IBloque_else_if_expContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_else_if_exp returns the _else_if_exp rule contexts.
	Get_else_if_exp() IElse_if_expContext

	// Set_else_if_exp sets the _else_if_exp rule contexts.
	Set_else_if_exp(IElse_if_expContext)

	// GetLista returns the lista rule context list.
	GetLista() []IElse_if_expContext

	// SetLista sets the lista rule context list.
	SetLista([]IElse_if_expContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsBloque_else_if_expContext differentiates from other interfaces.
	IsBloque_else_if_expContext()
}

type Bloque_else_if_expContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	list         *arraylist.List
	_else_if_exp IElse_if_expContext
	lista        []IElse_if_expContext
}

func NewEmptyBloque_else_if_expContext() *Bloque_else_if_expContext {
	var p = new(Bloque_else_if_expContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_bloque_else_if_exp
	return p
}

func (*Bloque_else_if_expContext) IsBloque_else_if_expContext() {}

func NewBloque_else_if_expContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bloque_else_if_expContext {
	var p = new(Bloque_else_if_expContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_bloque_else_if_exp

	return p
}

func (s *Bloque_else_if_expContext) GetParser() antlr.Parser { return s.parser }

func (s *Bloque_else_if_expContext) Get_else_if_exp() IElse_if_expContext { return s._else_if_exp }

func (s *Bloque_else_if_expContext) Set_else_if_exp(v IElse_if_expContext) { s._else_if_exp = v }

func (s *Bloque_else_if_expContext) GetLista() []IElse_if_expContext { return s.lista }

func (s *Bloque_else_if_expContext) SetLista(v []IElse_if_expContext) { s.lista = v }

func (s *Bloque_else_if_expContext) GetList() *arraylist.List { return s.list }

func (s *Bloque_else_if_expContext) SetList(v *arraylist.List) { s.list = v }

func (s *Bloque_else_if_expContext) AllElse_if_exp() []IElse_if_expContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IElse_if_expContext)(nil)).Elem())
	var tst = make([]IElse_if_expContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IElse_if_expContext)
		}
	}

	return tst
}

func (s *Bloque_else_if_expContext) Else_if_exp(i int) IElse_if_expContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElse_if_expContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IElse_if_expContext)
}

func (s *Bloque_else_if_expContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bloque_else_if_expContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bloque_else_if_expContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterBloque_else_if_exp(s)
	}
}

func (s *Bloque_else_if_expContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitBloque_else_if_exp(s)
	}
}

func (p *Nparser) Bloque_else_if_exp() (localctx IBloque_else_if_expContext) {
	this := p
	_ = this

	localctx = NewBloque_else_if_expContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, NparserRULE_bloque_else_if_exp)
	localctx.(*Bloque_else_if_expContext).list = arraylist.New()

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(896)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(895)

				var _x = p.Else_if_exp()

				localctx.(*Bloque_else_if_expContext)._else_if_exp = _x
			}
			localctx.(*Bloque_else_if_expContext).lista = append(localctx.(*Bloque_else_if_expContext).lista, localctx.(*Bloque_else_if_expContext)._else_if_exp)

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(898)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 26, p.GetParserRuleContext())
	}

	listas := localctx.(*Bloque_else_if_expContext).GetLista()
	for _, e := range listas {
		localctx.(*Bloque_else_if_expContext).list.Add(e.GetEx())
	}

	return localctx
}

// IElse_if_expContext is an interface to support dynamic dispatch.
type IElse_if_expContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ELSE returns the _ELSE token.
	Get_ELSE() antlr.Token

	// Set_ELSE sets the _ELSE token.
	Set_ELSE(antlr.Token)

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// GetBloquec returns the bloquec rule contexts.
	GetBloquec() IBloque_controlContext

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// SetBloquec sets the bloquec rule contexts.
	SetBloquec(IBloque_controlContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsElse_if_expContext differentiates from other interfaces.
	IsElse_if_expContext()
}

type Else_if_expContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	ex         Ast.Instruccion
	_ELSE      antlr.Token
	_expresion IExpresionContext
	bloquec    IBloque_controlContext
}

func NewEmptyElse_if_expContext() *Else_if_expContext {
	var p = new(Else_if_expContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_else_if_exp
	return p
}

func (*Else_if_expContext) IsElse_if_expContext() {}

func NewElse_if_expContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Else_if_expContext {
	var p = new(Else_if_expContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_else_if_exp

	return p
}

func (s *Else_if_expContext) GetParser() antlr.Parser { return s.parser }

func (s *Else_if_expContext) Get_ELSE() antlr.Token { return s._ELSE }

func (s *Else_if_expContext) Set_ELSE(v antlr.Token) { s._ELSE = v }

func (s *Else_if_expContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *Else_if_expContext) GetBloquec() IBloque_controlContext { return s.bloquec }

func (s *Else_if_expContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *Else_if_expContext) SetBloquec(v IBloque_controlContext) { s.bloquec = v }

func (s *Else_if_expContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Else_if_expContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Else_if_expContext) ELSE() antlr.TerminalNode {
	return s.GetToken(NparserELSE, 0)
}

func (s *Else_if_expContext) IF() antlr.TerminalNode {
	return s.GetToken(NparserIF, 0)
}

func (s *Else_if_expContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Else_if_expContext) Bloque_control() IBloque_controlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloque_controlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloque_controlContext)
}

func (s *Else_if_expContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Else_if_expContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Else_if_expContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterElse_if_exp(s)
	}
}

func (s *Else_if_expContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitElse_if_exp(s)
	}
}

func (p *Nparser) Else_if_exp() (localctx IElse_if_expContext) {
	this := p
	_ = this

	localctx = NewElse_if_expContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, NparserRULE_else_if_exp)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(902)

		var _m = p.Match(NparserELSE)

		localctx.(*Else_if_expContext)._ELSE = _m
	}
	{
		p.SetState(903)
		p.Match(NparserIF)
	}
	{
		p.SetState(904)

		var _x = p.expresion(0)

		localctx.(*Else_if_expContext)._expresion = _x
	}
	{
		p.SetState(905)

		var _x = p.Bloque_control()

		localctx.(*Else_if_expContext).bloquec = _x
	}

	fila := (func() int {
		if localctx.(*Else_if_expContext).Get_ELSE() == nil {
			return 0
		} else {
			return localctx.(*Else_if_expContext).Get_ELSE().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*Else_if_expContext).Get_ELSE() == nil {
			return 0
		} else {
			return localctx.(*Else_if_expContext).Get_ELSE().GetColumn()
		}
	}())
	columna++
	lista_null := arraylist.New()
	localctx.(*Else_if_expContext).ex = exp_ins.NewIF(localctx.(*Else_if_expContext).Get_expresion().GetEx(), localctx.(*Else_if_expContext).GetBloquec().GetList(), lista_null, Ast.ELSEIF_EXPRESION, fila, columna, true)

	return localctx
}

// IControl_expresionContext is an interface to support dynamic dispatch.
type IControl_expresionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_control_if_exp returns the _control_if_exp rule contexts.
	Get_control_if_exp() IControl_if_expContext

	// Get_control_match_exp returns the _control_match_exp rule contexts.
	Get_control_match_exp() IControl_match_expContext

	// Get_control_loop_exp returns the _control_loop_exp rule contexts.
	Get_control_loop_exp() IControl_loop_expContext

	// Set_control_if_exp sets the _control_if_exp rule contexts.
	Set_control_if_exp(IControl_if_expContext)

	// Set_control_match_exp sets the _control_match_exp rule contexts.
	Set_control_match_exp(IControl_match_expContext)

	// Set_control_loop_exp sets the _control_loop_exp rule contexts.
	Set_control_loop_exp(IControl_loop_expContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsControl_expresionContext differentiates from other interfaces.
	IsControl_expresionContext()
}

type Control_expresionContext struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	ex                 Ast.Instruccion
	_control_if_exp    IControl_if_expContext
	_control_match_exp IControl_match_expContext
	_control_loop_exp  IControl_loop_expContext
}

func NewEmptyControl_expresionContext() *Control_expresionContext {
	var p = new(Control_expresionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_control_expresion
	return p
}

func (*Control_expresionContext) IsControl_expresionContext() {}

func NewControl_expresionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Control_expresionContext {
	var p = new(Control_expresionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_control_expresion

	return p
}

func (s *Control_expresionContext) GetParser() antlr.Parser { return s.parser }

func (s *Control_expresionContext) Get_control_if_exp() IControl_if_expContext {
	return s._control_if_exp
}

func (s *Control_expresionContext) Get_control_match_exp() IControl_match_expContext {
	return s._control_match_exp
}

func (s *Control_expresionContext) Get_control_loop_exp() IControl_loop_expContext {
	return s._control_loop_exp
}

func (s *Control_expresionContext) Set_control_if_exp(v IControl_if_expContext) {
	s._control_if_exp = v
}

func (s *Control_expresionContext) Set_control_match_exp(v IControl_match_expContext) {
	s._control_match_exp = v
}

func (s *Control_expresionContext) Set_control_loop_exp(v IControl_loop_expContext) {
	s._control_loop_exp = v
}

func (s *Control_expresionContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Control_expresionContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Control_expresionContext) Control_if_exp() IControl_if_expContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_if_expContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_if_expContext)
}

func (s *Control_expresionContext) Control_match_exp() IControl_match_expContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_match_expContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_match_expContext)
}

func (s *Control_expresionContext) Control_loop_exp() IControl_loop_expContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_loop_expContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_loop_expContext)
}

func (s *Control_expresionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Control_expresionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Control_expresionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterControl_expresion(s)
	}
}

func (s *Control_expresionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitControl_expresion(s)
	}
}

func (p *Nparser) Control_expresion() (localctx IControl_expresionContext) {
	this := p
	_ = this

	localctx = NewControl_expresionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, NparserRULE_control_expresion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(917)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case NparserIF:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(908)

			var _x = p.Control_if_exp()

			localctx.(*Control_expresionContext)._control_if_exp = _x
		}
		localctx.(*Control_expresionContext).ex = localctx.(*Control_expresionContext).Get_control_if_exp().GetEx()

	case NparserMATCH:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(911)

			var _x = p.Control_match_exp()

			localctx.(*Control_expresionContext)._control_match_exp = _x
		}
		localctx.(*Control_expresionContext).ex = localctx.(*Control_expresionContext).Get_control_match_exp().GetEx()

	case NparserLOOP:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(914)

			var _x = p.Control_loop_exp()

			localctx.(*Control_expresionContext)._control_loop_exp = _x
		}
		localctx.(*Control_expresionContext).ex = localctx.(*Control_expresionContext).Get_control_loop_exp().GetEx()

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IControl_matchContext is an interface to support dynamic dispatch.
type IControl_matchContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_MATCH returns the _MATCH token.
	Get_MATCH() antlr.Token

	// Set_MATCH sets the _MATCH token.
	Set_MATCH(antlr.Token)

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// Get_control_case returns the _control_case rule contexts.
	Get_control_case() IControl_caseContext

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// Set_control_case sets the _control_case rule contexts.
	Set_control_case(IControl_caseContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsControl_matchContext differentiates from other interfaces.
	IsControl_matchContext()
}

type Control_matchContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	ex            Ast.Instruccion
	_MATCH        antlr.Token
	_expresion    IExpresionContext
	_control_case IControl_caseContext
}

func NewEmptyControl_matchContext() *Control_matchContext {
	var p = new(Control_matchContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_control_match
	return p
}

func (*Control_matchContext) IsControl_matchContext() {}

func NewControl_matchContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Control_matchContext {
	var p = new(Control_matchContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_control_match

	return p
}

func (s *Control_matchContext) GetParser() antlr.Parser { return s.parser }

func (s *Control_matchContext) Get_MATCH() antlr.Token { return s._MATCH }

func (s *Control_matchContext) Set_MATCH(v antlr.Token) { s._MATCH = v }

func (s *Control_matchContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *Control_matchContext) Get_control_case() IControl_caseContext { return s._control_case }

func (s *Control_matchContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *Control_matchContext) Set_control_case(v IControl_caseContext) { s._control_case = v }

func (s *Control_matchContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Control_matchContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Control_matchContext) MATCH() antlr.TerminalNode {
	return s.GetToken(NparserMATCH, 0)
}

func (s *Control_matchContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Control_matchContext) LLAVE_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserLLAVE_IZQ, 0)
}

func (s *Control_matchContext) Control_case() IControl_caseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_caseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_caseContext)
}

func (s *Control_matchContext) LLAVE_DER() antlr.TerminalNode {
	return s.GetToken(NparserLLAVE_DER, 0)
}

func (s *Control_matchContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Control_matchContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Control_matchContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterControl_match(s)
	}
}

func (s *Control_matchContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitControl_match(s)
	}
}

func (p *Nparser) Control_match() (localctx IControl_matchContext) {
	this := p
	_ = this

	localctx = NewControl_matchContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, NparserRULE_control_match)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(919)

		var _m = p.Match(NparserMATCH)

		localctx.(*Control_matchContext)._MATCH = _m
	}
	{
		p.SetState(920)

		var _x = p.expresion(0)

		localctx.(*Control_matchContext)._expresion = _x
	}
	{
		p.SetState(921)
		p.Match(NparserLLAVE_IZQ)
	}
	{
		p.SetState(922)

		var _x = p.Control_case()

		localctx.(*Control_matchContext)._control_case = _x
	}
	{
		p.SetState(923)
		p.Match(NparserLLAVE_DER)
	}

	fila := (func() int {
		if localctx.(*Control_matchContext).Get_MATCH() == nil {
			return 0
		} else {
			return localctx.(*Control_matchContext).Get_MATCH().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*Control_matchContext).Get_MATCH() == nil {
			return 0
		} else {
			return localctx.(*Control_matchContext).Get_MATCH().GetLine()
		}
	}()) - 1
	localctx.(*Control_matchContext).ex = exp_ins.NewMatch(localctx.(*Control_matchContext).Get_expresion().GetEx(), localctx.(*Control_matchContext).Get_control_case().GetList(), Ast.MATCH, fila, columna)

	return localctx
}

// IControl_caseContext is an interface to support dynamic dispatch.
type IControl_caseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_cases returns the _cases rule contexts.
	Get_cases() ICasesContext

	// Set_cases sets the _cases rule contexts.
	Set_cases(ICasesContext)

	// GetLista returns the lista rule context list.
	GetLista() []ICasesContext

	// SetLista sets the lista rule context list.
	SetLista([]ICasesContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsControl_caseContext differentiates from other interfaces.
	IsControl_caseContext()
}

type Control_caseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	list   *arraylist.List
	_cases ICasesContext
	lista  []ICasesContext
}

func NewEmptyControl_caseContext() *Control_caseContext {
	var p = new(Control_caseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_control_case
	return p
}

func (*Control_caseContext) IsControl_caseContext() {}

func NewControl_caseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Control_caseContext {
	var p = new(Control_caseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_control_case

	return p
}

func (s *Control_caseContext) GetParser() antlr.Parser { return s.parser }

func (s *Control_caseContext) Get_cases() ICasesContext { return s._cases }

func (s *Control_caseContext) Set_cases(v ICasesContext) { s._cases = v }

func (s *Control_caseContext) GetLista() []ICasesContext { return s.lista }

func (s *Control_caseContext) SetLista(v []ICasesContext) { s.lista = v }

func (s *Control_caseContext) GetList() *arraylist.List { return s.list }

func (s *Control_caseContext) SetList(v *arraylist.List) { s.list = v }

func (s *Control_caseContext) AllCases() []ICasesContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICasesContext)(nil)).Elem())
	var tst = make([]ICasesContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICasesContext)
		}
	}

	return tst
}

func (s *Control_caseContext) Cases(i int) ICasesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICasesContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICasesContext)
}

func (s *Control_caseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Control_caseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Control_caseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterControl_case(s)
	}
}

func (s *Control_caseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitControl_case(s)
	}
}

func (p *Nparser) Control_case() (localctx IControl_caseContext) {
	this := p
	_ = this

	localctx = NewControl_caseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, NparserRULE_control_case)
	localctx.(*Control_caseContext).list = arraylist.New()
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(927)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<NparserBOOL)|(1<<NparserCHAR)|(1<<NparserF64)|(1<<NparserI64)|(1<<NparserSTR)|(1<<NparserSTRING)|(1<<NparserUSIZE)|(1<<NparserVEC)|(1<<NparserVEC_M)|(1<<NparserTRUE)|(1<<NparserFALSE))) != 0) || (((_la-46)&-(0x1f+1)) == 0 && ((1<<uint((_la-46)))&((1<<(NparserNUMERO-46))|(1<<(NparserDECIMAL-46))|(1<<(NparserID_CAMEL-46))|(1<<(NparserID-46))|(1<<(NparserDEFAULT-46))|(1<<(NparserRESTA-46))|(1<<(NparserNOT-46)))) != 0) || (((_la-78)&-(0x1f+1)) == 0 && ((1<<uint((_la-78)))&((1<<(NparserPAR_IZQ-78))|(1<<(NparserCORCHETE_IZQ-78))|(1<<(NparserCADENA-78))|(1<<(NparserCARACTER-78)))) != 0) {
		{
			p.SetState(926)

			var _x = p.Cases()

			localctx.(*Control_caseContext)._cases = _x
		}
		localctx.(*Control_caseContext).lista = append(localctx.(*Control_caseContext).lista, localctx.(*Control_caseContext)._cases)

		p.SetState(929)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	listas := localctx.(*Control_caseContext).GetLista()
	for _, e := range listas {
		localctx.(*Control_caseContext).list.Add(e.GetEx())
	}

	return localctx
}

// ICasesContext is an interface to support dynamic dispatch.
type ICasesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_CASE returns the _CASE token.
	Get_CASE() antlr.Token

	// Set_CASE sets the _CASE token.
	Set_CASE(antlr.Token)

	// Get_case_match returns the _case_match rule contexts.
	Get_case_match() ICase_matchContext

	// GetBloquec returns the bloquec rule contexts.
	GetBloquec() IBloqueContext

	// Set_case_match sets the _case_match rule contexts.
	Set_case_match(ICase_matchContext)

	// SetBloquec sets the bloquec rule contexts.
	SetBloquec(IBloqueContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsCasesContext differentiates from other interfaces.
	IsCasesContext()
}

type CasesContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	ex          Ast.Instruccion
	_case_match ICase_matchContext
	_CASE       antlr.Token
	bloquec     IBloqueContext
}

func NewEmptyCasesContext() *CasesContext {
	var p = new(CasesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_cases
	return p
}

func (*CasesContext) IsCasesContext() {}

func NewCasesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CasesContext {
	var p = new(CasesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_cases

	return p
}

func (s *CasesContext) GetParser() antlr.Parser { return s.parser }

func (s *CasesContext) Get_CASE() antlr.Token { return s._CASE }

func (s *CasesContext) Set_CASE(v antlr.Token) { s._CASE = v }

func (s *CasesContext) Get_case_match() ICase_matchContext { return s._case_match }

func (s *CasesContext) GetBloquec() IBloqueContext { return s.bloquec }

func (s *CasesContext) Set_case_match(v ICase_matchContext) { s._case_match = v }

func (s *CasesContext) SetBloquec(v IBloqueContext) { s.bloquec = v }

func (s *CasesContext) GetEx() Ast.Instruccion { return s.ex }

func (s *CasesContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *CasesContext) Case_match() ICase_matchContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICase_matchContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICase_matchContext)
}

func (s *CasesContext) CASE() antlr.TerminalNode {
	return s.GetToken(NparserCASE, 0)
}

func (s *CasesContext) COMA() antlr.TerminalNode {
	return s.GetToken(NparserCOMA, 0)
}

func (s *CasesContext) Bloque() IBloqueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloqueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloqueContext)
}

func (s *CasesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CasesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CasesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterCases(s)
	}
}

func (s *CasesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitCases(s)
	}
}

func (p *Nparser) Cases() (localctx ICasesContext) {
	this := p
	_ = this

	localctx = NewCasesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, NparserRULE_cases)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(933)

		var _x = p.case_match(0)

		localctx.(*CasesContext)._case_match = _x
	}
	{
		p.SetState(934)

		var _m = p.Match(NparserCASE)

		localctx.(*CasesContext)._CASE = _m
	}
	{
		p.SetState(935)

		var _x = p.Bloque()

		localctx.(*CasesContext).bloquec = _x
	}
	{
		p.SetState(936)
		p.Match(NparserCOMA)
	}

	fila := (func() int {
		if localctx.(*CasesContext).Get_CASE() == nil {
			return 0
		} else {
			return localctx.(*CasesContext).Get_CASE().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*CasesContext).Get_CASE() == nil {
			return 0
		} else {
			return localctx.(*CasesContext).Get_CASE().GetLine()
		}
	}()) - 1
	//Verificar si lo que vienen es un default
	listaTemp := localctx.(*CasesContext).Get_case_match().GetList()
	_, tipo := listaTemp.GetValue(0).(Ast.Abstracto).GetTipo()
	if tipo == Ast.DEFAULT {
		localctx.(*CasesContext).ex = exp_ins.NewCase(localctx.(*CasesContext).Get_case_match().GetList(), localctx.(*CasesContext).GetBloquec().GetList(), Ast.CASE, fila, columna, true)
	} else {
		localctx.(*CasesContext).ex = exp_ins.NewCase(localctx.(*CasesContext).Get_case_match().GetList(), localctx.(*CasesContext).GetBloquec().GetList(), Ast.CASE, fila, columna, false)
	}

	return localctx
}

// ICase_matchContext is an interface to support dynamic dispatch.
type ICase_matchContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_DEFAULT returns the _DEFAULT token.
	Get_DEFAULT() antlr.Token

	// Set_DEFAULT sets the _DEFAULT token.
	Set_DEFAULT(antlr.Token)

	// GetLista_cases returns the lista_cases rule contexts.
	GetLista_cases() ICase_matchContext

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// SetLista_cases sets the lista_cases rule contexts.
	SetLista_cases(ICase_matchContext)

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsCase_matchContext differentiates from other interfaces.
	IsCase_matchContext()
}

type Case_matchContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	list        *arraylist.List
	lista_cases ICase_matchContext
	_expresion  IExpresionContext
	_DEFAULT    antlr.Token
}

func NewEmptyCase_matchContext() *Case_matchContext {
	var p = new(Case_matchContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_case_match
	return p
}

func (*Case_matchContext) IsCase_matchContext() {}

func NewCase_matchContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Case_matchContext {
	var p = new(Case_matchContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_case_match

	return p
}

func (s *Case_matchContext) GetParser() antlr.Parser { return s.parser }

func (s *Case_matchContext) Get_DEFAULT() antlr.Token { return s._DEFAULT }

func (s *Case_matchContext) Set_DEFAULT(v antlr.Token) { s._DEFAULT = v }

func (s *Case_matchContext) GetLista_cases() ICase_matchContext { return s.lista_cases }

func (s *Case_matchContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *Case_matchContext) SetLista_cases(v ICase_matchContext) { s.lista_cases = v }

func (s *Case_matchContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *Case_matchContext) GetList() *arraylist.List { return s.list }

func (s *Case_matchContext) SetList(v *arraylist.List) { s.list = v }

func (s *Case_matchContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Case_matchContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(NparserDEFAULT, 0)
}

func (s *Case_matchContext) O() antlr.TerminalNode {
	return s.GetToken(NparserO, 0)
}

func (s *Case_matchContext) Case_match() ICase_matchContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICase_matchContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICase_matchContext)
}

func (s *Case_matchContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Case_matchContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Case_matchContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterCase_match(s)
	}
}

func (s *Case_matchContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitCase_match(s)
	}
}

func (p *Nparser) Case_match() (localctx ICase_matchContext) {
	return p.case_match(0)
}

func (p *Nparser) case_match(_p int) (localctx ICase_matchContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewCase_matchContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ICase_matchContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 72
	p.EnterRecursionRule(localctx, 72, NparserRULE_case_match, _p)
	localctx.(*Case_matchContext).list = arraylist.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(945)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case NparserBOOL, NparserCHAR, NparserF64, NparserI64, NparserSTR, NparserSTRING, NparserUSIZE, NparserVEC, NparserVEC_M, NparserTRUE, NparserFALSE, NparserNUMERO, NparserDECIMAL, NparserID_CAMEL, NparserID, NparserRESTA, NparserNOT, NparserPAR_IZQ, NparserCORCHETE_IZQ, NparserCADENA, NparserCARACTER:
		{
			p.SetState(940)

			var _x = p.expresion(0)

			localctx.(*Case_matchContext)._expresion = _x
		}

		localctx.(*Case_matchContext).list.Add(localctx.(*Case_matchContext).Get_expresion().GetEx())

	case NparserDEFAULT:
		{
			p.SetState(943)

			var _m = p.Match(NparserDEFAULT)

			localctx.(*Case_matchContext)._DEFAULT = _m
		}

		fila := (func() int {
			if localctx.(*Case_matchContext).Get_DEFAULT() == nil {
				return 0
			} else {
				return localctx.(*Case_matchContext).Get_DEFAULT().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Case_matchContext).Get_DEFAULT() == nil {
				return 0
			} else {
				return localctx.(*Case_matchContext).Get_DEFAULT().GetColumn()
			}
		}())
		expresion := expresiones.NewPrimitivo(false, Ast.DEFAULT, fila, columna)
		localctx.(*Case_matchContext).list.Add(expresion)

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(954)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 30, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewCase_matchContext(p, _parentctx, _parentState)
			localctx.(*Case_matchContext).lista_cases = _prevctx
			p.PushNewRecursionContext(localctx, _startState, NparserRULE_case_match)
			p.SetState(947)

			if !(p.Precpred(p.GetParserRuleContext(), 3)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
			}
			{
				p.SetState(948)
				p.Match(NparserO)
			}
			{
				p.SetState(949)

				var _x = p.expresion(0)

				localctx.(*Case_matchContext)._expresion = _x
			}

			localctx.(*Case_matchContext).GetLista_cases().GetList().Add(localctx.(*Case_matchContext).Get_expresion().GetEx())
			localctx.(*Case_matchContext).list = localctx.(*Case_matchContext).GetLista_cases().GetList()

		}
		p.SetState(956)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 30, p.GetParserRuleContext())
	}

	return localctx
}

// IControl_match_expContext is an interface to support dynamic dispatch.
type IControl_match_expContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_MATCH returns the _MATCH token.
	Get_MATCH() antlr.Token

	// Set_MATCH sets the _MATCH token.
	Set_MATCH(antlr.Token)

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// Get_control_case_exp returns the _control_case_exp rule contexts.
	Get_control_case_exp() IControl_case_expContext

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// Set_control_case_exp sets the _control_case_exp rule contexts.
	Set_control_case_exp(IControl_case_expContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsControl_match_expContext differentiates from other interfaces.
	IsControl_match_expContext()
}

type Control_match_expContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	ex                Ast.Instruccion
	_MATCH            antlr.Token
	_expresion        IExpresionContext
	_control_case_exp IControl_case_expContext
}

func NewEmptyControl_match_expContext() *Control_match_expContext {
	var p = new(Control_match_expContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_control_match_exp
	return p
}

func (*Control_match_expContext) IsControl_match_expContext() {}

func NewControl_match_expContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Control_match_expContext {
	var p = new(Control_match_expContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_control_match_exp

	return p
}

func (s *Control_match_expContext) GetParser() antlr.Parser { return s.parser }

func (s *Control_match_expContext) Get_MATCH() antlr.Token { return s._MATCH }

func (s *Control_match_expContext) Set_MATCH(v antlr.Token) { s._MATCH = v }

func (s *Control_match_expContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *Control_match_expContext) Get_control_case_exp() IControl_case_expContext {
	return s._control_case_exp
}

func (s *Control_match_expContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *Control_match_expContext) Set_control_case_exp(v IControl_case_expContext) {
	s._control_case_exp = v
}

func (s *Control_match_expContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Control_match_expContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Control_match_expContext) MATCH() antlr.TerminalNode {
	return s.GetToken(NparserMATCH, 0)
}

func (s *Control_match_expContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Control_match_expContext) LLAVE_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserLLAVE_IZQ, 0)
}

func (s *Control_match_expContext) Control_case_exp() IControl_case_expContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControl_case_expContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControl_case_expContext)
}

func (s *Control_match_expContext) LLAVE_DER() antlr.TerminalNode {
	return s.GetToken(NparserLLAVE_DER, 0)
}

func (s *Control_match_expContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Control_match_expContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Control_match_expContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterControl_match_exp(s)
	}
}

func (s *Control_match_expContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitControl_match_exp(s)
	}
}

func (p *Nparser) Control_match_exp() (localctx IControl_match_expContext) {
	this := p
	_ = this

	localctx = NewControl_match_expContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, NparserRULE_control_match_exp)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(957)

		var _m = p.Match(NparserMATCH)

		localctx.(*Control_match_expContext)._MATCH = _m
	}
	{
		p.SetState(958)

		var _x = p.expresion(0)

		localctx.(*Control_match_expContext)._expresion = _x
	}
	{
		p.SetState(959)
		p.Match(NparserLLAVE_IZQ)
	}
	{
		p.SetState(960)

		var _x = p.Control_case_exp()

		localctx.(*Control_match_expContext)._control_case_exp = _x
	}
	{
		p.SetState(961)
		p.Match(NparserLLAVE_DER)
	}

	fila := (func() int {
		if localctx.(*Control_match_expContext).Get_MATCH() == nil {
			return 0
		} else {
			return localctx.(*Control_match_expContext).Get_MATCH().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*Control_match_expContext).Get_MATCH() == nil {
			return 0
		} else {
			return localctx.(*Control_match_expContext).Get_MATCH().GetLine()
		}
	}()) - 1
	localctx.(*Control_match_expContext).ex = exp_ins.NewMatch(localctx.(*Control_match_expContext).Get_expresion().GetEx(), localctx.(*Control_match_expContext).Get_control_case_exp().GetList(), Ast.MATCH_EXPRESION, fila, columna)

	return localctx
}

// IControl_case_expContext is an interface to support dynamic dispatch.
type IControl_case_expContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_cases_exp returns the _cases_exp rule contexts.
	Get_cases_exp() ICases_expContext

	// Set_cases_exp sets the _cases_exp rule contexts.
	Set_cases_exp(ICases_expContext)

	// GetLista returns the lista rule context list.
	GetLista() []ICases_expContext

	// SetLista sets the lista rule context list.
	SetLista([]ICases_expContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsControl_case_expContext differentiates from other interfaces.
	IsControl_case_expContext()
}

type Control_case_expContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	list       *arraylist.List
	_cases_exp ICases_expContext
	lista      []ICases_expContext
}

func NewEmptyControl_case_expContext() *Control_case_expContext {
	var p = new(Control_case_expContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_control_case_exp
	return p
}

func (*Control_case_expContext) IsControl_case_expContext() {}

func NewControl_case_expContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Control_case_expContext {
	var p = new(Control_case_expContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_control_case_exp

	return p
}

func (s *Control_case_expContext) GetParser() antlr.Parser { return s.parser }

func (s *Control_case_expContext) Get_cases_exp() ICases_expContext { return s._cases_exp }

func (s *Control_case_expContext) Set_cases_exp(v ICases_expContext) { s._cases_exp = v }

func (s *Control_case_expContext) GetLista() []ICases_expContext { return s.lista }

func (s *Control_case_expContext) SetLista(v []ICases_expContext) { s.lista = v }

func (s *Control_case_expContext) GetList() *arraylist.List { return s.list }

func (s *Control_case_expContext) SetList(v *arraylist.List) { s.list = v }

func (s *Control_case_expContext) AllCases_exp() []ICases_expContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICases_expContext)(nil)).Elem())
	var tst = make([]ICases_expContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICases_expContext)
		}
	}

	return tst
}

func (s *Control_case_expContext) Cases_exp(i int) ICases_expContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICases_expContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICases_expContext)
}

func (s *Control_case_expContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Control_case_expContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Control_case_expContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterControl_case_exp(s)
	}
}

func (s *Control_case_expContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitControl_case_exp(s)
	}
}

func (p *Nparser) Control_case_exp() (localctx IControl_case_expContext) {
	this := p
	_ = this

	localctx = NewControl_case_expContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, NparserRULE_control_case_exp)
	localctx.(*Control_case_expContext).list = arraylist.New()
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(965)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<NparserBOOL)|(1<<NparserCHAR)|(1<<NparserF64)|(1<<NparserI64)|(1<<NparserSTR)|(1<<NparserSTRING)|(1<<NparserUSIZE)|(1<<NparserVEC)|(1<<NparserVEC_M)|(1<<NparserTRUE)|(1<<NparserFALSE))) != 0) || (((_la-46)&-(0x1f+1)) == 0 && ((1<<uint((_la-46)))&((1<<(NparserNUMERO-46))|(1<<(NparserDECIMAL-46))|(1<<(NparserID_CAMEL-46))|(1<<(NparserID-46))|(1<<(NparserDEFAULT-46))|(1<<(NparserRESTA-46))|(1<<(NparserNOT-46)))) != 0) || (((_la-78)&-(0x1f+1)) == 0 && ((1<<uint((_la-78)))&((1<<(NparserPAR_IZQ-78))|(1<<(NparserCORCHETE_IZQ-78))|(1<<(NparserCADENA-78))|(1<<(NparserCARACTER-78)))) != 0) {
		{
			p.SetState(964)

			var _x = p.Cases_exp()

			localctx.(*Control_case_expContext)._cases_exp = _x
		}
		localctx.(*Control_case_expContext).lista = append(localctx.(*Control_case_expContext).lista, localctx.(*Control_case_expContext)._cases_exp)

		p.SetState(967)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	listas := localctx.(*Control_case_expContext).GetLista()
	for _, e := range listas {
		localctx.(*Control_case_expContext).list.Add(e.GetEx())
	}

	return localctx
}

// ICases_expContext is an interface to support dynamic dispatch.
type ICases_expContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_CASE returns the _CASE token.
	Get_CASE() antlr.Token

	// Set_CASE sets the _CASE token.
	Set_CASE(antlr.Token)

	// Get_case_match_exp returns the _case_match_exp rule contexts.
	Get_case_match_exp() ICase_match_expContext

	// GetBloquec returns the bloquec rule contexts.
	GetBloquec() IBloque_controlContext

	// Set_case_match_exp sets the _case_match_exp rule contexts.
	Set_case_match_exp(ICase_match_expContext)

	// SetBloquec sets the bloquec rule contexts.
	SetBloquec(IBloque_controlContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsCases_expContext differentiates from other interfaces.
	IsCases_expContext()
}

type Cases_expContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	ex              Ast.Instruccion
	_case_match_exp ICase_match_expContext
	_CASE           antlr.Token
	bloquec         IBloque_controlContext
}

func NewEmptyCases_expContext() *Cases_expContext {
	var p = new(Cases_expContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_cases_exp
	return p
}

func (*Cases_expContext) IsCases_expContext() {}

func NewCases_expContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cases_expContext {
	var p = new(Cases_expContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_cases_exp

	return p
}

func (s *Cases_expContext) GetParser() antlr.Parser { return s.parser }

func (s *Cases_expContext) Get_CASE() antlr.Token { return s._CASE }

func (s *Cases_expContext) Set_CASE(v antlr.Token) { s._CASE = v }

func (s *Cases_expContext) Get_case_match_exp() ICase_match_expContext { return s._case_match_exp }

func (s *Cases_expContext) GetBloquec() IBloque_controlContext { return s.bloquec }

func (s *Cases_expContext) Set_case_match_exp(v ICase_match_expContext) { s._case_match_exp = v }

func (s *Cases_expContext) SetBloquec(v IBloque_controlContext) { s.bloquec = v }

func (s *Cases_expContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Cases_expContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Cases_expContext) Case_match_exp() ICase_match_expContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICase_match_expContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICase_match_expContext)
}

func (s *Cases_expContext) CASE() antlr.TerminalNode {
	return s.GetToken(NparserCASE, 0)
}

func (s *Cases_expContext) COMA() antlr.TerminalNode {
	return s.GetToken(NparserCOMA, 0)
}

func (s *Cases_expContext) Bloque_control() IBloque_controlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloque_controlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloque_controlContext)
}

func (s *Cases_expContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cases_expContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Cases_expContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterCases_exp(s)
	}
}

func (s *Cases_expContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitCases_exp(s)
	}
}

func (p *Nparser) Cases_exp() (localctx ICases_expContext) {
	this := p
	_ = this

	localctx = NewCases_expContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, NparserRULE_cases_exp)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(971)

		var _x = p.case_match_exp(0)

		localctx.(*Cases_expContext)._case_match_exp = _x
	}
	{
		p.SetState(972)

		var _m = p.Match(NparserCASE)

		localctx.(*Cases_expContext)._CASE = _m
	}
	{
		p.SetState(973)

		var _x = p.Bloque_control()

		localctx.(*Cases_expContext).bloquec = _x
	}
	{
		p.SetState(974)
		p.Match(NparserCOMA)
	}

	fila := (func() int {
		if localctx.(*Cases_expContext).Get_CASE() == nil {
			return 0
		} else {
			return localctx.(*Cases_expContext).Get_CASE().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*Cases_expContext).Get_CASE() == nil {
			return 0
		} else {
			return localctx.(*Cases_expContext).Get_CASE().GetLine()
		}
	}()) - 1
	//Verificar si lo que vienen es un default
	listaTemp := localctx.(*Cases_expContext).Get_case_match_exp().GetList()
	_, tipo := listaTemp.GetValue(0).(Ast.Abstracto).GetTipo()
	if tipo == Ast.DEFAULT {
		localctx.(*Cases_expContext).ex = exp_ins.NewCase(localctx.(*Cases_expContext).Get_case_match_exp().GetList(), localctx.(*Cases_expContext).GetBloquec().GetList(), Ast.CASE_EXPRESION, fila, columna, true)
	} else {
		localctx.(*Cases_expContext).ex = exp_ins.NewCase(localctx.(*Cases_expContext).Get_case_match_exp().GetList(), localctx.(*Cases_expContext).GetBloquec().GetList(), Ast.CASE_EXPRESION, fila, columna, false)
	}

	return localctx
}

// ICase_match_expContext is an interface to support dynamic dispatch.
type ICase_match_expContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_DEFAULT returns the _DEFAULT token.
	Get_DEFAULT() antlr.Token

	// Set_DEFAULT sets the _DEFAULT token.
	Set_DEFAULT(antlr.Token)

	// GetLista_cases returns the lista_cases rule contexts.
	GetLista_cases() ICase_match_expContext

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// SetLista_cases sets the lista_cases rule contexts.
	SetLista_cases(ICase_match_expContext)

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsCase_match_expContext differentiates from other interfaces.
	IsCase_match_expContext()
}

type Case_match_expContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	list        *arraylist.List
	lista_cases ICase_match_expContext
	_expresion  IExpresionContext
	_DEFAULT    antlr.Token
}

func NewEmptyCase_match_expContext() *Case_match_expContext {
	var p = new(Case_match_expContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_case_match_exp
	return p
}

func (*Case_match_expContext) IsCase_match_expContext() {}

func NewCase_match_expContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Case_match_expContext {
	var p = new(Case_match_expContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_case_match_exp

	return p
}

func (s *Case_match_expContext) GetParser() antlr.Parser { return s.parser }

func (s *Case_match_expContext) Get_DEFAULT() antlr.Token { return s._DEFAULT }

func (s *Case_match_expContext) Set_DEFAULT(v antlr.Token) { s._DEFAULT = v }

func (s *Case_match_expContext) GetLista_cases() ICase_match_expContext { return s.lista_cases }

func (s *Case_match_expContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *Case_match_expContext) SetLista_cases(v ICase_match_expContext) { s.lista_cases = v }

func (s *Case_match_expContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *Case_match_expContext) GetList() *arraylist.List { return s.list }

func (s *Case_match_expContext) SetList(v *arraylist.List) { s.list = v }

func (s *Case_match_expContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Case_match_expContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(NparserDEFAULT, 0)
}

func (s *Case_match_expContext) O() antlr.TerminalNode {
	return s.GetToken(NparserO, 0)
}

func (s *Case_match_expContext) Case_match_exp() ICase_match_expContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICase_match_expContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICase_match_expContext)
}

func (s *Case_match_expContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Case_match_expContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Case_match_expContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterCase_match_exp(s)
	}
}

func (s *Case_match_expContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitCase_match_exp(s)
	}
}

func (p *Nparser) Case_match_exp() (localctx ICase_match_expContext) {
	return p.case_match_exp(0)
}

func (p *Nparser) case_match_exp(_p int) (localctx ICase_match_expContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewCase_match_expContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ICase_match_expContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 80
	p.EnterRecursionRule(localctx, 80, NparserRULE_case_match_exp, _p)
	localctx.(*Case_match_expContext).list = arraylist.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(983)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case NparserBOOL, NparserCHAR, NparserF64, NparserI64, NparserSTR, NparserSTRING, NparserUSIZE, NparserVEC, NparserVEC_M, NparserTRUE, NparserFALSE, NparserNUMERO, NparserDECIMAL, NparserID_CAMEL, NparserID, NparserRESTA, NparserNOT, NparserPAR_IZQ, NparserCORCHETE_IZQ, NparserCADENA, NparserCARACTER:
		{
			p.SetState(978)

			var _x = p.expresion(0)

			localctx.(*Case_match_expContext)._expresion = _x
		}

		localctx.(*Case_match_expContext).list.Add(localctx.(*Case_match_expContext).Get_expresion().GetEx())

	case NparserDEFAULT:
		{
			p.SetState(981)

			var _m = p.Match(NparserDEFAULT)

			localctx.(*Case_match_expContext)._DEFAULT = _m
		}

		fila := (func() int {
			if localctx.(*Case_match_expContext).Get_DEFAULT() == nil {
				return 0
			} else {
				return localctx.(*Case_match_expContext).Get_DEFAULT().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Case_match_expContext).Get_DEFAULT() == nil {
				return 0
			} else {
				return localctx.(*Case_match_expContext).Get_DEFAULT().GetColumn()
			}
		}())
		expresion := expresiones.NewPrimitivo(false, Ast.DEFAULT, fila, columna)
		localctx.(*Case_match_expContext).list.Add(expresion)

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(992)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 33, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewCase_match_expContext(p, _parentctx, _parentState)
			localctx.(*Case_match_expContext).lista_cases = _prevctx
			p.PushNewRecursionContext(localctx, _startState, NparserRULE_case_match_exp)
			p.SetState(985)

			if !(p.Precpred(p.GetParserRuleContext(), 3)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
			}
			{
				p.SetState(986)
				p.Match(NparserO)
			}
			{
				p.SetState(987)

				var _x = p.expresion(0)

				localctx.(*Case_match_expContext)._expresion = _x
			}

			localctx.(*Case_match_expContext).GetLista_cases().GetList().Add(localctx.(*Case_match_expContext).Get_expresion().GetEx())
			localctx.(*Case_match_expContext).list = localctx.(*Case_match_expContext).GetLista_cases().GetList()

		}
		p.SetState(994)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 33, p.GetParserRuleContext())
	}

	return localctx
}

// IIreturnContext is an interface to support dynamic dispatch.
type IIreturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_RETURN returns the _RETURN token.
	Get_RETURN() antlr.Token

	// Set_RETURN sets the _RETURN token.
	Set_RETURN(antlr.Token)

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsIreturnContext differentiates from other interfaces.
	IsIreturnContext()
}

type IreturnContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	ex         Ast.Instruccion
	_RETURN    antlr.Token
	_expresion IExpresionContext
}

func NewEmptyIreturnContext() *IreturnContext {
	var p = new(IreturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_ireturn
	return p
}

func (*IreturnContext) IsIreturnContext() {}

func NewIreturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IreturnContext {
	var p = new(IreturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_ireturn

	return p
}

func (s *IreturnContext) GetParser() antlr.Parser { return s.parser }

func (s *IreturnContext) Get_RETURN() antlr.Token { return s._RETURN }

func (s *IreturnContext) Set_RETURN(v antlr.Token) { s._RETURN = v }

func (s *IreturnContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *IreturnContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *IreturnContext) GetEx() Ast.Instruccion { return s.ex }

func (s *IreturnContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *IreturnContext) RETURN() antlr.TerminalNode {
	return s.GetToken(NparserRETURN, 0)
}

func (s *IreturnContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *IreturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IreturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IreturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterIreturn(s)
	}
}

func (s *IreturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitIreturn(s)
	}
}

func (p *Nparser) Ireturn() (localctx IIreturnContext) {
	this := p
	_ = this

	localctx = NewIreturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, NparserRULE_ireturn)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1001)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 34, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(995)

			var _m = p.Match(NparserRETURN)

			localctx.(*IreturnContext)._RETURN = _m
		}

		fila := (func() int {
			if localctx.(*IreturnContext).Get_RETURN() == nil {
				return 0
			} else {
				return localctx.(*IreturnContext).Get_RETURN().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*IreturnContext).Get_RETURN() == nil {
				return 0
			} else {
				return localctx.(*IreturnContext).Get_RETURN().GetColumn()
			}
		}())
		localctx.(*IreturnContext).ex = transferencia.NewReturn(Ast.RETURN, nil, fila, columna)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(997)

			var _m = p.Match(NparserRETURN)

			localctx.(*IreturnContext)._RETURN = _m
		}
		{
			p.SetState(998)

			var _x = p.expresion(0)

			localctx.(*IreturnContext)._expresion = _x
		}

		fila := (func() int {
			if localctx.(*IreturnContext).Get_RETURN() == nil {
				return 0
			} else {
				return localctx.(*IreturnContext).Get_RETURN().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*IreturnContext).Get_RETURN() == nil {
				return 0
			} else {
				return localctx.(*IreturnContext).Get_RETURN().GetColumn()
			}
		}())
		localctx.(*IreturnContext).ex = transferencia.NewReturn(Ast.RETURN_EXPRESION, localctx.(*IreturnContext).Get_expresion().GetEx(), fila, columna)

	}

	return localctx
}

// IIbreakContext is an interface to support dynamic dispatch.
type IIbreakContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_BREAK returns the _BREAK token.
	Get_BREAK() antlr.Token

	// Set_BREAK sets the _BREAK token.
	Set_BREAK(antlr.Token)

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsIbreakContext differentiates from other interfaces.
	IsIbreakContext()
}

type IbreakContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	ex         Ast.Instruccion
	_BREAK     antlr.Token
	_expresion IExpresionContext
}

func NewEmptyIbreakContext() *IbreakContext {
	var p = new(IbreakContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_ibreak
	return p
}

func (*IbreakContext) IsIbreakContext() {}

func NewIbreakContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IbreakContext {
	var p = new(IbreakContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_ibreak

	return p
}

func (s *IbreakContext) GetParser() antlr.Parser { return s.parser }

func (s *IbreakContext) Get_BREAK() antlr.Token { return s._BREAK }

func (s *IbreakContext) Set_BREAK(v antlr.Token) { s._BREAK = v }

func (s *IbreakContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *IbreakContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *IbreakContext) GetEx() Ast.Instruccion { return s.ex }

func (s *IbreakContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *IbreakContext) BREAK() antlr.TerminalNode {
	return s.GetToken(NparserBREAK, 0)
}

func (s *IbreakContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *IbreakContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IbreakContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IbreakContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterIbreak(s)
	}
}

func (s *IbreakContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitIbreak(s)
	}
}

func (p *Nparser) Ibreak() (localctx IIbreakContext) {
	this := p
	_ = this

	localctx = NewIbreakContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, NparserRULE_ibreak)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1009)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 35, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1003)

			var _m = p.Match(NparserBREAK)

			localctx.(*IbreakContext)._BREAK = _m
		}

		fila := (func() int {
			if localctx.(*IbreakContext).Get_BREAK() == nil {
				return 0
			} else {
				return localctx.(*IbreakContext).Get_BREAK().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*IbreakContext).Get_BREAK() == nil {
				return 0
			} else {
				return localctx.(*IbreakContext).Get_BREAK().GetColumn()
			}
		}())
		localctx.(*IbreakContext).ex = transferencia.NewBreak(Ast.BREAK, nil, fila, columna)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1005)

			var _m = p.Match(NparserBREAK)

			localctx.(*IbreakContext)._BREAK = _m
		}
		{
			p.SetState(1006)

			var _x = p.expresion(0)

			localctx.(*IbreakContext)._expresion = _x
		}

		fila := (func() int {
			if localctx.(*IbreakContext).Get_BREAK() == nil {
				return 0
			} else {
				return localctx.(*IbreakContext).Get_BREAK().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*IbreakContext).Get_BREAK() == nil {
				return 0
			} else {
				return localctx.(*IbreakContext).Get_BREAK().GetColumn()
			}
		}())
		localctx.(*IbreakContext).ex = transferencia.NewBreak(Ast.BREAK_EXPRESION, localctx.(*IbreakContext).Get_expresion().GetEx(), fila, columna)

	}

	return localctx
}

// IIcontinueContext is an interface to support dynamic dispatch.
type IIcontinueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_CONTINUE returns the _CONTINUE token.
	Get_CONTINUE() antlr.Token

	// Set_CONTINUE sets the _CONTINUE token.
	Set_CONTINUE(antlr.Token)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsIcontinueContext differentiates from other interfaces.
	IsIcontinueContext()
}

type IcontinueContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	ex        Ast.Instruccion
	_CONTINUE antlr.Token
}

func NewEmptyIcontinueContext() *IcontinueContext {
	var p = new(IcontinueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_icontinue
	return p
}

func (*IcontinueContext) IsIcontinueContext() {}

func NewIcontinueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IcontinueContext {
	var p = new(IcontinueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_icontinue

	return p
}

func (s *IcontinueContext) GetParser() antlr.Parser { return s.parser }

func (s *IcontinueContext) Get_CONTINUE() antlr.Token { return s._CONTINUE }

func (s *IcontinueContext) Set_CONTINUE(v antlr.Token) { s._CONTINUE = v }

func (s *IcontinueContext) GetEx() Ast.Instruccion { return s.ex }

func (s *IcontinueContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *IcontinueContext) CONTINUE() antlr.TerminalNode {
	return s.GetToken(NparserCONTINUE, 0)
}

func (s *IcontinueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IcontinueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IcontinueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterIcontinue(s)
	}
}

func (s *IcontinueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitIcontinue(s)
	}
}

func (p *Nparser) Icontinue() (localctx IIcontinueContext) {
	this := p
	_ = this

	localctx = NewIcontinueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, NparserRULE_icontinue)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1011)

		var _m = p.Match(NparserCONTINUE)

		localctx.(*IcontinueContext)._CONTINUE = _m
	}

	fila := (func() int {
		if localctx.(*IcontinueContext).Get_CONTINUE() == nil {
			return 0
		} else {
			return localctx.(*IcontinueContext).Get_CONTINUE().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*IcontinueContext).Get_CONTINUE() == nil {
			return 0
		} else {
			return localctx.(*IcontinueContext).Get_CONTINUE().GetColumn()
		}
	}())
	localctx.(*IcontinueContext).ex = transferencia.NewContinue(fila, columna)

	return localctx
}

// IControl_loopContext is an interface to support dynamic dispatch.
type IControl_loopContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_LOOP returns the _LOOP token.
	Get_LOOP() antlr.Token

	// Set_LOOP sets the _LOOP token.
	Set_LOOP(antlr.Token)

	// Get_bloque returns the _bloque rule contexts.
	Get_bloque() IBloqueContext

	// Set_bloque sets the _bloque rule contexts.
	Set_bloque(IBloqueContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsControl_loopContext differentiates from other interfaces.
	IsControl_loopContext()
}

type Control_loopContext struct {
	*antlr.BaseParserRuleContext
	parser  antlr.Parser
	ex      Ast.Instruccion
	_LOOP   antlr.Token
	_bloque IBloqueContext
}

func NewEmptyControl_loopContext() *Control_loopContext {
	var p = new(Control_loopContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_control_loop
	return p
}

func (*Control_loopContext) IsControl_loopContext() {}

func NewControl_loopContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Control_loopContext {
	var p = new(Control_loopContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_control_loop

	return p
}

func (s *Control_loopContext) GetParser() antlr.Parser { return s.parser }

func (s *Control_loopContext) Get_LOOP() antlr.Token { return s._LOOP }

func (s *Control_loopContext) Set_LOOP(v antlr.Token) { s._LOOP = v }

func (s *Control_loopContext) Get_bloque() IBloqueContext { return s._bloque }

func (s *Control_loopContext) Set_bloque(v IBloqueContext) { s._bloque = v }

func (s *Control_loopContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Control_loopContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Control_loopContext) LOOP() antlr.TerminalNode {
	return s.GetToken(NparserLOOP, 0)
}

func (s *Control_loopContext) Bloque() IBloqueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloqueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloqueContext)
}

func (s *Control_loopContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Control_loopContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Control_loopContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterControl_loop(s)
	}
}

func (s *Control_loopContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitControl_loop(s)
	}
}

func (p *Nparser) Control_loop() (localctx IControl_loopContext) {
	this := p
	_ = this

	localctx = NewControl_loopContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, NparserRULE_control_loop)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1014)

		var _m = p.Match(NparserLOOP)

		localctx.(*Control_loopContext)._LOOP = _m
	}
	{
		p.SetState(1015)

		var _x = p.Bloque()

		localctx.(*Control_loopContext)._bloque = _x
	}

	fila := (func() int {
		if localctx.(*Control_loopContext).Get_LOOP() == nil {
			return 0
		} else {
			return localctx.(*Control_loopContext).Get_LOOP().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*Control_loopContext).Get_LOOP() == nil {
			return 0
		} else {
			return localctx.(*Control_loopContext).Get_LOOP().GetColumn()
		}
	}())
	localctx.(*Control_loopContext).ex = bucles.NewLoop(Ast.LOOP, localctx.(*Control_loopContext).Get_bloque().GetList(), fila, columna)

	return localctx
}

// IControl_loop_expContext is an interface to support dynamic dispatch.
type IControl_loop_expContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_LOOP returns the _LOOP token.
	Get_LOOP() antlr.Token

	// Set_LOOP sets the _LOOP token.
	Set_LOOP(antlr.Token)

	// GetBloquec returns the bloquec rule contexts.
	GetBloquec() IBloque_controlContext

	// SetBloquec sets the bloquec rule contexts.
	SetBloquec(IBloque_controlContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsControl_loop_expContext differentiates from other interfaces.
	IsControl_loop_expContext()
}

type Control_loop_expContext struct {
	*antlr.BaseParserRuleContext
	parser  antlr.Parser
	ex      Ast.Instruccion
	_LOOP   antlr.Token
	bloquec IBloque_controlContext
}

func NewEmptyControl_loop_expContext() *Control_loop_expContext {
	var p = new(Control_loop_expContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_control_loop_exp
	return p
}

func (*Control_loop_expContext) IsControl_loop_expContext() {}

func NewControl_loop_expContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Control_loop_expContext {
	var p = new(Control_loop_expContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_control_loop_exp

	return p
}

func (s *Control_loop_expContext) GetParser() antlr.Parser { return s.parser }

func (s *Control_loop_expContext) Get_LOOP() antlr.Token { return s._LOOP }

func (s *Control_loop_expContext) Set_LOOP(v antlr.Token) { s._LOOP = v }

func (s *Control_loop_expContext) GetBloquec() IBloque_controlContext { return s.bloquec }

func (s *Control_loop_expContext) SetBloquec(v IBloque_controlContext) { s.bloquec = v }

func (s *Control_loop_expContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Control_loop_expContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Control_loop_expContext) LOOP() antlr.TerminalNode {
	return s.GetToken(NparserLOOP, 0)
}

func (s *Control_loop_expContext) Bloque_control() IBloque_controlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloque_controlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloque_controlContext)
}

func (s *Control_loop_expContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Control_loop_expContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Control_loop_expContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterControl_loop_exp(s)
	}
}

func (s *Control_loop_expContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitControl_loop_exp(s)
	}
}

func (p *Nparser) Control_loop_exp() (localctx IControl_loop_expContext) {
	this := p
	_ = this

	localctx = NewControl_loop_expContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, NparserRULE_control_loop_exp)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1018)

		var _m = p.Match(NparserLOOP)

		localctx.(*Control_loop_expContext)._LOOP = _m
	}
	{
		p.SetState(1019)

		var _x = p.Bloque_control()

		localctx.(*Control_loop_expContext).bloquec = _x
	}

	fila := (func() int {
		if localctx.(*Control_loop_expContext).Get_LOOP() == nil {
			return 0
		} else {
			return localctx.(*Control_loop_expContext).Get_LOOP().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*Control_loop_expContext).Get_LOOP() == nil {
			return 0
		} else {
			return localctx.(*Control_loop_expContext).Get_LOOP().GetColumn()
		}
	}())
	localctx.(*Control_loop_expContext).ex = bucles.NewLoop(Ast.LOOP_EXPRESION, localctx.(*Control_loop_expContext).GetBloquec().GetList(), fila, columna)

	return localctx
}

// IPrintNormalContext is an interface to support dynamic dispatch.
type IPrintNormalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_PRINT returns the _PRINT token.
	Get_PRINT() antlr.Token

	// Set_PRINT sets the _PRINT token.
	Set_PRINT(antlr.Token)

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsPrintNormalContext differentiates from other interfaces.
	IsPrintNormalContext()
}

type PrintNormalContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	ex         Ast.Instruccion
	_PRINT     antlr.Token
	_expresion IExpresionContext
}

func NewEmptyPrintNormalContext() *PrintNormalContext {
	var p = new(PrintNormalContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_printNormal
	return p
}

func (*PrintNormalContext) IsPrintNormalContext() {}

func NewPrintNormalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrintNormalContext {
	var p = new(PrintNormalContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_printNormal

	return p
}

func (s *PrintNormalContext) GetParser() antlr.Parser { return s.parser }

func (s *PrintNormalContext) Get_PRINT() antlr.Token { return s._PRINT }

func (s *PrintNormalContext) Set_PRINT(v antlr.Token) { s._PRINT = v }

func (s *PrintNormalContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *PrintNormalContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *PrintNormalContext) GetEx() Ast.Instruccion { return s.ex }

func (s *PrintNormalContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *PrintNormalContext) PRINT() antlr.TerminalNode {
	return s.GetToken(NparserPRINT, 0)
}

func (s *PrintNormalContext) PAR_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserPAR_IZQ, 0)
}

func (s *PrintNormalContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *PrintNormalContext) PAR_DER() antlr.TerminalNode {
	return s.GetToken(NparserPAR_DER, 0)
}

func (s *PrintNormalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrintNormalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrintNormalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterPrintNormal(s)
	}
}

func (s *PrintNormalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitPrintNormal(s)
	}
}

func (p *Nparser) PrintNormal() (localctx IPrintNormalContext) {
	this := p
	_ = this

	localctx = NewPrintNormalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, NparserRULE_printNormal)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1022)

		var _m = p.Match(NparserPRINT)

		localctx.(*PrintNormalContext)._PRINT = _m
	}
	{
		p.SetState(1023)
		p.Match(NparserPAR_IZQ)
	}
	{
		p.SetState(1024)

		var _x = p.expresion(0)

		localctx.(*PrintNormalContext)._expresion = _x
	}
	{
		p.SetState(1025)
		p.Match(NparserPAR_DER)
	}

	fila := (func() int {
		if localctx.(*PrintNormalContext).Get_PRINT() == nil {
			return 0
		} else {
			return localctx.(*PrintNormalContext).Get_PRINT().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*PrintNormalContext).Get_PRINT() == nil {
			return 0
		} else {
			return localctx.(*PrintNormalContext).Get_PRINT().GetColumn()
		}
	}())
	localctx.(*PrintNormalContext).ex = instrucciones.NewPrint(localctx.(*PrintNormalContext).Get_expresion().GetEx(), Ast.PRINT, fila, columna)

	return localctx
}

// IPrintFormatoContext is an interface to support dynamic dispatch.
type IPrintFormatoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_PRINT returns the _PRINT token.
	Get_PRINT() antlr.Token

	// Get_CADENA returns the _CADENA token.
	Get_CADENA() antlr.Token

	// Set_PRINT sets the _PRINT token.
	Set_PRINT(antlr.Token)

	// Set_CADENA sets the _CADENA token.
	Set_CADENA(antlr.Token)

	// GetExpresiones returns the expresiones rule contexts.
	GetExpresiones() IElementosPrintContext

	// SetExpresiones sets the expresiones rule contexts.
	SetExpresiones(IElementosPrintContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsPrintFormatoContext differentiates from other interfaces.
	IsPrintFormatoContext()
}

type PrintFormatoContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	ex          Ast.Instruccion
	_PRINT      antlr.Token
	_CADENA     antlr.Token
	expresiones IElementosPrintContext
}

func NewEmptyPrintFormatoContext() *PrintFormatoContext {
	var p = new(PrintFormatoContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_printFormato
	return p
}

func (*PrintFormatoContext) IsPrintFormatoContext() {}

func NewPrintFormatoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrintFormatoContext {
	var p = new(PrintFormatoContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_printFormato

	return p
}

func (s *PrintFormatoContext) GetParser() antlr.Parser { return s.parser }

func (s *PrintFormatoContext) Get_PRINT() antlr.Token { return s._PRINT }

func (s *PrintFormatoContext) Get_CADENA() antlr.Token { return s._CADENA }

func (s *PrintFormatoContext) Set_PRINT(v antlr.Token) { s._PRINT = v }

func (s *PrintFormatoContext) Set_CADENA(v antlr.Token) { s._CADENA = v }

func (s *PrintFormatoContext) GetExpresiones() IElementosPrintContext { return s.expresiones }

func (s *PrintFormatoContext) SetExpresiones(v IElementosPrintContext) { s.expresiones = v }

func (s *PrintFormatoContext) GetEx() Ast.Instruccion { return s.ex }

func (s *PrintFormatoContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *PrintFormatoContext) PRINT() antlr.TerminalNode {
	return s.GetToken(NparserPRINT, 0)
}

func (s *PrintFormatoContext) PAR_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserPAR_IZQ, 0)
}

func (s *PrintFormatoContext) CADENA() antlr.TerminalNode {
	return s.GetToken(NparserCADENA, 0)
}

func (s *PrintFormatoContext) COMA() antlr.TerminalNode {
	return s.GetToken(NparserCOMA, 0)
}

func (s *PrintFormatoContext) PAR_DER() antlr.TerminalNode {
	return s.GetToken(NparserPAR_DER, 0)
}

func (s *PrintFormatoContext) ElementosPrint() IElementosPrintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementosPrintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementosPrintContext)
}

func (s *PrintFormatoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrintFormatoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrintFormatoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterPrintFormato(s)
	}
}

func (s *PrintFormatoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitPrintFormato(s)
	}
}

func (p *Nparser) PrintFormato() (localctx IPrintFormatoContext) {
	this := p
	_ = this

	localctx = NewPrintFormatoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, NparserRULE_printFormato)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1028)

		var _m = p.Match(NparserPRINT)

		localctx.(*PrintFormatoContext)._PRINT = _m
	}
	{
		p.SetState(1029)
		p.Match(NparserPAR_IZQ)
	}
	{
		p.SetState(1030)

		var _m = p.Match(NparserCADENA)

		localctx.(*PrintFormatoContext)._CADENA = _m
	}
	{
		p.SetState(1031)
		p.Match(NparserCOMA)
	}
	{
		p.SetState(1032)

		var _x = p.elementosPrint(0)

		localctx.(*PrintFormatoContext).expresiones = _x
	}
	{
		p.SetState(1033)
		p.Match(NparserPAR_DER)
	}

	fila := (func() int {
		if localctx.(*PrintFormatoContext).Get_PRINT() == nil {
			return 0
		} else {
			return localctx.(*PrintFormatoContext).Get_PRINT().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*PrintFormatoContext).Get_PRINT() == nil {
			return 0
		} else {
			return localctx.(*PrintFormatoContext).Get_PRINT().GetColumn()
		}
	}())
	valor := (func() string {
		if localctx.(*PrintFormatoContext).Get_CADENA() == nil {
			return ""
		} else {
			return localctx.(*PrintFormatoContext).Get_CADENA().GetText()
		}
	}())
	valor = valor[1 : len(valor)-1]
	localctx.(*PrintFormatoContext).ex = instrucciones.NewPrintF(localctx.(*PrintFormatoContext).GetExpresiones().GetList(), valor, Ast.PRINTF, fila, columna)

	return localctx
}

// IElementosPrintContext is an interface to support dynamic dispatch.
type IElementosPrintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLista_elementos returns the lista_elementos rule contexts.
	GetLista_elementos() IElementosPrintContext

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// SetLista_elementos sets the lista_elementos rule contexts.
	SetLista_elementos(IElementosPrintContext)

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsElementosPrintContext differentiates from other interfaces.
	IsElementosPrintContext()
}

type ElementosPrintContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	list            *arraylist.List
	lista_elementos IElementosPrintContext
	_expresion      IExpresionContext
}

func NewEmptyElementosPrintContext() *ElementosPrintContext {
	var p = new(ElementosPrintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_elementosPrint
	return p
}

func (*ElementosPrintContext) IsElementosPrintContext() {}

func NewElementosPrintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElementosPrintContext {
	var p = new(ElementosPrintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_elementosPrint

	return p
}

func (s *ElementosPrintContext) GetParser() antlr.Parser { return s.parser }

func (s *ElementosPrintContext) GetLista_elementos() IElementosPrintContext { return s.lista_elementos }

func (s *ElementosPrintContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *ElementosPrintContext) SetLista_elementos(v IElementosPrintContext) { s.lista_elementos = v }

func (s *ElementosPrintContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *ElementosPrintContext) GetList() *arraylist.List { return s.list }

func (s *ElementosPrintContext) SetList(v *arraylist.List) { s.list = v }

func (s *ElementosPrintContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *ElementosPrintContext) COMA() antlr.TerminalNode {
	return s.GetToken(NparserCOMA, 0)
}

func (s *ElementosPrintContext) ElementosPrint() IElementosPrintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementosPrintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementosPrintContext)
}

func (s *ElementosPrintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElementosPrintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ElementosPrintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterElementosPrint(s)
	}
}

func (s *ElementosPrintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitElementosPrint(s)
	}
}

func (p *Nparser) ElementosPrint() (localctx IElementosPrintContext) {
	return p.elementosPrint(0)
}

func (p *Nparser) elementosPrint(_p int) (localctx IElementosPrintContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewElementosPrintContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IElementosPrintContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 96
	p.EnterRecursionRule(localctx, 96, NparserRULE_elementosPrint, _p)
	localctx.(*ElementosPrintContext).list = arraylist.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1037)

		var _x = p.expresion(0)

		localctx.(*ElementosPrintContext)._expresion = _x
	}

	localctx.(*ElementosPrintContext).list.Add(localctx.(*ElementosPrintContext).Get_expresion().GetEx())

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1047)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 36, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewElementosPrintContext(p, _parentctx, _parentState)
			localctx.(*ElementosPrintContext).lista_elementos = _prevctx
			p.PushNewRecursionContext(localctx, _startState, NparserRULE_elementosPrint)
			p.SetState(1040)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(1041)
				p.Match(NparserCOMA)
			}
			{
				p.SetState(1042)

				var _x = p.expresion(0)

				localctx.(*ElementosPrintContext)._expresion = _x
			}

			localctx.(*ElementosPrintContext).GetLista_elementos().GetList().Add(localctx.(*ElementosPrintContext).Get_expresion().GetEx())
			localctx.(*ElementosPrintContext).list = localctx.(*ElementosPrintContext).GetLista_elementos().GetList()

		}
		p.SetState(1049)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 36, p.GetParserRuleContext())
	}

	return localctx
}

// IControl_whileContext is an interface to support dynamic dispatch.
type IControl_whileContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_WHILE returns the _WHILE token.
	Get_WHILE() antlr.Token

	// Set_WHILE sets the _WHILE token.
	Set_WHILE(antlr.Token)

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// Get_bloque returns the _bloque rule contexts.
	Get_bloque() IBloqueContext

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// Set_bloque sets the _bloque rule contexts.
	Set_bloque(IBloqueContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsControl_whileContext differentiates from other interfaces.
	IsControl_whileContext()
}

type Control_whileContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	ex         Ast.Instruccion
	_WHILE     antlr.Token
	_expresion IExpresionContext
	_bloque    IBloqueContext
}

func NewEmptyControl_whileContext() *Control_whileContext {
	var p = new(Control_whileContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_control_while
	return p
}

func (*Control_whileContext) IsControl_whileContext() {}

func NewControl_whileContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Control_whileContext {
	var p = new(Control_whileContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_control_while

	return p
}

func (s *Control_whileContext) GetParser() antlr.Parser { return s.parser }

func (s *Control_whileContext) Get_WHILE() antlr.Token { return s._WHILE }

func (s *Control_whileContext) Set_WHILE(v antlr.Token) { s._WHILE = v }

func (s *Control_whileContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *Control_whileContext) Get_bloque() IBloqueContext { return s._bloque }

func (s *Control_whileContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *Control_whileContext) Set_bloque(v IBloqueContext) { s._bloque = v }

func (s *Control_whileContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Control_whileContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Control_whileContext) WHILE() antlr.TerminalNode {
	return s.GetToken(NparserWHILE, 0)
}

func (s *Control_whileContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Control_whileContext) Bloque() IBloqueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBloqueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBloqueContext)
}

func (s *Control_whileContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Control_whileContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Control_whileContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterControl_while(s)
	}
}

func (s *Control_whileContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitControl_while(s)
	}
}

func (p *Nparser) Control_while() (localctx IControl_whileContext) {
	this := p
	_ = this

	localctx = NewControl_whileContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, NparserRULE_control_while)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1050)

		var _m = p.Match(NparserWHILE)

		localctx.(*Control_whileContext)._WHILE = _m
	}
	{
		p.SetState(1051)

		var _x = p.expresion(0)

		localctx.(*Control_whileContext)._expresion = _x
	}
	{
		p.SetState(1052)

		var _x = p.Bloque()

		localctx.(*Control_whileContext)._bloque = _x
	}

	fila := (func() int {
		if localctx.(*Control_whileContext).Get_WHILE() == nil {
			return 0
		} else {
			return localctx.(*Control_whileContext).Get_WHILE().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*Control_whileContext).Get_WHILE() == nil {
			return 0
		} else {
			return localctx.(*Control_whileContext).Get_WHILE().GetColumn()
		}
	}())
	localctx.(*Control_whileContext).ex = bucles.NewWhile(Ast.WHILE, localctx.(*Control_whileContext).Get_expresion().GetEx(), localctx.(*Control_whileContext).Get_bloque().GetList(), fila, columna)

	return localctx
}

// IParametros_funcionContext is an interface to support dynamic dispatch.
type IParametros_funcionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLista_elementos returns the lista_elementos rule contexts.
	GetLista_elementos() IParametros_funcionContext

	// Get_parametro returns the _parametro rule contexts.
	Get_parametro() IParametroContext

	// SetLista_elementos sets the lista_elementos rule contexts.
	SetLista_elementos(IParametros_funcionContext)

	// Set_parametro sets the _parametro rule contexts.
	Set_parametro(IParametroContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsParametros_funcionContext differentiates from other interfaces.
	IsParametros_funcionContext()
}

type Parametros_funcionContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	list            *arraylist.List
	lista_elementos IParametros_funcionContext
	_parametro      IParametroContext
}

func NewEmptyParametros_funcionContext() *Parametros_funcionContext {
	var p = new(Parametros_funcionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_parametros_funcion
	return p
}

func (*Parametros_funcionContext) IsParametros_funcionContext() {}

func NewParametros_funcionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Parametros_funcionContext {
	var p = new(Parametros_funcionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_parametros_funcion

	return p
}

func (s *Parametros_funcionContext) GetParser() antlr.Parser { return s.parser }

func (s *Parametros_funcionContext) GetLista_elementos() IParametros_funcionContext {
	return s.lista_elementos
}

func (s *Parametros_funcionContext) Get_parametro() IParametroContext { return s._parametro }

func (s *Parametros_funcionContext) SetLista_elementos(v IParametros_funcionContext) {
	s.lista_elementos = v
}

func (s *Parametros_funcionContext) Set_parametro(v IParametroContext) { s._parametro = v }

func (s *Parametros_funcionContext) GetList() *arraylist.List { return s.list }

func (s *Parametros_funcionContext) SetList(v *arraylist.List) { s.list = v }

func (s *Parametros_funcionContext) Parametro() IParametroContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParametroContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParametroContext)
}

func (s *Parametros_funcionContext) COMA() antlr.TerminalNode {
	return s.GetToken(NparserCOMA, 0)
}

func (s *Parametros_funcionContext) Parametros_funcion() IParametros_funcionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParametros_funcionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParametros_funcionContext)
}

func (s *Parametros_funcionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Parametros_funcionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Parametros_funcionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterParametros_funcion(s)
	}
}

func (s *Parametros_funcionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitParametros_funcion(s)
	}
}

func (p *Nparser) Parametros_funcion() (localctx IParametros_funcionContext) {
	return p.parametros_funcion(0)
}

func (p *Nparser) parametros_funcion(_p int) (localctx IParametros_funcionContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewParametros_funcionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IParametros_funcionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 100
	p.EnterRecursionRule(localctx, 100, NparserRULE_parametros_funcion, _p)
	localctx.(*Parametros_funcionContext).list = arraylist.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1056)

		var _x = p.Parametro()

		localctx.(*Parametros_funcionContext)._parametro = _x
	}

	localctx.(*Parametros_funcionContext).list.Add(localctx.(*Parametros_funcionContext).Get_parametro().GetEx())

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1066)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 37, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewParametros_funcionContext(p, _parentctx, _parentState)
			localctx.(*Parametros_funcionContext).lista_elementos = _prevctx
			p.PushNewRecursionContext(localctx, _startState, NparserRULE_parametros_funcion)
			p.SetState(1059)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(1060)
				p.Match(NparserCOMA)
			}
			{
				p.SetState(1061)

				var _x = p.Parametro()

				localctx.(*Parametros_funcionContext)._parametro = _x
			}

			localctx.(*Parametros_funcionContext).GetLista_elementos().GetList().Add(localctx.(*Parametros_funcionContext).Get_parametro().GetEx())
			localctx.(*Parametros_funcionContext).list = localctx.(*Parametros_funcionContext).GetLista_elementos().GetList()

		}
		p.SetState(1068)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 37, p.GetParserRuleContext())
	}

	return localctx
}

// IParametroContext is an interface to support dynamic dispatch.
type IParametroContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_MUT returns the _MUT token.
	Get_MUT() antlr.Token

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Set_MUT sets the _MUT token.
	Set_MUT(antlr.Token)

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// Get_tipo_dato returns the _tipo_dato rule contexts.
	Get_tipo_dato() ITipo_datoContext

	// Set_tipo_dato sets the _tipo_dato rule contexts.
	Set_tipo_dato(ITipo_datoContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Expresion

	// SetEx sets the ex attribute.
	SetEx(Ast.Expresion)

	// IsParametroContext differentiates from other interfaces.
	IsParametroContext()
}

type ParametroContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	ex         Ast.Expresion
	_MUT       antlr.Token
	_ID        antlr.Token
	_tipo_dato ITipo_datoContext
}

func NewEmptyParametroContext() *ParametroContext {
	var p = new(ParametroContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_parametro
	return p
}

func (*ParametroContext) IsParametroContext() {}

func NewParametroContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParametroContext {
	var p = new(ParametroContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_parametro

	return p
}

func (s *ParametroContext) GetParser() antlr.Parser { return s.parser }

func (s *ParametroContext) Get_MUT() antlr.Token { return s._MUT }

func (s *ParametroContext) Get_ID() antlr.Token { return s._ID }

func (s *ParametroContext) Set_MUT(v antlr.Token) { s._MUT = v }

func (s *ParametroContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *ParametroContext) Get_tipo_dato() ITipo_datoContext { return s._tipo_dato }

func (s *ParametroContext) Set_tipo_dato(v ITipo_datoContext) { s._tipo_dato = v }

func (s *ParametroContext) GetEx() Ast.Expresion { return s.ex }

func (s *ParametroContext) SetEx(v Ast.Expresion) { s.ex = v }

func (s *ParametroContext) MUT() antlr.TerminalNode {
	return s.GetToken(NparserMUT, 0)
}

func (s *ParametroContext) ID() antlr.TerminalNode {
	return s.GetToken(NparserID, 0)
}

func (s *ParametroContext) DOSPUNTOS() antlr.TerminalNode {
	return s.GetToken(NparserDOSPUNTOS, 0)
}

func (s *ParametroContext) Tipo_dato() ITipo_datoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipo_datoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipo_datoContext)
}

func (s *ParametroContext) AMPERSAND() antlr.TerminalNode {
	return s.GetToken(NparserAMPERSAND, 0)
}

func (s *ParametroContext) CORCHETE_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserCORCHETE_IZQ, 0)
}

func (s *ParametroContext) CORCHETE_DER() antlr.TerminalNode {
	return s.GetToken(NparserCORCHETE_DER, 0)
}

func (s *ParametroContext) VEC() antlr.TerminalNode {
	return s.GetToken(NparserVEC, 0)
}

func (s *ParametroContext) MENOR() antlr.TerminalNode {
	return s.GetToken(NparserMENOR, 0)
}

func (s *ParametroContext) MAYOR() antlr.TerminalNode {
	return s.GetToken(NparserMAYOR, 0)
}

func (s *ParametroContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParametroContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParametroContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterParametro(s)
	}
}

func (s *ParametroContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitParametro(s)
	}
}

func (p *Nparser) Parametro() (localctx IParametroContext) {
	this := p
	_ = this

	localctx = NewParametroContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, NparserRULE_parametro)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1099)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 38, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1069)

			var _m = p.Match(NparserMUT)

			localctx.(*ParametroContext)._MUT = _m
		}
		{
			p.SetState(1070)

			var _m = p.Match(NparserID)

			localctx.(*ParametroContext)._ID = _m
		}
		{
			p.SetState(1071)
			p.Match(NparserDOSPUNTOS)
		}
		{
			p.SetState(1072)

			var _x = p.Tipo_dato()

			localctx.(*ParametroContext)._tipo_dato = _x
		}

		fila := (func() int {
			if localctx.(*ParametroContext).Get_MUT() == nil {
				return 0
			} else {
				return localctx.(*ParametroContext).Get_MUT().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ParametroContext).Get_MUT() == nil {
				return 0
			} else {
				return localctx.(*ParametroContext).Get_MUT().GetColumn()
			}
		}())
		localctx.(*ParametroContext).ex = simbolos.NewParametro((func() string {
			if localctx.(*ParametroContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*ParametroContext).Get_ID().GetText()
			}
		}()), Ast.PARAMETRO, localctx.(*ParametroContext).Get_tipo_dato().GetEx(), true, Ast.NULL, fila, columna)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1075)

			var _m = p.Match(NparserID)

			localctx.(*ParametroContext)._ID = _m
		}
		{
			p.SetState(1076)
			p.Match(NparserDOSPUNTOS)
		}
		{
			p.SetState(1077)

			var _x = p.Tipo_dato()

			localctx.(*ParametroContext)._tipo_dato = _x
		}

		fila := (func() int {
			if localctx.(*ParametroContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*ParametroContext).Get_ID().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ParametroContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*ParametroContext).Get_ID().GetColumn()
			}
		}())
		localctx.(*ParametroContext).ex = simbolos.NewParametro((func() string {
			if localctx.(*ParametroContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*ParametroContext).Get_ID().GetText()
			}
		}()), Ast.PARAMETRO, localctx.(*ParametroContext).Get_tipo_dato().GetEx(), false, Ast.NULL, fila, columna)

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1080)

			var _m = p.Match(NparserID)

			localctx.(*ParametroContext)._ID = _m
		}
		{
			p.SetState(1081)
			p.Match(NparserDOSPUNTOS)
		}
		{
			p.SetState(1082)
			p.Match(NparserAMPERSAND)
		}
		{
			p.SetState(1083)
			p.Match(NparserMUT)
		}
		{
			p.SetState(1084)
			p.Match(NparserCORCHETE_IZQ)
		}
		{
			p.SetState(1085)

			var _x = p.Tipo_dato()

			localctx.(*ParametroContext)._tipo_dato = _x
		}
		{
			p.SetState(1086)
			p.Match(NparserCORCHETE_DER)
		}

		fila := (func() int {
			if localctx.(*ParametroContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*ParametroContext).Get_ID().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ParametroContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*ParametroContext).Get_ID().GetColumn()
			}
		}())
		localctx.(*ParametroContext).ex = simbolos.NewParametro((func() string {
			if localctx.(*ParametroContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*ParametroContext).Get_ID().GetText()
			}
		}()), Ast.PARAMETRO, Ast.ARRAY, true, localctx.(*ParametroContext).Get_tipo_dato().GetEx(), fila, columna)

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1089)

			var _m = p.Match(NparserID)

			localctx.(*ParametroContext)._ID = _m
		}
		{
			p.SetState(1090)
			p.Match(NparserDOSPUNTOS)
		}
		{
			p.SetState(1091)
			p.Match(NparserAMPERSAND)
		}
		{
			p.SetState(1092)
			p.Match(NparserMUT)
		}
		{
			p.SetState(1093)
			p.Match(NparserVEC)
		}
		{
			p.SetState(1094)
			p.Match(NparserMENOR)
		}
		{
			p.SetState(1095)

			var _x = p.Tipo_dato()

			localctx.(*ParametroContext)._tipo_dato = _x
		}
		{
			p.SetState(1096)
			p.Match(NparserMAYOR)
		}

		fila := (func() int {
			if localctx.(*ParametroContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*ParametroContext).Get_ID().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ParametroContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*ParametroContext).Get_ID().GetColumn()
			}
		}())
		localctx.(*ParametroContext).ex = simbolos.NewParametro((func() string {
			if localctx.(*ParametroContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*ParametroContext).Get_ID().GetText()
			}
		}()), Ast.PARAMETRO, Ast.VECTOR, true, localctx.(*ParametroContext).Get_tipo_dato().GetEx(), fila, columna)

	}

	return localctx
}

// ILlamada_funcionContext is an interface to support dynamic dispatch.
type ILlamada_funcionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// Get_parametros_llamada returns the _parametros_llamada rule contexts.
	Get_parametros_llamada() IParametros_llamadaContext

	// Set_parametros_llamada sets the _parametros_llamada rule contexts.
	Set_parametros_llamada(IParametros_llamadaContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Expresion

	// SetEx sets the ex attribute.
	SetEx(Ast.Expresion)

	// IsLlamada_funcionContext differentiates from other interfaces.
	IsLlamada_funcionContext()
}

type Llamada_funcionContext struct {
	*antlr.BaseParserRuleContext
	parser              antlr.Parser
	ex                  Ast.Expresion
	_ID                 antlr.Token
	_parametros_llamada IParametros_llamadaContext
}

func NewEmptyLlamada_funcionContext() *Llamada_funcionContext {
	var p = new(Llamada_funcionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_llamada_funcion
	return p
}

func (*Llamada_funcionContext) IsLlamada_funcionContext() {}

func NewLlamada_funcionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Llamada_funcionContext {
	var p = new(Llamada_funcionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_llamada_funcion

	return p
}

func (s *Llamada_funcionContext) GetParser() antlr.Parser { return s.parser }

func (s *Llamada_funcionContext) Get_ID() antlr.Token { return s._ID }

func (s *Llamada_funcionContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *Llamada_funcionContext) Get_parametros_llamada() IParametros_llamadaContext {
	return s._parametros_llamada
}

func (s *Llamada_funcionContext) Set_parametros_llamada(v IParametros_llamadaContext) {
	s._parametros_llamada = v
}

func (s *Llamada_funcionContext) GetEx() Ast.Expresion { return s.ex }

func (s *Llamada_funcionContext) SetEx(v Ast.Expresion) { s.ex = v }

func (s *Llamada_funcionContext) ID() antlr.TerminalNode {
	return s.GetToken(NparserID, 0)
}

func (s *Llamada_funcionContext) PAR_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserPAR_IZQ, 0)
}

func (s *Llamada_funcionContext) Parametros_llamada() IParametros_llamadaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParametros_llamadaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParametros_llamadaContext)
}

func (s *Llamada_funcionContext) PAR_DER() antlr.TerminalNode {
	return s.GetToken(NparserPAR_DER, 0)
}

func (s *Llamada_funcionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Llamada_funcionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Llamada_funcionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterLlamada_funcion(s)
	}
}

func (s *Llamada_funcionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitLlamada_funcion(s)
	}
}

func (p *Nparser) Llamada_funcion() (localctx ILlamada_funcionContext) {
	this := p
	_ = this

	localctx = NewLlamada_funcionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, NparserRULE_llamada_funcion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1111)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 39, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1101)

			var _m = p.Match(NparserID)

			localctx.(*Llamada_funcionContext)._ID = _m
		}
		{
			p.SetState(1102)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(1103)

			var _x = p.parametros_llamada(0)

			localctx.(*Llamada_funcionContext)._parametros_llamada = _x
		}
		{
			p.SetState(1104)
			p.Match(NparserPAR_DER)
		}

		fila := (func() int {
			if localctx.(*Llamada_funcionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Llamada_funcionContext).Get_ID().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Llamada_funcionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Llamada_funcionContext).Get_ID().GetColumn()
			}
		}())
		id := expresiones.NewIdentificador((func() string {
			if localctx.(*Llamada_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Llamada_funcionContext).Get_ID().GetText()
			}
		}()), Ast.IDENTIFICADOR, fila, columna)
		localctx.(*Llamada_funcionContext).ex = simbolos.NewLlamadaFuncion(id, localctx.(*Llamada_funcionContext).Get_parametros_llamada().GetList(), Ast.LLAMADA_FUNCION, fila, columna)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1107)

			var _m = p.Match(NparserID)

			localctx.(*Llamada_funcionContext)._ID = _m
		}
		{
			p.SetState(1108)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(1109)
			p.Match(NparserPAR_DER)
		}

		fila := (func() int {
			if localctx.(*Llamada_funcionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Llamada_funcionContext).Get_ID().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Llamada_funcionContext).Get_ID() == nil {
				return 0
			} else {
				return localctx.(*Llamada_funcionContext).Get_ID().GetColumn()
			}
		}())
		params := arraylist.New()
		id := expresiones.NewIdentificador((func() string {
			if localctx.(*Llamada_funcionContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Llamada_funcionContext).Get_ID().GetText()
			}
		}()), Ast.IDENTIFICADOR, fila, columna)
		localctx.(*Llamada_funcionContext).ex = simbolos.NewLlamadaFuncion(id, params, Ast.LLAMADA_FUNCION, fila, columna)

	}

	return localctx
}

// IParametros_llamadaContext is an interface to support dynamic dispatch.
type IParametros_llamadaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLista_elementos returns the lista_elementos rule contexts.
	GetLista_elementos() IParametros_llamadaContext

	// Get_parametro_llamada_referencia returns the _parametro_llamada_referencia rule contexts.
	Get_parametro_llamada_referencia() IParametro_llamada_referenciaContext

	// SetLista_elementos sets the lista_elementos rule contexts.
	SetLista_elementos(IParametros_llamadaContext)

	// Set_parametro_llamada_referencia sets the _parametro_llamada_referencia rule contexts.
	Set_parametro_llamada_referencia(IParametro_llamada_referenciaContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsParametros_llamadaContext differentiates from other interfaces.
	IsParametros_llamadaContext()
}

type Parametros_llamadaContext struct {
	*antlr.BaseParserRuleContext
	parser                        antlr.Parser
	list                          *arraylist.List
	lista_elementos               IParametros_llamadaContext
	_parametro_llamada_referencia IParametro_llamada_referenciaContext
}

func NewEmptyParametros_llamadaContext() *Parametros_llamadaContext {
	var p = new(Parametros_llamadaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_parametros_llamada
	return p
}

func (*Parametros_llamadaContext) IsParametros_llamadaContext() {}

func NewParametros_llamadaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Parametros_llamadaContext {
	var p = new(Parametros_llamadaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_parametros_llamada

	return p
}

func (s *Parametros_llamadaContext) GetParser() antlr.Parser { return s.parser }

func (s *Parametros_llamadaContext) GetLista_elementos() IParametros_llamadaContext {
	return s.lista_elementos
}

func (s *Parametros_llamadaContext) Get_parametro_llamada_referencia() IParametro_llamada_referenciaContext {
	return s._parametro_llamada_referencia
}

func (s *Parametros_llamadaContext) SetLista_elementos(v IParametros_llamadaContext) {
	s.lista_elementos = v
}

func (s *Parametros_llamadaContext) Set_parametro_llamada_referencia(v IParametro_llamada_referenciaContext) {
	s._parametro_llamada_referencia = v
}

func (s *Parametros_llamadaContext) GetList() *arraylist.List { return s.list }

func (s *Parametros_llamadaContext) SetList(v *arraylist.List) { s.list = v }

func (s *Parametros_llamadaContext) Parametro_llamada_referencia() IParametro_llamada_referenciaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParametro_llamada_referenciaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParametro_llamada_referenciaContext)
}

func (s *Parametros_llamadaContext) COMA() antlr.TerminalNode {
	return s.GetToken(NparserCOMA, 0)
}

func (s *Parametros_llamadaContext) Parametros_llamada() IParametros_llamadaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParametros_llamadaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParametros_llamadaContext)
}

func (s *Parametros_llamadaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Parametros_llamadaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Parametros_llamadaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterParametros_llamada(s)
	}
}

func (s *Parametros_llamadaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitParametros_llamada(s)
	}
}

func (p *Nparser) Parametros_llamada() (localctx IParametros_llamadaContext) {
	return p.parametros_llamada(0)
}

func (p *Nparser) parametros_llamada(_p int) (localctx IParametros_llamadaContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewParametros_llamadaContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IParametros_llamadaContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 106
	p.EnterRecursionRule(localctx, 106, NparserRULE_parametros_llamada, _p)
	localctx.(*Parametros_llamadaContext).list = arraylist.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1114)

		var _x = p.Parametro_llamada_referencia()

		localctx.(*Parametros_llamadaContext)._parametro_llamada_referencia = _x
	}

	localctx.(*Parametros_llamadaContext).list.Add(localctx.(*Parametros_llamadaContext).Get_parametro_llamada_referencia().GetEx())

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1124)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 40, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewParametros_llamadaContext(p, _parentctx, _parentState)
			localctx.(*Parametros_llamadaContext).lista_elementos = _prevctx
			p.PushNewRecursionContext(localctx, _startState, NparserRULE_parametros_llamada)
			p.SetState(1117)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(1118)
				p.Match(NparserCOMA)
			}
			{
				p.SetState(1119)

				var _x = p.Parametro_llamada_referencia()

				localctx.(*Parametros_llamadaContext)._parametro_llamada_referencia = _x
			}

			localctx.(*Parametros_llamadaContext).GetLista_elementos().GetList().Add(localctx.(*Parametros_llamadaContext).Get_parametro_llamada_referencia().GetEx())
			localctx.(*Parametros_llamadaContext).list = localctx.(*Parametros_llamadaContext).GetLista_elementos().GetList()

		}
		p.SetState(1126)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 40, p.GetParserRuleContext())
	}

	return localctx
}

// IParametro_llamada_referenciaContext is an interface to support dynamic dispatch.
type IParametro_llamada_referenciaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_AMPERSAND returns the _AMPERSAND token.
	Get_AMPERSAND() antlr.Token

	// Get_ID returns the _ID token.
	Get_ID() antlr.Token

	// Set_AMPERSAND sets the _AMPERSAND token.
	Set_AMPERSAND(antlr.Token)

	// Set_ID sets the _ID token.
	Set_ID(antlr.Token)

	// GetE returns the e rule contexts.
	GetE() IExpresionContext

	// SetE sets the e rule contexts.
	SetE(IExpresionContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Expresion

	// SetEx sets the ex attribute.
	SetEx(Ast.Expresion)

	// IsParametro_llamada_referenciaContext differentiates from other interfaces.
	IsParametro_llamada_referenciaContext()
}

type Parametro_llamada_referenciaContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	ex         Ast.Expresion
	e          IExpresionContext
	_AMPERSAND antlr.Token
	_ID        antlr.Token
}

func NewEmptyParametro_llamada_referenciaContext() *Parametro_llamada_referenciaContext {
	var p = new(Parametro_llamada_referenciaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_parametro_llamada_referencia
	return p
}

func (*Parametro_llamada_referenciaContext) IsParametro_llamada_referenciaContext() {}

func NewParametro_llamada_referenciaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Parametro_llamada_referenciaContext {
	var p = new(Parametro_llamada_referenciaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_parametro_llamada_referencia

	return p
}

func (s *Parametro_llamada_referenciaContext) GetParser() antlr.Parser { return s.parser }

func (s *Parametro_llamada_referenciaContext) Get_AMPERSAND() antlr.Token { return s._AMPERSAND }

func (s *Parametro_llamada_referenciaContext) Get_ID() antlr.Token { return s._ID }

func (s *Parametro_llamada_referenciaContext) Set_AMPERSAND(v antlr.Token) { s._AMPERSAND = v }

func (s *Parametro_llamada_referenciaContext) Set_ID(v antlr.Token) { s._ID = v }

func (s *Parametro_llamada_referenciaContext) GetE() IExpresionContext { return s.e }

func (s *Parametro_llamada_referenciaContext) SetE(v IExpresionContext) { s.e = v }

func (s *Parametro_llamada_referenciaContext) GetEx() Ast.Expresion { return s.ex }

func (s *Parametro_llamada_referenciaContext) SetEx(v Ast.Expresion) { s.ex = v }

func (s *Parametro_llamada_referenciaContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Parametro_llamada_referenciaContext) AMPERSAND() antlr.TerminalNode {
	return s.GetToken(NparserAMPERSAND, 0)
}

func (s *Parametro_llamada_referenciaContext) MUT() antlr.TerminalNode {
	return s.GetToken(NparserMUT, 0)
}

func (s *Parametro_llamada_referenciaContext) ID() antlr.TerminalNode {
	return s.GetToken(NparserID, 0)
}

func (s *Parametro_llamada_referenciaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Parametro_llamada_referenciaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Parametro_llamada_referenciaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterParametro_llamada_referencia(s)
	}
}

func (s *Parametro_llamada_referenciaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitParametro_llamada_referencia(s)
	}
}

func (p *Nparser) Parametro_llamada_referencia() (localctx IParametro_llamada_referenciaContext) {
	this := p
	_ = this

	localctx = NewParametro_llamada_referenciaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, NparserRULE_parametro_llamada_referencia)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1137)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 41, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1127)

			var _x = p.expresion(0)

			localctx.(*Parametro_llamada_referenciaContext).e = _x
		}

		temp := localctx.(*Parametro_llamada_referenciaContext).GetE().GetEx()
		fila := temp.(Ast.Abstracto).GetFila()
		columna := temp.(Ast.Abstracto).GetColumna()
		localctx.(*Parametro_llamada_referenciaContext).ex = simbolos.NewValor(localctx.(*Parametro_llamada_referenciaContext).GetE().GetEx(), Ast.VALOR, false, false, fila, columna)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1130)

			var _m = p.Match(NparserAMPERSAND)

			localctx.(*Parametro_llamada_referenciaContext)._AMPERSAND = _m
		}
		{
			p.SetState(1131)
			p.Match(NparserMUT)
		}
		{
			p.SetState(1132)

			var _m = p.Match(NparserID)

			localctx.(*Parametro_llamada_referenciaContext)._ID = _m
		}

		fila := (func() int {
			if localctx.(*Parametro_llamada_referenciaContext).Get_AMPERSAND() == nil {
				return 0
			} else {
				return localctx.(*Parametro_llamada_referenciaContext).Get_AMPERSAND().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Parametro_llamada_referenciaContext).Get_AMPERSAND() == nil {
				return 0
			} else {
				return localctx.(*Parametro_llamada_referenciaContext).Get_AMPERSAND().GetColumn()
			}
		}())
		id := expresiones.NewIdentificador((func() string {
			if localctx.(*Parametro_llamada_referenciaContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Parametro_llamada_referenciaContext).Get_ID().GetText()
			}
		}()), Ast.IDENTIFICADOR, fila, columna)
		localctx.(*Parametro_llamada_referenciaContext).ex = simbolos.NewValor(id, Ast.VALOR, true, true, fila, columna)

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1134)

			var _m = p.Match(NparserAMPERSAND)

			localctx.(*Parametro_llamada_referenciaContext)._AMPERSAND = _m
		}
		{
			p.SetState(1135)

			var _m = p.Match(NparserID)

			localctx.(*Parametro_llamada_referenciaContext)._ID = _m
		}

		fila := (func() int {
			if localctx.(*Parametro_llamada_referenciaContext).Get_AMPERSAND() == nil {
				return 0
			} else {
				return localctx.(*Parametro_llamada_referenciaContext).Get_AMPERSAND().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Parametro_llamada_referenciaContext).Get_AMPERSAND() == nil {
				return 0
			} else {
				return localctx.(*Parametro_llamada_referenciaContext).Get_AMPERSAND().GetColumn()
			}
		}())
		id := expresiones.NewIdentificador((func() string {
			if localctx.(*Parametro_llamada_referenciaContext).Get_ID() == nil {
				return ""
			} else {
				return localctx.(*Parametro_llamada_referenciaContext).Get_ID().GetText()
			}
		}()), Ast.IDENTIFICADOR, fila, columna)
		localctx.(*Parametro_llamada_referenciaContext).ex = simbolos.NewValor(id, Ast.VALOR, true, false, fila, columna)

	}

	return localctx
}

// IElementos_vectorContext is an interface to support dynamic dispatch.
type IElementos_vectorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLista_elementos returns the lista_elementos rule contexts.
	GetLista_elementos() IElementos_vectorContext

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// SetLista_elementos sets the lista_elementos rule contexts.
	SetLista_elementos(IElementos_vectorContext)

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsElementos_vectorContext differentiates from other interfaces.
	IsElementos_vectorContext()
}

type Elementos_vectorContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	list            *arraylist.List
	lista_elementos IElementos_vectorContext
	_expresion      IExpresionContext
}

func NewEmptyElementos_vectorContext() *Elementos_vectorContext {
	var p = new(Elementos_vectorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_elementos_vector
	return p
}

func (*Elementos_vectorContext) IsElementos_vectorContext() {}

func NewElementos_vectorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Elementos_vectorContext {
	var p = new(Elementos_vectorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_elementos_vector

	return p
}

func (s *Elementos_vectorContext) GetParser() antlr.Parser { return s.parser }

func (s *Elementos_vectorContext) GetLista_elementos() IElementos_vectorContext {
	return s.lista_elementos
}

func (s *Elementos_vectorContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *Elementos_vectorContext) SetLista_elementos(v IElementos_vectorContext) {
	s.lista_elementos = v
}

func (s *Elementos_vectorContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *Elementos_vectorContext) GetList() *arraylist.List { return s.list }

func (s *Elementos_vectorContext) SetList(v *arraylist.List) { s.list = v }

func (s *Elementos_vectorContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Elementos_vectorContext) COMA() antlr.TerminalNode {
	return s.GetToken(NparserCOMA, 0)
}

func (s *Elementos_vectorContext) Elementos_vector() IElementos_vectorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementos_vectorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementos_vectorContext)
}

func (s *Elementos_vectorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Elementos_vectorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Elementos_vectorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterElementos_vector(s)
	}
}

func (s *Elementos_vectorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitElementos_vector(s)
	}
}

func (p *Nparser) Elementos_vector() (localctx IElementos_vectorContext) {
	return p.elementos_vector(0)
}

func (p *Nparser) elementos_vector(_p int) (localctx IElementos_vectorContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewElementos_vectorContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IElementos_vectorContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 110
	p.EnterRecursionRule(localctx, 110, NparserRULE_elementos_vector, _p)
	localctx.(*Elementos_vectorContext).list = arraylist.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1140)

		var _x = p.expresion(0)

		localctx.(*Elementos_vectorContext)._expresion = _x
	}

	localctx.(*Elementos_vectorContext).list.Add(localctx.(*Elementos_vectorContext).Get_expresion().GetEx())

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1150)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 42, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewElementos_vectorContext(p, _parentctx, _parentState)
			localctx.(*Elementos_vectorContext).lista_elementos = _prevctx
			p.PushNewRecursionContext(localctx, _startState, NparserRULE_elementos_vector)
			p.SetState(1143)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(1144)
				p.Match(NparserCOMA)
			}
			{
				p.SetState(1145)

				var _x = p.expresion(0)

				localctx.(*Elementos_vectorContext)._expresion = _x
			}

			localctx.(*Elementos_vectorContext).GetLista_elementos().GetList().Add(localctx.(*Elementos_vectorContext).Get_expresion().GetEx())
			localctx.(*Elementos_vectorContext).list = localctx.(*Elementos_vectorContext).GetLista_elementos().GetList()

		}
		p.SetState(1152)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 42, p.GetParserRuleContext())
	}

	return localctx
}

// IMetodos_iniciar_vectorContext is an interface to support dynamic dispatch.
type IMetodos_iniciar_vectorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_VEC returns the _VEC token.
	Get_VEC() antlr.Token

	// Get_VEC_M returns the _VEC_M token.
	Get_VEC_M() antlr.Token

	// Set_VEC sets the _VEC token.
	Set_VEC(antlr.Token)

	// Set_VEC_M sets the _VEC_M token.
	Set_VEC_M(antlr.Token)

	// GetE returns the e rule contexts.
	GetE() IElementos_vectorContext

	// Get_elementos_vector returns the _elementos_vector rule contexts.
	Get_elementos_vector() IElementos_vectorContext

	// GetEx1 returns the ex1 rule contexts.
	GetEx1() IExpresionContext

	// GetEx2 returns the ex2 rule contexts.
	GetEx2() IExpresionContext

	// GetCapacity returns the capacity rule contexts.
	GetCapacity() IExpresionContext

	// SetE sets the e rule contexts.
	SetE(IElementos_vectorContext)

	// Set_elementos_vector sets the _elementos_vector rule contexts.
	Set_elementos_vector(IElementos_vectorContext)

	// SetEx1 sets the ex1 rule contexts.
	SetEx1(IExpresionContext)

	// SetEx2 sets the ex2 rule contexts.
	SetEx2(IExpresionContext)

	// SetCapacity sets the capacity rule contexts.
	SetCapacity(IExpresionContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Expresion

	// SetEx sets the ex attribute.
	SetEx(Ast.Expresion)

	// IsMetodos_iniciar_vectorContext differentiates from other interfaces.
	IsMetodos_iniciar_vectorContext()
}

type Metodos_iniciar_vectorContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	ex                Ast.Expresion
	_VEC              antlr.Token
	_VEC_M            antlr.Token
	e                 IElementos_vectorContext
	_elementos_vector IElementos_vectorContext
	ex1               IExpresionContext
	ex2               IExpresionContext
	capacity          IExpresionContext
}

func NewEmptyMetodos_iniciar_vectorContext() *Metodos_iniciar_vectorContext {
	var p = new(Metodos_iniciar_vectorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_metodos_iniciar_vector
	return p
}

func (*Metodos_iniciar_vectorContext) IsMetodos_iniciar_vectorContext() {}

func NewMetodos_iniciar_vectorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Metodos_iniciar_vectorContext {
	var p = new(Metodos_iniciar_vectorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_metodos_iniciar_vector

	return p
}

func (s *Metodos_iniciar_vectorContext) GetParser() antlr.Parser { return s.parser }

func (s *Metodos_iniciar_vectorContext) Get_VEC() antlr.Token { return s._VEC }

func (s *Metodos_iniciar_vectorContext) Get_VEC_M() antlr.Token { return s._VEC_M }

func (s *Metodos_iniciar_vectorContext) Set_VEC(v antlr.Token) { s._VEC = v }

func (s *Metodos_iniciar_vectorContext) Set_VEC_M(v antlr.Token) { s._VEC_M = v }

func (s *Metodos_iniciar_vectorContext) GetE() IElementos_vectorContext { return s.e }

func (s *Metodos_iniciar_vectorContext) Get_elementos_vector() IElementos_vectorContext {
	return s._elementos_vector
}

func (s *Metodos_iniciar_vectorContext) GetEx1() IExpresionContext { return s.ex1 }

func (s *Metodos_iniciar_vectorContext) GetEx2() IExpresionContext { return s.ex2 }

func (s *Metodos_iniciar_vectorContext) GetCapacity() IExpresionContext { return s.capacity }

func (s *Metodos_iniciar_vectorContext) SetE(v IElementos_vectorContext) { s.e = v }

func (s *Metodos_iniciar_vectorContext) Set_elementos_vector(v IElementos_vectorContext) {
	s._elementos_vector = v
}

func (s *Metodos_iniciar_vectorContext) SetEx1(v IExpresionContext) { s.ex1 = v }

func (s *Metodos_iniciar_vectorContext) SetEx2(v IExpresionContext) { s.ex2 = v }

func (s *Metodos_iniciar_vectorContext) SetCapacity(v IExpresionContext) { s.capacity = v }

func (s *Metodos_iniciar_vectorContext) GetEx() Ast.Expresion { return s.ex }

func (s *Metodos_iniciar_vectorContext) SetEx(v Ast.Expresion) { s.ex = v }

func (s *Metodos_iniciar_vectorContext) VEC() antlr.TerminalNode {
	return s.GetToken(NparserVEC, 0)
}

func (s *Metodos_iniciar_vectorContext) DOBLE_DOSPUNTOS() antlr.TerminalNode {
	return s.GetToken(NparserDOBLE_DOSPUNTOS, 0)
}

func (s *Metodos_iniciar_vectorContext) NEW() antlr.TerminalNode {
	return s.GetToken(NparserNEW, 0)
}

func (s *Metodos_iniciar_vectorContext) PAR_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserPAR_IZQ, 0)
}

func (s *Metodos_iniciar_vectorContext) PAR_DER() antlr.TerminalNode {
	return s.GetToken(NparserPAR_DER, 0)
}

func (s *Metodos_iniciar_vectorContext) VEC_M() antlr.TerminalNode {
	return s.GetToken(NparserVEC_M, 0)
}

func (s *Metodos_iniciar_vectorContext) NOT() antlr.TerminalNode {
	return s.GetToken(NparserNOT, 0)
}

func (s *Metodos_iniciar_vectorContext) CORCHETE_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserCORCHETE_IZQ, 0)
}

func (s *Metodos_iniciar_vectorContext) CORCHETE_DER() antlr.TerminalNode {
	return s.GetToken(NparserCORCHETE_DER, 0)
}

func (s *Metodos_iniciar_vectorContext) Elementos_vector() IElementos_vectorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementos_vectorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementos_vectorContext)
}

func (s *Metodos_iniciar_vectorContext) PUNTOCOMA() antlr.TerminalNode {
	return s.GetToken(NparserPUNTOCOMA, 0)
}

func (s *Metodos_iniciar_vectorContext) AllExpresion() []IExpresionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpresionContext)(nil)).Elem())
	var tst = make([]IExpresionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpresionContext)
		}
	}

	return tst
}

func (s *Metodos_iniciar_vectorContext) Expresion(i int) IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Metodos_iniciar_vectorContext) WITH_CAPACITY() antlr.TerminalNode {
	return s.GetToken(NparserWITH_CAPACITY, 0)
}

func (s *Metodos_iniciar_vectorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Metodos_iniciar_vectorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Metodos_iniciar_vectorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterMetodos_iniciar_vector(s)
	}
}

func (s *Metodos_iniciar_vectorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitMetodos_iniciar_vector(s)
	}
}

func (p *Nparser) Metodos_iniciar_vector() (localctx IMetodos_iniciar_vectorContext) {
	this := p
	_ = this

	localctx = NewMetodos_iniciar_vectorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, NparserRULE_metodos_iniciar_vector)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1183)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 43, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1153)

			var _m = p.Match(NparserVEC)

			localctx.(*Metodos_iniciar_vectorContext)._VEC = _m
		}
		{
			p.SetState(1154)
			p.Match(NparserDOBLE_DOSPUNTOS)
		}
		{
			p.SetState(1155)
			p.Match(NparserNEW)
		}
		{
			p.SetState(1156)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(1157)
			p.Match(NparserPAR_DER)
		}

		fila := (func() int {
			if localctx.(*Metodos_iniciar_vectorContext).Get_VEC() == nil {
				return 0
			} else {
				return localctx.(*Metodos_iniciar_vectorContext).Get_VEC().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Metodos_iniciar_vectorContext).Get_VEC() == nil {
				return 0
			} else {
				return localctx.(*Metodos_iniciar_vectorContext).Get_VEC().GetColumn()
			}
		}())
		localctx.(*Metodos_iniciar_vectorContext).ex = fn_vectores.NewVecNew(fila, columna)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1159)

			var _m = p.Match(NparserVEC_M)

			localctx.(*Metodos_iniciar_vectorContext)._VEC_M = _m
		}
		{
			p.SetState(1160)
			p.Match(NparserNOT)
		}
		{
			p.SetState(1161)
			p.Match(NparserCORCHETE_IZQ)
		}
		{
			p.SetState(1162)

			var _x = p.elementos_vector(0)

			localctx.(*Metodos_iniciar_vectorContext).e = _x
			localctx.(*Metodos_iniciar_vectorContext)._elementos_vector = _x
		}
		{
			p.SetState(1163)
			p.Match(NparserCORCHETE_DER)
		}

		fila := (func() int {
			if localctx.(*Metodos_iniciar_vectorContext).Get_VEC_M() == nil {
				return 0
			} else {
				return localctx.(*Metodos_iniciar_vectorContext).Get_VEC_M().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Metodos_iniciar_vectorContext).Get_VEC_M() == nil {
				return 0
			} else {
				return localctx.(*Metodos_iniciar_vectorContext).Get_VEC_M().GetColumn()
			}
		}())
		//listaTemp := localctx.(*Metodos_iniciar_vectorContext).GetE().GetList()
		localctx.(*Metodos_iniciar_vectorContext).ex = fn_vectores.NewVecElementos(localctx.(*Metodos_iniciar_vectorContext).Get_elementos_vector().GetList(), fila, columna)

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1166)

			var _m = p.Match(NparserVEC_M)

			localctx.(*Metodos_iniciar_vectorContext)._VEC_M = _m
		}
		{
			p.SetState(1167)
			p.Match(NparserNOT)
		}
		{
			p.SetState(1168)
			p.Match(NparserCORCHETE_IZQ)
		}
		{
			p.SetState(1169)

			var _x = p.expresion(0)

			localctx.(*Metodos_iniciar_vectorContext).ex1 = _x
		}
		{
			p.SetState(1170)
			p.Match(NparserPUNTOCOMA)
		}
		{
			p.SetState(1171)

			var _x = p.expresion(0)

			localctx.(*Metodos_iniciar_vectorContext).ex2 = _x
		}
		{
			p.SetState(1172)
			p.Match(NparserCORCHETE_DER)
		}

		fila := (func() int {
			if localctx.(*Metodos_iniciar_vectorContext).Get_VEC_M() == nil {
				return 0
			} else {
				return localctx.(*Metodos_iniciar_vectorContext).Get_VEC_M().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Metodos_iniciar_vectorContext).Get_VEC_M() == nil {
				return 0
			} else {
				return localctx.(*Metodos_iniciar_vectorContext).Get_VEC_M().GetColumn()
			}
		}())
		listaTemp := arraylist.New()
		listaTemp.Add(localctx.(*Metodos_iniciar_vectorContext).GetEx1().GetEx())
		listaTemp.Add(localctx.(*Metodos_iniciar_vectorContext).GetEx2().GetEx())
		localctx.(*Metodos_iniciar_vectorContext).ex = fn_vectores.NewVecFactorial(listaTemp, fila, columna)

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1175)

			var _m = p.Match(NparserVEC)

			localctx.(*Metodos_iniciar_vectorContext)._VEC = _m
		}
		{
			p.SetState(1176)
			p.Match(NparserDOBLE_DOSPUNTOS)
		}
		{
			p.SetState(1177)
			p.Match(NparserWITH_CAPACITY)
		}
		{
			p.SetState(1178)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(1179)

			var _x = p.expresion(0)

			localctx.(*Metodos_iniciar_vectorContext).capacity = _x
		}
		{
			p.SetState(1180)
			p.Match(NparserPAR_DER)
		}

		fila := (func() int {
			if localctx.(*Metodos_iniciar_vectorContext).Get_VEC() == nil {
				return 0
			} else {
				return localctx.(*Metodos_iniciar_vectorContext).Get_VEC().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Metodos_iniciar_vectorContext).Get_VEC() == nil {
				return 0
			} else {
				return localctx.(*Metodos_iniciar_vectorContext).Get_VEC().GetColumn()
			}
		}())
		localctx.(*Metodos_iniciar_vectorContext).ex = fn_vectores.NewVecWithCapacity(localctx.(*Metodos_iniciar_vectorContext).GetCapacity().GetEx(), fila, columna)

	}

	return localctx
}

// IMetodos_vectorContext is an interface to support dynamic dispatch.
type IMetodos_vectorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_PUNTO returns the _PUNTO token.
	Get_PUNTO() antlr.Token

	// Set_PUNTO sets the _PUNTO token.
	Set_PUNTO(antlr.Token)

	// GetId returns the id rule contexts.
	GetId() IExpresionContext

	// GetExp returns the exp rule contexts.
	GetExp() IExpresionContext

	// GetPos returns the pos rule contexts.
	GetPos() IExpresionContext

	// SetId sets the id rule contexts.
	SetId(IExpresionContext)

	// SetExp sets the exp rule contexts.
	SetExp(IExpresionContext)

	// SetPos sets the pos rule contexts.
	SetPos(IExpresionContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Instruccion

	// SetEx sets the ex attribute.
	SetEx(Ast.Instruccion)

	// IsMetodos_vectorContext differentiates from other interfaces.
	IsMetodos_vectorContext()
}

type Metodos_vectorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	ex     Ast.Instruccion
	id     IExpresionContext
	_PUNTO antlr.Token
	exp    IExpresionContext
	pos    IExpresionContext
}

func NewEmptyMetodos_vectorContext() *Metodos_vectorContext {
	var p = new(Metodos_vectorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_metodos_vector
	return p
}

func (*Metodos_vectorContext) IsMetodos_vectorContext() {}

func NewMetodos_vectorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Metodos_vectorContext {
	var p = new(Metodos_vectorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_metodos_vector

	return p
}

func (s *Metodos_vectorContext) GetParser() antlr.Parser { return s.parser }

func (s *Metodos_vectorContext) Get_PUNTO() antlr.Token { return s._PUNTO }

func (s *Metodos_vectorContext) Set_PUNTO(v antlr.Token) { s._PUNTO = v }

func (s *Metodos_vectorContext) GetId() IExpresionContext { return s.id }

func (s *Metodos_vectorContext) GetExp() IExpresionContext { return s.exp }

func (s *Metodos_vectorContext) GetPos() IExpresionContext { return s.pos }

func (s *Metodos_vectorContext) SetId(v IExpresionContext) { s.id = v }

func (s *Metodos_vectorContext) SetExp(v IExpresionContext) { s.exp = v }

func (s *Metodos_vectorContext) SetPos(v IExpresionContext) { s.pos = v }

func (s *Metodos_vectorContext) GetEx() Ast.Instruccion { return s.ex }

func (s *Metodos_vectorContext) SetEx(v Ast.Instruccion) { s.ex = v }

func (s *Metodos_vectorContext) PUNTO() antlr.TerminalNode {
	return s.GetToken(NparserPUNTO, 0)
}

func (s *Metodos_vectorContext) PUSH() antlr.TerminalNode {
	return s.GetToken(NparserPUSH, 0)
}

func (s *Metodos_vectorContext) PAR_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserPAR_IZQ, 0)
}

func (s *Metodos_vectorContext) PAR_DER() antlr.TerminalNode {
	return s.GetToken(NparserPAR_DER, 0)
}

func (s *Metodos_vectorContext) AllExpresion() []IExpresionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpresionContext)(nil)).Elem())
	var tst = make([]IExpresionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpresionContext)
		}
	}

	return tst
}

func (s *Metodos_vectorContext) Expresion(i int) IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Metodos_vectorContext) INSERT() antlr.TerminalNode {
	return s.GetToken(NparserINSERT, 0)
}

func (s *Metodos_vectorContext) COMA() antlr.TerminalNode {
	return s.GetToken(NparserCOMA, 0)
}

func (s *Metodos_vectorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Metodos_vectorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Metodos_vectorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterMetodos_vector(s)
	}
}

func (s *Metodos_vectorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitMetodos_vector(s)
	}
}

func (p *Nparser) Metodos_vector() (localctx IMetodos_vectorContext) {
	this := p
	_ = this

	localctx = NewMetodos_vectorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, NparserRULE_metodos_vector)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1203)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 44, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1185)

			var _x = p.expresion(0)

			localctx.(*Metodos_vectorContext).id = _x
		}
		{
			p.SetState(1186)

			var _m = p.Match(NparserPUNTO)

			localctx.(*Metodos_vectorContext)._PUNTO = _m
		}
		{
			p.SetState(1187)
			p.Match(NparserPUSH)
		}
		{
			p.SetState(1188)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(1189)

			var _x = p.expresion(0)

			localctx.(*Metodos_vectorContext).exp = _x
		}
		{
			p.SetState(1190)
			p.Match(NparserPAR_DER)
		}

		fila := (func() int {
			if localctx.(*Metodos_vectorContext).Get_PUNTO() == nil {
				return 0
			} else {
				return localctx.(*Metodos_vectorContext).Get_PUNTO().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Metodos_vectorContext).Get_PUNTO() == nil {
				return 0
			} else {
				return localctx.(*Metodos_vectorContext).Get_PUNTO().GetColumn()
			}
		}())
		localctx.(*Metodos_vectorContext).ex = fn_vectores.NewPush(localctx.(*Metodos_vectorContext).GetId().GetEx(), localctx.(*Metodos_vectorContext).GetExp().GetEx(), Ast.VEC_PUSH, fila, columna)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1193)

			var _x = p.expresion(0)

			localctx.(*Metodos_vectorContext).id = _x
		}
		{
			p.SetState(1194)

			var _m = p.Match(NparserPUNTO)

			localctx.(*Metodos_vectorContext)._PUNTO = _m
		}
		{
			p.SetState(1195)
			p.Match(NparserINSERT)
		}
		{
			p.SetState(1196)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(1197)

			var _x = p.expresion(0)

			localctx.(*Metodos_vectorContext).pos = _x
		}
		{
			p.SetState(1198)
			p.Match(NparserCOMA)
		}
		{
			p.SetState(1199)

			var _x = p.expresion(0)

			localctx.(*Metodos_vectorContext).exp = _x
		}
		{
			p.SetState(1200)
			p.Match(NparserPAR_DER)
		}

		fila := (func() int {
			if localctx.(*Metodos_vectorContext).Get_PUNTO() == nil {
				return 0
			} else {
				return localctx.(*Metodos_vectorContext).Get_PUNTO().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Metodos_vectorContext).Get_PUNTO() == nil {
				return 0
			} else {
				return localctx.(*Metodos_vectorContext).Get_PUNTO().GetColumn()
			}
		}())
		localctx.(*Metodos_vectorContext).ex = fn_vectores.NewInsertVec(localctx.(*Metodos_vectorContext).GetId().GetEx(), localctx.(*Metodos_vectorContext).GetExp().GetEx(), localctx.(*Metodos_vectorContext).GetPos().GetEx(), Ast.VEC_INSERT, fila, columna)

	}

	return localctx
}

// IPotenciaContext is an interface to support dynamic dispatch.
type IPotenciaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_DOBLE_DOSPUNTOS returns the _DOBLE_DOSPUNTOS token.
	Get_DOBLE_DOSPUNTOS() antlr.Token

	// Set_DOBLE_DOSPUNTOS sets the _DOBLE_DOSPUNTOS token.
	Set_DOBLE_DOSPUNTOS(antlr.Token)

	// GetVal returns the val rule contexts.
	GetVal() IExpresionContext

	// GetPot returns the pot rule contexts.
	GetPot() IExpresionContext

	// SetVal sets the val rule contexts.
	SetVal(IExpresionContext)

	// SetPot sets the pot rule contexts.
	SetPot(IExpresionContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Expresion

	// SetEx sets the ex attribute.
	SetEx(Ast.Expresion)

	// IsPotenciaContext differentiates from other interfaces.
	IsPotenciaContext()
}

type PotenciaContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	ex               Ast.Expresion
	_DOBLE_DOSPUNTOS antlr.Token
	val              IExpresionContext
	pot              IExpresionContext
}

func NewEmptyPotenciaContext() *PotenciaContext {
	var p = new(PotenciaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_potencia
	return p
}

func (*PotenciaContext) IsPotenciaContext() {}

func NewPotenciaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PotenciaContext {
	var p = new(PotenciaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_potencia

	return p
}

func (s *PotenciaContext) GetParser() antlr.Parser { return s.parser }

func (s *PotenciaContext) Get_DOBLE_DOSPUNTOS() antlr.Token { return s._DOBLE_DOSPUNTOS }

func (s *PotenciaContext) Set_DOBLE_DOSPUNTOS(v antlr.Token) { s._DOBLE_DOSPUNTOS = v }

func (s *PotenciaContext) GetVal() IExpresionContext { return s.val }

func (s *PotenciaContext) GetPot() IExpresionContext { return s.pot }

func (s *PotenciaContext) SetVal(v IExpresionContext) { s.val = v }

func (s *PotenciaContext) SetPot(v IExpresionContext) { s.pot = v }

func (s *PotenciaContext) GetEx() Ast.Expresion { return s.ex }

func (s *PotenciaContext) SetEx(v Ast.Expresion) { s.ex = v }

func (s *PotenciaContext) I64() antlr.TerminalNode {
	return s.GetToken(NparserI64, 0)
}

func (s *PotenciaContext) DOBLE_DOSPUNTOS() antlr.TerminalNode {
	return s.GetToken(NparserDOBLE_DOSPUNTOS, 0)
}

func (s *PotenciaContext) POW() antlr.TerminalNode {
	return s.GetToken(NparserPOW, 0)
}

func (s *PotenciaContext) PAR_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserPAR_IZQ, 0)
}

func (s *PotenciaContext) COMA() antlr.TerminalNode {
	return s.GetToken(NparserCOMA, 0)
}

func (s *PotenciaContext) PAR_DER() antlr.TerminalNode {
	return s.GetToken(NparserPAR_DER, 0)
}

func (s *PotenciaContext) AllExpresion() []IExpresionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpresionContext)(nil)).Elem())
	var tst = make([]IExpresionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpresionContext)
		}
	}

	return tst
}

func (s *PotenciaContext) Expresion(i int) IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *PotenciaContext) F64() antlr.TerminalNode {
	return s.GetToken(NparserF64, 0)
}

func (s *PotenciaContext) POWF() antlr.TerminalNode {
	return s.GetToken(NparserPOWF, 0)
}

func (s *PotenciaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PotenciaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PotenciaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterPotencia(s)
	}
}

func (s *PotenciaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitPotencia(s)
	}
}

func (p *Nparser) Potencia() (localctx IPotenciaContext) {
	this := p
	_ = this

	localctx = NewPotenciaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, NparserRULE_potencia)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1225)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case NparserI64:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1205)
			p.Match(NparserI64)
		}
		{
			p.SetState(1206)

			var _m = p.Match(NparserDOBLE_DOSPUNTOS)

			localctx.(*PotenciaContext)._DOBLE_DOSPUNTOS = _m
		}
		{
			p.SetState(1207)
			p.Match(NparserPOW)
		}
		{
			p.SetState(1208)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(1209)

			var _x = p.expresion(0)

			localctx.(*PotenciaContext).val = _x
		}
		{
			p.SetState(1210)
			p.Match(NparserCOMA)
		}
		{
			p.SetState(1211)

			var _x = p.expresion(0)

			localctx.(*PotenciaContext).pot = _x
		}
		{
			p.SetState(1212)
			p.Match(NparserPAR_DER)
		}

		fila := (func() int {
			if localctx.(*PotenciaContext).Get_DOBLE_DOSPUNTOS() == nil {
				return 0
			} else {
				return localctx.(*PotenciaContext).Get_DOBLE_DOSPUNTOS().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*PotenciaContext).Get_DOBLE_DOSPUNTOS() == nil {
				return 0
			} else {
				return localctx.(*PotenciaContext).Get_DOBLE_DOSPUNTOS().GetColumn()
			}
		}()) - 1
		localctx.(*PotenciaContext).ex = expresiones.NewPow(Ast.POW, Ast.I64, localctx.(*PotenciaContext).GetVal().GetEx(), localctx.(*PotenciaContext).GetPot().GetEx(), fila, columna)

	case NparserF64:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1215)
			p.Match(NparserF64)
		}
		{
			p.SetState(1216)

			var _m = p.Match(NparserDOBLE_DOSPUNTOS)

			localctx.(*PotenciaContext)._DOBLE_DOSPUNTOS = _m
		}
		{
			p.SetState(1217)
			p.Match(NparserPOWF)
		}
		{
			p.SetState(1218)
			p.Match(NparserPAR_IZQ)
		}
		{
			p.SetState(1219)

			var _x = p.expresion(0)

			localctx.(*PotenciaContext).val = _x
		}
		{
			p.SetState(1220)
			p.Match(NparserCOMA)
		}
		{
			p.SetState(1221)

			var _x = p.expresion(0)

			localctx.(*PotenciaContext).pot = _x
		}
		{
			p.SetState(1222)
			p.Match(NparserPAR_DER)
		}

		fila := (func() int {
			if localctx.(*PotenciaContext).Get_DOBLE_DOSPUNTOS() == nil {
				return 0
			} else {
				return localctx.(*PotenciaContext).Get_DOBLE_DOSPUNTOS().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*PotenciaContext).Get_DOBLE_DOSPUNTOS() == nil {
				return 0
			} else {
				return localctx.(*PotenciaContext).Get_DOBLE_DOSPUNTOS().GetColumn()
			}
		}()) - 1
		localctx.(*PotenciaContext).ex = expresiones.NewPow(Ast.POW, Ast.F64, localctx.(*PotenciaContext).GetVal().GetEx(), localctx.(*PotenciaContext).GetPot().GetEx(), fila, columna)

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IArrayContext is an interface to support dynamic dispatch.
type IArrayContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_CORCHETE_IZQ returns the _CORCHETE_IZQ token.
	Get_CORCHETE_IZQ() antlr.Token

	// Set_CORCHETE_IZQ sets the _CORCHETE_IZQ token.
	Set_CORCHETE_IZQ(antlr.Token)

	// GetElementos returns the elementos rule contexts.
	GetElementos() IElementos_vectorContext

	// Get_elementos_vector returns the _elementos_vector rule contexts.
	Get_elementos_vector() IElementos_vectorContext

	// GetElemento returns the elemento rule contexts.
	GetElemento() IExpresionContext

	// GetSerie returns the serie rule contexts.
	GetSerie() IExpresionContext

	// SetElementos sets the elementos rule contexts.
	SetElementos(IElementos_vectorContext)

	// Set_elementos_vector sets the _elementos_vector rule contexts.
	Set_elementos_vector(IElementos_vectorContext)

	// SetElemento sets the elemento rule contexts.
	SetElemento(IExpresionContext)

	// SetSerie sets the serie rule contexts.
	SetSerie(IExpresionContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Expresion

	// SetEx sets the ex attribute.
	SetEx(Ast.Expresion)

	// IsArrayContext differentiates from other interfaces.
	IsArrayContext()
}

type ArrayContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	ex                Ast.Expresion
	_CORCHETE_IZQ     antlr.Token
	elementos         IElementos_vectorContext
	_elementos_vector IElementos_vectorContext
	elemento          IExpresionContext
	serie             IExpresionContext
}

func NewEmptyArrayContext() *ArrayContext {
	var p = new(ArrayContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_array
	return p
}

func (*ArrayContext) IsArrayContext() {}

func NewArrayContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayContext {
	var p = new(ArrayContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_array

	return p
}

func (s *ArrayContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayContext) Get_CORCHETE_IZQ() antlr.Token { return s._CORCHETE_IZQ }

func (s *ArrayContext) Set_CORCHETE_IZQ(v antlr.Token) { s._CORCHETE_IZQ = v }

func (s *ArrayContext) GetElementos() IElementos_vectorContext { return s.elementos }

func (s *ArrayContext) Get_elementos_vector() IElementos_vectorContext { return s._elementos_vector }

func (s *ArrayContext) GetElemento() IExpresionContext { return s.elemento }

func (s *ArrayContext) GetSerie() IExpresionContext { return s.serie }

func (s *ArrayContext) SetElementos(v IElementos_vectorContext) { s.elementos = v }

func (s *ArrayContext) Set_elementos_vector(v IElementos_vectorContext) { s._elementos_vector = v }

func (s *ArrayContext) SetElemento(v IExpresionContext) { s.elemento = v }

func (s *ArrayContext) SetSerie(v IExpresionContext) { s.serie = v }

func (s *ArrayContext) GetEx() Ast.Expresion { return s.ex }

func (s *ArrayContext) SetEx(v Ast.Expresion) { s.ex = v }

func (s *ArrayContext) CORCHETE_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserCORCHETE_IZQ, 0)
}

func (s *ArrayContext) CORCHETE_DER() antlr.TerminalNode {
	return s.GetToken(NparserCORCHETE_DER, 0)
}

func (s *ArrayContext) Elementos_vector() IElementos_vectorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementos_vectorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementos_vectorContext)
}

func (s *ArrayContext) PUNTOCOMA() antlr.TerminalNode {
	return s.GetToken(NparserPUNTOCOMA, 0)
}

func (s *ArrayContext) AllExpresion() []IExpresionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpresionContext)(nil)).Elem())
	var tst = make([]IExpresionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpresionContext)
		}
	}

	return tst
}

func (s *ArrayContext) Expresion(i int) IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *ArrayContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterArray(s)
	}
}

func (s *ArrayContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitArray(s)
	}
}

func (p *Nparser) Array() (localctx IArrayContext) {
	this := p
	_ = this

	localctx = NewArrayContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, NparserRULE_array)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1239)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 46, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1227)

			var _m = p.Match(NparserCORCHETE_IZQ)

			localctx.(*ArrayContext)._CORCHETE_IZQ = _m
		}
		{
			p.SetState(1228)

			var _x = p.elementos_vector(0)

			localctx.(*ArrayContext).elementos = _x
			localctx.(*ArrayContext)._elementos_vector = _x
		}
		{
			p.SetState(1229)
			p.Match(NparserCORCHETE_DER)
		}

		fila := (func() int {
			if localctx.(*ArrayContext).Get_CORCHETE_IZQ() == nil {
				return 0
			} else {
				return localctx.(*ArrayContext).Get_CORCHETE_IZQ().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ArrayContext).Get_CORCHETE_IZQ() == nil {
				return 0
			} else {
				return localctx.(*ArrayContext).Get_CORCHETE_IZQ().GetColumn()
			}
		}())
		localctx.(*ArrayContext).ex = fn_array.NewArrayElementos(localctx.(*ArrayContext).Get_elementos_vector().GetList(), fila, columna)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1232)

			var _m = p.Match(NparserCORCHETE_IZQ)

			localctx.(*ArrayContext)._CORCHETE_IZQ = _m
		}
		{
			p.SetState(1233)

			var _x = p.expresion(0)

			localctx.(*ArrayContext).elemento = _x
		}
		{
			p.SetState(1234)
			p.Match(NparserPUNTOCOMA)
		}
		{
			p.SetState(1235)

			var _x = p.expresion(0)

			localctx.(*ArrayContext).serie = _x
		}
		{
			p.SetState(1236)
			p.Match(NparserCORCHETE_DER)
		}

		fila := (func() int {
			if localctx.(*ArrayContext).Get_CORCHETE_IZQ() == nil {
				return 0
			} else {
				return localctx.(*ArrayContext).Get_CORCHETE_IZQ().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*ArrayContext).Get_CORCHETE_IZQ() == nil {
				return 0
			} else {
				return localctx.(*ArrayContext).Get_CORCHETE_IZQ().GetColumn()
			}
		}())
		listaTemp := arraylist.New()
		listaTemp.Add(localctx.(*ArrayContext).GetElemento().GetEx())
		listaTemp.Add(localctx.(*ArrayContext).GetSerie().GetEx())
		localctx.(*ArrayContext).ex = fn_array.NewArrayFactorial(listaTemp, fila, columna)

	}

	return localctx
}

// IDimension_arrayContext is an interface to support dynamic dispatch.
type IDimension_arrayContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_CORCHETE_IZQ returns the _CORCHETE_IZQ token.
	Get_CORCHETE_IZQ() antlr.Token

	// Set_CORCHETE_IZQ sets the _CORCHETE_IZQ token.
	Set_CORCHETE_IZQ(antlr.Token)

	// GetLista_elementos returns the lista_elementos rule contexts.
	GetLista_elementos() IDimension_arrayContext

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// GetTipo returns the tipo rule contexts.
	GetTipo() ITipo_dato_tipoContext

	// SetLista_elementos sets the lista_elementos rule contexts.
	SetLista_elementos(IDimension_arrayContext)

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// SetTipo sets the tipo rule contexts.
	SetTipo(ITipo_dato_tipoContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Expresion

	// SetEx sets the ex attribute.
	SetEx(Ast.Expresion)

	// IsDimension_arrayContext differentiates from other interfaces.
	IsDimension_arrayContext()
}

type Dimension_arrayContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	ex              Ast.Expresion
	lista_elementos IDimension_arrayContext
	_expresion      IExpresionContext
	_CORCHETE_IZQ   antlr.Token
	tipo            ITipo_dato_tipoContext
}

func NewEmptyDimension_arrayContext() *Dimension_arrayContext {
	var p = new(Dimension_arrayContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_dimension_array
	return p
}

func (*Dimension_arrayContext) IsDimension_arrayContext() {}

func NewDimension_arrayContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dimension_arrayContext {
	var p = new(Dimension_arrayContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_dimension_array

	return p
}

func (s *Dimension_arrayContext) GetParser() antlr.Parser { return s.parser }

func (s *Dimension_arrayContext) Get_CORCHETE_IZQ() antlr.Token { return s._CORCHETE_IZQ }

func (s *Dimension_arrayContext) Set_CORCHETE_IZQ(v antlr.Token) { s._CORCHETE_IZQ = v }

func (s *Dimension_arrayContext) GetLista_elementos() IDimension_arrayContext {
	return s.lista_elementos
}

func (s *Dimension_arrayContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *Dimension_arrayContext) GetTipo() ITipo_dato_tipoContext { return s.tipo }

func (s *Dimension_arrayContext) SetLista_elementos(v IDimension_arrayContext) { s.lista_elementos = v }

func (s *Dimension_arrayContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *Dimension_arrayContext) SetTipo(v ITipo_dato_tipoContext) { s.tipo = v }

func (s *Dimension_arrayContext) GetEx() Ast.Expresion { return s.ex }

func (s *Dimension_arrayContext) SetEx(v Ast.Expresion) { s.ex = v }

func (s *Dimension_arrayContext) CORCHETE_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserCORCHETE_IZQ, 0)
}

func (s *Dimension_arrayContext) PUNTOCOMA() antlr.TerminalNode {
	return s.GetToken(NparserPUNTOCOMA, 0)
}

func (s *Dimension_arrayContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Dimension_arrayContext) CORCHETE_DER() antlr.TerminalNode {
	return s.GetToken(NparserCORCHETE_DER, 0)
}

func (s *Dimension_arrayContext) Dimension_array() IDimension_arrayContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDimension_arrayContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDimension_arrayContext)
}

func (s *Dimension_arrayContext) Tipo_dato_tipo() ITipo_dato_tipoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipo_dato_tipoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipo_dato_tipoContext)
}

func (s *Dimension_arrayContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dimension_arrayContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dimension_arrayContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterDimension_array(s)
	}
}

func (s *Dimension_arrayContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitDimension_array(s)
	}
}

func (p *Nparser) Dimension_array() (localctx IDimension_arrayContext) {
	this := p
	_ = this

	localctx = NewDimension_arrayContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, NparserRULE_dimension_array)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1255)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 47, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1241)
			p.Match(NparserCORCHETE_IZQ)
		}
		{
			p.SetState(1242)

			var _x = p.Dimension_array()

			localctx.(*Dimension_arrayContext).lista_elementos = _x
		}
		{
			p.SetState(1243)
			p.Match(NparserPUNTOCOMA)
		}
		{
			p.SetState(1244)

			var _x = p.expresion(0)

			localctx.(*Dimension_arrayContext)._expresion = _x
		}
		{
			p.SetState(1245)
			p.Match(NparserCORCHETE_DER)
		}

		dimension := localctx.(*Dimension_arrayContext).GetLista_elementos().GetEx()
		dimension.(expresiones.DimensionArray).Elementos.Add(localctx.(*Dimension_arrayContext).Get_expresion().GetEx())
		localctx.(*Dimension_arrayContext).ex = dimension

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1248)

			var _m = p.Match(NparserCORCHETE_IZQ)

			localctx.(*Dimension_arrayContext)._CORCHETE_IZQ = _m
		}
		{
			p.SetState(1249)

			var _x = p.Tipo_dato_tipo()

			localctx.(*Dimension_arrayContext).tipo = _x
		}
		{
			p.SetState(1250)
			p.Match(NparserPUNTOCOMA)
		}
		{
			p.SetState(1251)

			var _x = p.expresion(0)

			localctx.(*Dimension_arrayContext)._expresion = _x
		}
		{
			p.SetState(1252)
			p.Match(NparserCORCHETE_DER)
		}

		fila := (func() int {
			if localctx.(*Dimension_arrayContext).Get_CORCHETE_IZQ() == nil {
				return 0
			} else {
				return localctx.(*Dimension_arrayContext).Get_CORCHETE_IZQ().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Dimension_arrayContext).Get_CORCHETE_IZQ() == nil {
				return 0
			} else {
				return localctx.(*Dimension_arrayContext).Get_CORCHETE_IZQ().GetColumn()
			}
		}())
		listaD := arraylist.New()
		listaD.Add(localctx.(*Dimension_arrayContext).Get_expresion().GetEx())
		localctx.(*Dimension_arrayContext).ex = expresiones.NewDimensionArray(listaD, localctx.(*Dimension_arrayContext).GetTipo().GetEx(), fila, columna)

	}

	return localctx
}

// IDimension_acceso_arrayContext is an interface to support dynamic dispatch.
type IDimension_acceso_arrayContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLista_elementos returns the lista_elementos rule contexts.
	GetLista_elementos() IDimension_acceso_arrayContext

	// GetEx1 returns the ex1 rule contexts.
	GetEx1() IExpresionContext

	// Get_expresion returns the _expresion rule contexts.
	Get_expresion() IExpresionContext

	// SetLista_elementos sets the lista_elementos rule contexts.
	SetLista_elementos(IDimension_acceso_arrayContext)

	// SetEx1 sets the ex1 rule contexts.
	SetEx1(IExpresionContext)

	// Set_expresion sets the _expresion rule contexts.
	Set_expresion(IExpresionContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsDimension_acceso_arrayContext differentiates from other interfaces.
	IsDimension_acceso_arrayContext()
}

type Dimension_acceso_arrayContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	list            *arraylist.List
	lista_elementos IDimension_acceso_arrayContext
	ex1             IExpresionContext
	_expresion      IExpresionContext
}

func NewEmptyDimension_acceso_arrayContext() *Dimension_acceso_arrayContext {
	var p = new(Dimension_acceso_arrayContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_dimension_acceso_array
	return p
}

func (*Dimension_acceso_arrayContext) IsDimension_acceso_arrayContext() {}

func NewDimension_acceso_arrayContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dimension_acceso_arrayContext {
	var p = new(Dimension_acceso_arrayContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_dimension_acceso_array

	return p
}

func (s *Dimension_acceso_arrayContext) GetParser() antlr.Parser { return s.parser }

func (s *Dimension_acceso_arrayContext) GetLista_elementos() IDimension_acceso_arrayContext {
	return s.lista_elementos
}

func (s *Dimension_acceso_arrayContext) GetEx1() IExpresionContext { return s.ex1 }

func (s *Dimension_acceso_arrayContext) Get_expresion() IExpresionContext { return s._expresion }

func (s *Dimension_acceso_arrayContext) SetLista_elementos(v IDimension_acceso_arrayContext) {
	s.lista_elementos = v
}

func (s *Dimension_acceso_arrayContext) SetEx1(v IExpresionContext) { s.ex1 = v }

func (s *Dimension_acceso_arrayContext) Set_expresion(v IExpresionContext) { s._expresion = v }

func (s *Dimension_acceso_arrayContext) GetList() *arraylist.List { return s.list }

func (s *Dimension_acceso_arrayContext) SetList(v *arraylist.List) { s.list = v }

func (s *Dimension_acceso_arrayContext) CORCHETE_IZQ() antlr.TerminalNode {
	return s.GetToken(NparserCORCHETE_IZQ, 0)
}

func (s *Dimension_acceso_arrayContext) CORCHETE_DER() antlr.TerminalNode {
	return s.GetToken(NparserCORCHETE_DER, 0)
}

func (s *Dimension_acceso_arrayContext) Expresion() IExpresionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpresionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpresionContext)
}

func (s *Dimension_acceso_arrayContext) Dimension_acceso_array() IDimension_acceso_arrayContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDimension_acceso_arrayContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDimension_acceso_arrayContext)
}

func (s *Dimension_acceso_arrayContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dimension_acceso_arrayContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dimension_acceso_arrayContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterDimension_acceso_array(s)
	}
}

func (s *Dimension_acceso_arrayContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitDimension_acceso_array(s)
	}
}

func (p *Nparser) Dimension_acceso_array() (localctx IDimension_acceso_arrayContext) {
	return p.dimension_acceso_array(0)
}

func (p *Nparser) dimension_acceso_array(_p int) (localctx IDimension_acceso_arrayContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewDimension_acceso_arrayContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IDimension_acceso_arrayContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 122
	p.EnterRecursionRule(localctx, 122, NparserRULE_dimension_acceso_array, _p)
	localctx.(*Dimension_acceso_arrayContext).list = arraylist.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1258)
		p.Match(NparserCORCHETE_IZQ)
	}
	{
		p.SetState(1259)

		var _x = p.expresion(0)

		localctx.(*Dimension_acceso_arrayContext).ex1 = _x
		localctx.(*Dimension_acceso_arrayContext)._expresion = _x
	}
	{
		p.SetState(1260)
		p.Match(NparserCORCHETE_DER)
	}

	localctx.(*Dimension_acceso_arrayContext).list.Add(localctx.(*Dimension_acceso_arrayContext).GetEx1().GetEx())

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1271)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 48, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewDimension_acceso_arrayContext(p, _parentctx, _parentState)
			localctx.(*Dimension_acceso_arrayContext).lista_elementos = _prevctx
			p.PushNewRecursionContext(localctx, _startState, NparserRULE_dimension_acceso_array)
			p.SetState(1263)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(1264)
				p.Match(NparserCORCHETE_IZQ)
			}
			{
				p.SetState(1265)

				var _x = p.expresion(0)

				localctx.(*Dimension_acceso_arrayContext)._expresion = _x
			}
			{
				p.SetState(1266)
				p.Match(NparserCORCHETE_DER)
			}

			localctx.(*Dimension_acceso_arrayContext).GetLista_elementos().GetList().Add(localctx.(*Dimension_acceso_arrayContext).Get_expresion().GetEx())
			localctx.(*Dimension_acceso_arrayContext).list = localctx.(*Dimension_acceso_arrayContext).GetLista_elementos().GetList()

		}
		p.SetState(1273)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 48, p.GetParserRuleContext())
	}

	return localctx
}

// ITipo_dato_tipoContext is an interface to support dynamic dispatch.
type ITipo_dato_tipoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ID_CAMEL returns the _ID_CAMEL token.
	Get_ID_CAMEL() antlr.Token

	// Set_ID_CAMEL sets the _ID_CAMEL token.
	Set_ID_CAMEL(antlr.Token)

	// Get_tipo_dato returns the _tipo_dato rule contexts.
	Get_tipo_dato() ITipo_datoContext

	// GetTipo returns the tipo rule contexts.
	GetTipo() ITipo_dato_tipoContext

	// Get_dimension_array returns the _dimension_array rule contexts.
	Get_dimension_array() IDimension_arrayContext

	// Get_acceso_modulo returns the _acceso_modulo rule contexts.
	Get_acceso_modulo() IAcceso_moduloContext

	// Set_tipo_dato sets the _tipo_dato rule contexts.
	Set_tipo_dato(ITipo_datoContext)

	// SetTipo sets the tipo rule contexts.
	SetTipo(ITipo_dato_tipoContext)

	// Set_dimension_array sets the _dimension_array rule contexts.
	Set_dimension_array(IDimension_arrayContext)

	// Set_acceso_modulo sets the _acceso_modulo rule contexts.
	Set_acceso_modulo(IAcceso_moduloContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.TipoRetornado

	// SetEx sets the ex attribute.
	SetEx(Ast.TipoRetornado)

	// IsTipo_dato_tipoContext differentiates from other interfaces.
	IsTipo_dato_tipoContext()
}

type Tipo_dato_tipoContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	ex               Ast.TipoRetornado
	_tipo_dato       ITipo_datoContext
	tipo             ITipo_dato_tipoContext
	_ID_CAMEL        antlr.Token
	_dimension_array IDimension_arrayContext
	_acceso_modulo   IAcceso_moduloContext
}

func NewEmptyTipo_dato_tipoContext() *Tipo_dato_tipoContext {
	var p = new(Tipo_dato_tipoContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_tipo_dato_tipo
	return p
}

func (*Tipo_dato_tipoContext) IsTipo_dato_tipoContext() {}

func NewTipo_dato_tipoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tipo_dato_tipoContext {
	var p = new(Tipo_dato_tipoContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_tipo_dato_tipo

	return p
}

func (s *Tipo_dato_tipoContext) GetParser() antlr.Parser { return s.parser }

func (s *Tipo_dato_tipoContext) Get_ID_CAMEL() antlr.Token { return s._ID_CAMEL }

func (s *Tipo_dato_tipoContext) Set_ID_CAMEL(v antlr.Token) { s._ID_CAMEL = v }

func (s *Tipo_dato_tipoContext) Get_tipo_dato() ITipo_datoContext { return s._tipo_dato }

func (s *Tipo_dato_tipoContext) GetTipo() ITipo_dato_tipoContext { return s.tipo }

func (s *Tipo_dato_tipoContext) Get_dimension_array() IDimension_arrayContext {
	return s._dimension_array
}

func (s *Tipo_dato_tipoContext) Get_acceso_modulo() IAcceso_moduloContext { return s._acceso_modulo }

func (s *Tipo_dato_tipoContext) Set_tipo_dato(v ITipo_datoContext) { s._tipo_dato = v }

func (s *Tipo_dato_tipoContext) SetTipo(v ITipo_dato_tipoContext) { s.tipo = v }

func (s *Tipo_dato_tipoContext) Set_dimension_array(v IDimension_arrayContext) {
	s._dimension_array = v
}

func (s *Tipo_dato_tipoContext) Set_acceso_modulo(v IAcceso_moduloContext) { s._acceso_modulo = v }

func (s *Tipo_dato_tipoContext) GetEx() Ast.TipoRetornado { return s.ex }

func (s *Tipo_dato_tipoContext) SetEx(v Ast.TipoRetornado) { s.ex = v }

func (s *Tipo_dato_tipoContext) Tipo_dato() ITipo_datoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipo_datoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipo_datoContext)
}

func (s *Tipo_dato_tipoContext) VEC() antlr.TerminalNode {
	return s.GetToken(NparserVEC, 0)
}

func (s *Tipo_dato_tipoContext) MENOR() antlr.TerminalNode {
	return s.GetToken(NparserMENOR, 0)
}

func (s *Tipo_dato_tipoContext) MAYOR() antlr.TerminalNode {
	return s.GetToken(NparserMAYOR, 0)
}

func (s *Tipo_dato_tipoContext) Tipo_dato_tipo() ITipo_dato_tipoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITipo_dato_tipoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITipo_dato_tipoContext)
}

func (s *Tipo_dato_tipoContext) ID_CAMEL() antlr.TerminalNode {
	return s.GetToken(NparserID_CAMEL, 0)
}

func (s *Tipo_dato_tipoContext) Dimension_array() IDimension_arrayContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDimension_arrayContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDimension_arrayContext)
}

func (s *Tipo_dato_tipoContext) Acceso_modulo() IAcceso_moduloContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAcceso_moduloContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAcceso_moduloContext)
}

func (s *Tipo_dato_tipoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tipo_dato_tipoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tipo_dato_tipoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterTipo_dato_tipo(s)
	}
}

func (s *Tipo_dato_tipoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitTipo_dato_tipo(s)
	}
}

func (p *Nparser) Tipo_dato_tipo() (localctx ITipo_dato_tipoContext) {
	this := p
	_ = this

	localctx = NewTipo_dato_tipoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, NparserRULE_tipo_dato_tipo)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1291)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 49, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1274)

			var _x = p.Tipo_dato()

			localctx.(*Tipo_dato_tipoContext)._tipo_dato = _x
		}

		localctx.(*Tipo_dato_tipoContext).ex = Ast.TipoRetornado{
			Valor: true,
			Tipo:  localctx.(*Tipo_dato_tipoContext).Get_tipo_dato().GetEx(),
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1277)
			p.Match(NparserVEC)
		}
		{
			p.SetState(1278)
			p.Match(NparserMENOR)
		}
		{
			p.SetState(1279)

			var _x = p.Tipo_dato_tipo()

			localctx.(*Tipo_dato_tipoContext).tipo = _x
		}
		{
			p.SetState(1280)
			p.Match(NparserMAYOR)
		}

		localctx.(*Tipo_dato_tipoContext).ex = Ast.TipoRetornado{
			Valor: localctx.(*Tipo_dato_tipoContext).GetTipo().GetEx(),
			Tipo:  Ast.VECTOR,
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1283)

			var _m = p.Match(NparserID_CAMEL)

			localctx.(*Tipo_dato_tipoContext)._ID_CAMEL = _m
		}

		localctx.(*Tipo_dato_tipoContext).ex = Ast.TipoRetornado{
			Valor: (func() string {
				if localctx.(*Tipo_dato_tipoContext).Get_ID_CAMEL() == nil {
					return ""
				} else {
					return localctx.(*Tipo_dato_tipoContext).Get_ID_CAMEL().GetText()
				}
			}()),
			Tipo: Ast.STRUCT,
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1285)

			var _x = p.Dimension_array()

			localctx.(*Tipo_dato_tipoContext)._dimension_array = _x
		}

		localctx.(*Tipo_dato_tipoContext).ex = Ast.TipoRetornado{
			Valor: localctx.(*Tipo_dato_tipoContext).Get_dimension_array().GetEx(),
			Tipo:  Ast.DIMENSION_ARRAY,
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1288)

			var _x = p.Acceso_modulo()

			localctx.(*Tipo_dato_tipoContext)._acceso_modulo = _x
		}

		localctx.(*Tipo_dato_tipoContext).ex = Ast.TipoRetornado{
			Valor: localctx.(*Tipo_dato_tipoContext).Get_acceso_modulo().GetEx(),
			Tipo:  Ast.ACCESO_MODULO,
		}

	}

	return localctx
}

// IAcceso_moduloContext is an interface to support dynamic dispatch.
type IAcceso_moduloContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAcceso returns the acceso rule contexts.
	GetAcceso() IAcceso_modulo_elementosContext

	// SetAcceso sets the acceso rule contexts.
	SetAcceso(IAcceso_modulo_elementosContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Expresion

	// SetEx sets the ex attribute.
	SetEx(Ast.Expresion)

	// IsAcceso_moduloContext differentiates from other interfaces.
	IsAcceso_moduloContext()
}

type Acceso_moduloContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	ex     Ast.Expresion
	acceso IAcceso_modulo_elementosContext
}

func NewEmptyAcceso_moduloContext() *Acceso_moduloContext {
	var p = new(Acceso_moduloContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_acceso_modulo
	return p
}

func (*Acceso_moduloContext) IsAcceso_moduloContext() {}

func NewAcceso_moduloContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Acceso_moduloContext {
	var p = new(Acceso_moduloContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_acceso_modulo

	return p
}

func (s *Acceso_moduloContext) GetParser() antlr.Parser { return s.parser }

func (s *Acceso_moduloContext) GetAcceso() IAcceso_modulo_elementosContext { return s.acceso }

func (s *Acceso_moduloContext) SetAcceso(v IAcceso_modulo_elementosContext) { s.acceso = v }

func (s *Acceso_moduloContext) GetEx() Ast.Expresion { return s.ex }

func (s *Acceso_moduloContext) SetEx(v Ast.Expresion) { s.ex = v }

func (s *Acceso_moduloContext) Acceso_modulo_elementos() IAcceso_modulo_elementosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAcceso_modulo_elementosContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAcceso_modulo_elementosContext)
}

func (s *Acceso_moduloContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Acceso_moduloContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Acceso_moduloContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterAcceso_modulo(s)
	}
}

func (s *Acceso_moduloContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitAcceso_modulo(s)
	}
}

func (p *Nparser) Acceso_modulo() (localctx IAcceso_moduloContext) {
	this := p
	_ = this

	localctx = NewAcceso_moduloContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, NparserRULE_acceso_modulo)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1293)

		var _x = p.acceso_modulo_elementos(0)

		localctx.(*Acceso_moduloContext).acceso = _x
	}

	lista := localctx.(*Acceso_moduloContext).GetAcceso().GetList()
	elemento := lista.GetValue(lista.Len() - 1)
	fila := elemento.(Ast.Abstracto).GetFila()
	columna := elemento.(Ast.Abstracto).GetColumna()
	localctx.(*Acceso_moduloContext).ex = simbolos.NewAccesoModulo(localctx.(*Acceso_moduloContext).GetAcceso().GetList(), fila, columna)

	return localctx
}

// IAcceso_modulo_elementosContext is an interface to support dynamic dispatch.
type IAcceso_modulo_elementosContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ID_CAMEL returns the _ID_CAMEL token.
	Get_ID_CAMEL() antlr.Token

	// Set_ID_CAMEL sets the _ID_CAMEL token.
	Set_ID_CAMEL(antlr.Token)

	// GetLista_elementos returns the lista_elementos rule contexts.
	GetLista_elementos() IAcceso_modulo_elementosContext

	// GetId returns the id rule contexts.
	GetId() IAcceso_modulo_elemento_finalContext

	// SetLista_elementos sets the lista_elementos rule contexts.
	SetLista_elementos(IAcceso_modulo_elementosContext)

	// SetId sets the id rule contexts.
	SetId(IAcceso_modulo_elemento_finalContext)

	// GetList returns the list attribute.
	GetList() *arraylist.List

	// SetList sets the list attribute.
	SetList(*arraylist.List)

	// IsAcceso_modulo_elementosContext differentiates from other interfaces.
	IsAcceso_modulo_elementosContext()
}

type Acceso_modulo_elementosContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	list            *arraylist.List
	lista_elementos IAcceso_modulo_elementosContext
	_ID_CAMEL       antlr.Token
	id              IAcceso_modulo_elemento_finalContext
}

func NewEmptyAcceso_modulo_elementosContext() *Acceso_modulo_elementosContext {
	var p = new(Acceso_modulo_elementosContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_acceso_modulo_elementos
	return p
}

func (*Acceso_modulo_elementosContext) IsAcceso_modulo_elementosContext() {}

func NewAcceso_modulo_elementosContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Acceso_modulo_elementosContext {
	var p = new(Acceso_modulo_elementosContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_acceso_modulo_elementos

	return p
}

func (s *Acceso_modulo_elementosContext) GetParser() antlr.Parser { return s.parser }

func (s *Acceso_modulo_elementosContext) Get_ID_CAMEL() antlr.Token { return s._ID_CAMEL }

func (s *Acceso_modulo_elementosContext) Set_ID_CAMEL(v antlr.Token) { s._ID_CAMEL = v }

func (s *Acceso_modulo_elementosContext) GetLista_elementos() IAcceso_modulo_elementosContext {
	return s.lista_elementos
}

func (s *Acceso_modulo_elementosContext) GetId() IAcceso_modulo_elemento_finalContext { return s.id }

func (s *Acceso_modulo_elementosContext) SetLista_elementos(v IAcceso_modulo_elementosContext) {
	s.lista_elementos = v
}

func (s *Acceso_modulo_elementosContext) SetId(v IAcceso_modulo_elemento_finalContext) { s.id = v }

func (s *Acceso_modulo_elementosContext) GetList() *arraylist.List { return s.list }

func (s *Acceso_modulo_elementosContext) SetList(v *arraylist.List) { s.list = v }

func (s *Acceso_modulo_elementosContext) ID_CAMEL() antlr.TerminalNode {
	return s.GetToken(NparserID_CAMEL, 0)
}

func (s *Acceso_modulo_elementosContext) Acceso_modulo_elementos() IAcceso_modulo_elementosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAcceso_modulo_elementosContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAcceso_modulo_elementosContext)
}

func (s *Acceso_modulo_elementosContext) Acceso_modulo_elemento_final() IAcceso_modulo_elemento_finalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAcceso_modulo_elemento_finalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAcceso_modulo_elemento_finalContext)
}

func (s *Acceso_modulo_elementosContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Acceso_modulo_elementosContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Acceso_modulo_elementosContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterAcceso_modulo_elementos(s)
	}
}

func (s *Acceso_modulo_elementosContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitAcceso_modulo_elementos(s)
	}
}

func (p *Nparser) Acceso_modulo_elementos() (localctx IAcceso_modulo_elementosContext) {
	return p.acceso_modulo_elementos(0)
}

func (p *Nparser) acceso_modulo_elementos(_p int) (localctx IAcceso_modulo_elementosContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewAcceso_modulo_elementosContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IAcceso_modulo_elementosContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 128
	p.EnterRecursionRule(localctx, 128, NparserRULE_acceso_modulo_elementos, _p)
	localctx.(*Acceso_modulo_elementosContext).list = arraylist.New()

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1297)

		var _m = p.Match(NparserID_CAMEL)

		localctx.(*Acceso_modulo_elementosContext)._ID_CAMEL = _m
	}

	fila := (func() int {
		if localctx.(*Acceso_modulo_elementosContext).Get_ID_CAMEL() == nil {
			return 0
		} else {
			return localctx.(*Acceso_modulo_elementosContext).Get_ID_CAMEL().GetLine()
		}
	}())
	columna := (func() int {
		if localctx.(*Acceso_modulo_elementosContext).Get_ID_CAMEL() == nil {
			return 0
		} else {
			return localctx.(*Acceso_modulo_elementosContext).Get_ID_CAMEL().GetColumn()
		}
	}()) - 1
	id := expresiones.NewIdentificador((func() string {
		if localctx.(*Acceso_modulo_elementosContext).Get_ID_CAMEL() == nil {
			return ""
		} else {
			return localctx.(*Acceso_modulo_elementosContext).Get_ID_CAMEL().GetText()
		}
	}()), Ast.IDENTIFICADOR, fila, columna)
	localctx.(*Acceso_modulo_elementosContext).list.Add(id)

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1306)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 50, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewAcceso_modulo_elementosContext(p, _parentctx, _parentState)
			localctx.(*Acceso_modulo_elementosContext).lista_elementos = _prevctx
			p.PushNewRecursionContext(localctx, _startState, NparserRULE_acceso_modulo_elementos)
			p.SetState(1300)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(1301)

				var _x = p.Acceso_modulo_elemento_final()

				localctx.(*Acceso_modulo_elementosContext).id = _x
			}

			localctx.(*Acceso_modulo_elementosContext).GetLista_elementos().GetList().Add(localctx.(*Acceso_modulo_elementosContext).GetId().GetEx())
			localctx.(*Acceso_modulo_elementosContext).list = localctx.(*Acceso_modulo_elementosContext).GetLista_elementos().GetList()

		}
		p.SetState(1308)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 50, p.GetParserRuleContext())
	}

	return localctx
}

// IAcceso_modulo_elemento_finalContext is an interface to support dynamic dispatch.
type IAcceso_modulo_elemento_finalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_ID_CAMEL returns the _ID_CAMEL token.
	Get_ID_CAMEL() antlr.Token

	// Set_ID_CAMEL sets the _ID_CAMEL token.
	Set_ID_CAMEL(antlr.Token)

	// Get_llamada_funcion returns the _llamada_funcion rule contexts.
	Get_llamada_funcion() ILlamada_funcionContext

	// Set_llamada_funcion sets the _llamada_funcion rule contexts.
	Set_llamada_funcion(ILlamada_funcionContext)

	// GetEx returns the ex attribute.
	GetEx() Ast.Expresion

	// SetEx sets the ex attribute.
	SetEx(Ast.Expresion)

	// IsAcceso_modulo_elemento_finalContext differentiates from other interfaces.
	IsAcceso_modulo_elemento_finalContext()
}

type Acceso_modulo_elemento_finalContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	ex               Ast.Expresion
	_ID_CAMEL        antlr.Token
	_llamada_funcion ILlamada_funcionContext
}

func NewEmptyAcceso_modulo_elemento_finalContext() *Acceso_modulo_elemento_finalContext {
	var p = new(Acceso_modulo_elemento_finalContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = NparserRULE_acceso_modulo_elemento_final
	return p
}

func (*Acceso_modulo_elemento_finalContext) IsAcceso_modulo_elemento_finalContext() {}

func NewAcceso_modulo_elemento_finalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Acceso_modulo_elemento_finalContext {
	var p = new(Acceso_modulo_elemento_finalContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = NparserRULE_acceso_modulo_elemento_final

	return p
}

func (s *Acceso_modulo_elemento_finalContext) GetParser() antlr.Parser { return s.parser }

func (s *Acceso_modulo_elemento_finalContext) Get_ID_CAMEL() antlr.Token { return s._ID_CAMEL }

func (s *Acceso_modulo_elemento_finalContext) Set_ID_CAMEL(v antlr.Token) { s._ID_CAMEL = v }

func (s *Acceso_modulo_elemento_finalContext) Get_llamada_funcion() ILlamada_funcionContext {
	return s._llamada_funcion
}

func (s *Acceso_modulo_elemento_finalContext) Set_llamada_funcion(v ILlamada_funcionContext) {
	s._llamada_funcion = v
}

func (s *Acceso_modulo_elemento_finalContext) GetEx() Ast.Expresion { return s.ex }

func (s *Acceso_modulo_elemento_finalContext) SetEx(v Ast.Expresion) { s.ex = v }

func (s *Acceso_modulo_elemento_finalContext) DOBLE_DOSPUNTOS() antlr.TerminalNode {
	return s.GetToken(NparserDOBLE_DOSPUNTOS, 0)
}

func (s *Acceso_modulo_elemento_finalContext) ID_CAMEL() antlr.TerminalNode {
	return s.GetToken(NparserID_CAMEL, 0)
}

func (s *Acceso_modulo_elemento_finalContext) Llamada_funcion() ILlamada_funcionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILlamada_funcionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILlamada_funcionContext)
}

func (s *Acceso_modulo_elemento_finalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Acceso_modulo_elemento_finalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Acceso_modulo_elemento_finalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.EnterAcceso_modulo_elemento_final(s)
	}
}

func (s *Acceso_modulo_elemento_finalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(NparserListener); ok {
		listenerT.ExitAcceso_modulo_elemento_final(s)
	}
}

func (p *Nparser) Acceso_modulo_elemento_final() (localctx IAcceso_modulo_elemento_finalContext) {
	this := p
	_ = this

	localctx = NewAcceso_modulo_elemento_finalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, NparserRULE_acceso_modulo_elemento_final)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1316)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 51, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1309)
			p.Match(NparserDOBLE_DOSPUNTOS)
		}
		{
			p.SetState(1310)

			var _m = p.Match(NparserID_CAMEL)

			localctx.(*Acceso_modulo_elemento_finalContext)._ID_CAMEL = _m
		}

		fila := (func() int {
			if localctx.(*Acceso_modulo_elemento_finalContext).Get_ID_CAMEL() == nil {
				return 0
			} else {
				return localctx.(*Acceso_modulo_elemento_finalContext).Get_ID_CAMEL().GetLine()
			}
		}())
		columna := (func() int {
			if localctx.(*Acceso_modulo_elemento_finalContext).Get_ID_CAMEL() == nil {
				return 0
			} else {
				return localctx.(*Acceso_modulo_elemento_finalContext).Get_ID_CAMEL().GetColumn()
			}
		}()) - 1
		localctx.(*Acceso_modulo_elemento_finalContext).ex = expresiones.NewIdentificador((func() string {
			if localctx.(*Acceso_modulo_elemento_finalContext).Get_ID_CAMEL() == nil {
				return ""
			} else {
				return localctx.(*Acceso_modulo_elemento_finalContext).Get_ID_CAMEL().GetText()
			}
		}()), Ast.IDENTIFICADOR, fila, columna)

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1312)
			p.Match(NparserDOBLE_DOSPUNTOS)
		}
		{
			p.SetState(1313)

			var _x = p.Llamada_funcion()

			localctx.(*Acceso_modulo_elemento_finalContext)._llamada_funcion = _x
		}

		localctx.(*Acceso_modulo_elemento_finalContext).ex = localctx.(*Acceso_modulo_elemento_finalContext).Get_llamada_funcion().GetEx()

	}

	return localctx
}

func (p *Nparser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 15:
		var t *Atributos_struct_templateContext = nil
		if localctx != nil {
			t = localctx.(*Atributos_struct_templateContext)
		}
		return p.Atributos_struct_template_Sempred(t, predIndex)

	case 18:
		var t *Atributos_struct_instanciaContext = nil
		if localctx != nil {
			t = localctx.(*Atributos_struct_instanciaContext)
		}
		return p.Atributos_struct_instancia_Sempred(t, predIndex)

	case 24:
		var t *ExpresionContext = nil
		if localctx != nil {
			t = localctx.(*ExpresionContext)
		}
		return p.Expresion_Sempred(t, predIndex)

	case 36:
		var t *Case_matchContext = nil
		if localctx != nil {
			t = localctx.(*Case_matchContext)
		}
		return p.Case_match_Sempred(t, predIndex)

	case 40:
		var t *Case_match_expContext = nil
		if localctx != nil {
			t = localctx.(*Case_match_expContext)
		}
		return p.Case_match_exp_Sempred(t, predIndex)

	case 48:
		var t *ElementosPrintContext = nil
		if localctx != nil {
			t = localctx.(*ElementosPrintContext)
		}
		return p.ElementosPrint_Sempred(t, predIndex)

	case 50:
		var t *Parametros_funcionContext = nil
		if localctx != nil {
			t = localctx.(*Parametros_funcionContext)
		}
		return p.Parametros_funcion_Sempred(t, predIndex)

	case 53:
		var t *Parametros_llamadaContext = nil
		if localctx != nil {
			t = localctx.(*Parametros_llamadaContext)
		}
		return p.Parametros_llamada_Sempred(t, predIndex)

	case 55:
		var t *Elementos_vectorContext = nil
		if localctx != nil {
			t = localctx.(*Elementos_vectorContext)
		}
		return p.Elementos_vector_Sempred(t, predIndex)

	case 61:
		var t *Dimension_acceso_arrayContext = nil
		if localctx != nil {
			t = localctx.(*Dimension_acceso_arrayContext)
		}
		return p.Dimension_acceso_array_Sempred(t, predIndex)

	case 64:
		var t *Acceso_modulo_elementosContext = nil
		if localctx != nil {
			t = localctx.(*Acceso_modulo_elementosContext)
		}
		return p.Acceso_modulo_elementos_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *Nparser) Atributos_struct_template_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Nparser) Atributos_struct_instancia_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 1:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Nparser) Expresion_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 2:
		return p.Precpred(p.GetParserRuleContext(), 27)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 26)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 25)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 24)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 23)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 22)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 30)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 29)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 28)

	case 11:
		return p.Precpred(p.GetParserRuleContext(), 13)

	case 12:
		return p.Precpred(p.GetParserRuleContext(), 12)

	case 13:
		return p.Precpred(p.GetParserRuleContext(), 11)

	case 14:
		return p.Precpred(p.GetParserRuleContext(), 10)

	case 15:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 16:
		return p.Precpred(p.GetParserRuleContext(), 8)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Nparser) Case_match_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 17:
		return p.Precpred(p.GetParserRuleContext(), 3)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Nparser) Case_match_exp_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 18:
		return p.Precpred(p.GetParserRuleContext(), 3)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Nparser) ElementosPrint_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 19:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Nparser) Parametros_funcion_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 20:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Nparser) Parametros_llamada_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 21:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Nparser) Elementos_vector_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 22:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Nparser) Dimension_acceso_array_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 23:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *Nparser) Acceso_modulo_elementos_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 24:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
